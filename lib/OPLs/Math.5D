#!/usr/bin/5D
let (,) := (requireModule "Pair") '(,) in 
import [nil (:)] from (requireModule "List") in 
let L := \s (s, 'left) in 
let R := \s (s, 'right) in 
let P := \s (s, 'prefix) in 
let N := \s (s, 'none) in 
let S := \s (s, 'postfix) in 
[
[(L'(.))]
[(R'(_)) (R'(^))]
[(R'(**))]
[(L'(*)) (L'(⋅)) (L'(/)) (L'(&)) (L'(<<)) (L'(>>))]
[(R'(⨯))]
[(R'(:))]
[(P'('))]
[(L [])]
[(L'(++))]
[(L'(+)) (P'(unary-)) (L'(-)) (L'(|))]
[(L'(%))]
[(L'(∩))]
[(L'(∪))]
[(N'(∈)) (N'(⊂)) (N'(⊃)) (N'(⊆)) (N'(⊇))]
[(N'(=)) (N'(≟)) (N'(/=))]
[(N'(<)) (N'(<=)) (N'(>)) (N'(>=)) (N'(≤)) (N'(≥))]
[(L'(&&)) (L'(∧))]
[(L'(||)) (L'(∨))]
[(R'(,))]
[(R'($))]
[(R'(elif))]
[(R'(else))]
[(L'(|))]
[(L'(=>)) (L'(;)) (L'(?;))]
[(P'(\\))]
[(R'(let)) (R'(let!)) (R'(import))]
]
