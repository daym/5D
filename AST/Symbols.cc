#include "AST/Symbol"

namespace Symbols {

AST::NodeT Spercenteax = AST::symbolFromStr("%eax");
AST::NodeT Sright = AST::symbolFromStr("right");
AST::NodeT SlistFromStr = AST::symbolFromStr("listFromStr");
AST::NodeT Slessequal = AST::symbolFromStr("<=");
AST::NodeT Sinline = AST::symbolFromStr("inline");
AST::NodeT Shead = AST::symbolFromStr("head");
AST::NodeT SREPLV1 = AST::symbolFromStr("REPLV1");
AST::NodeT Snot = AST::symbolFromStr("¬");
AST::NodeT Scircumflex = AST::symbolFromStr("^");
AST::NodeT SfloatP = AST::symbolFromStr("float?");
AST::NodeT SsymbolFromStr = AST::symbolFromStr("symbolFromStr");
AST::NodeT Sdivmod0 = AST::symbolFromStr("divmod0");
AST::NodeT Sin = AST::symbolFromStr("in");
AST::NodeT Sapply = AST::symbolFromStr("apply");
AST::NodeT Sgreater = AST::symbolFromStr(">");
AST::NodeT Sspace  = AST::symbolFromStr(" ");
AST::NodeT SstrP = AST::symbolFromStr("str?");
AST::NodeT Scrossproduct = AST::symbolFromStr("⨯");
AST::NodeT Squote = AST::symbolFromStr("'");
AST::NodeT Srightbracket = AST::symbolFromStr("]");
AST::NodeT Srightparen = AST::symbolFromStr(")");
AST::NodeT Sautorightparen = AST::symbolFromStr("auto)");
AST::NodeT SkeywordFromStr = AST::symbolFromStr("keywordFromStr");
AST::NodeT Splus = AST::symbolFromStr("+");
AST::NodeT Sasterisk = AST::symbolFromStr("*");
AST::NodeT Sdash = AST::symbolFromStr("-");
AST::NodeT SintegerP = AST::symbolFromStr("integer?");
AST::NodeT Sslash = AST::symbolFromStr("/");
AST::NodeT Senvironment = AST::symbolFromStr("environment");
AST::NodeT Szero = AST::symbolFromStr("0");
AST::NodeT Stail = AST::symbolFromStr("tail");
AST::NodeT SnilP = AST::symbolFromStr("nil?");
AST::NodeT Slesssymbolgreater = AST::symbolFromStr("<symbol>");
AST::NodeT Srec = AST::symbolFromStr("rec");
AST::NodeT Sapprox = AST::symbolFromStr("≈");
AST::NodeT Scolon = AST::symbolFromStr(":");
AST::NodeT SstrFromKeyword = AST::symbolFromStr("strFromKeyword");
AST::NodeT SstrFromList = AST::symbolFromStr("strFromList");
AST::NodeT Sless = AST::symbolFromStr("<");
AST::NodeT Stips5DV1 = AST::symbolFromStr("tips5DV1");
AST::NodeT Sdefine = AST::symbolFromStr("define");
AST::NodeT Sleftangle = AST::symbolFromStr("⟨");
AST::NodeT Srightangle = AST::symbolFromStr("⟩");
AST::NodeT SfromLibrary = AST::symbolFromStr("fromLibrary");
AST::NodeT Spercentecx = AST::symbolFromStr("%ecx");
AST::NodeT Snil = AST::symbolFromStr("nil");
AST::NodeT Sbackslash = AST::symbolFromStr("\\");
AST::NodeT StextBufferText = AST::symbolFromStr("textBufferText");
AST::NodeT SsymbolsEqualP = AST::symbolFromStr("symbolsEqual?");
AST::NodeT Shashf = AST::symbolFromStr("#f");
AST::NodeT SrunIO = AST::symbolFromStr("runIO");
AST::NodeT Spercentedx = AST::symbolFromStr("%edx");
AST::NodeT SintegerSucc = AST::symbolFromStr("integerSucc");
AST::NodeT Slet = AST::symbolFromStr("let");
AST::NodeT Sintzero = AST::symbolFromStr("int0");
AST::NodeT Sasteriskasterisk = AST::symbolFromStr("**");
AST::NodeT Sleftbracket = AST::symbolFromStr("[");
AST::NodeT SaddrsLEP = AST::symbolFromStr("addrsLE?");
AST::NodeT SintP = AST::symbolFromStr("int?");
AST::NodeT Sdefrec = AST::symbolFromStr("defrec");
AST::NodeT SsymbolP = AST::symbolFromStr("symbol?");
AST::NodeT Sleftcurly = AST::symbolFromStr("{");
AST::NodeT Sunderscore = AST::symbolFromStr("_");
AST::NodeT Shasht = AST::symbolFromStr("#t");
AST::NodeT Snone = AST::symbolFromStr("none");
AST::NodeT Stilde = AST::symbolFromStr("~");
AST::NodeT StranslateFFI = AST::symbolFromStr("translateFFI");
AST::NodeT Slessstringgreater = AST::symbolFromStr("<string>");
AST::NodeT Sequal = AST::symbolFromStr("=");
AST::NodeT Slessequalunicode = AST::symbolFromStr("≤");
AST::NodeT Sgreaterequalunicode = AST::symbolFromStr("≥");
AST::NodeT SconsP = AST::symbolFromStr("cons?");
AST::NodeT Slessoperatorgreater = AST::symbolFromStr("<operator>");
AST::NodeT SlessEOFgreater = AST::symbolFromStr("<EOF>");
AST::NodeT Sslashequal = AST::symbolFromStr("/=");
AST::NodeT Sleftparen = AST::symbolFromStr("(");
AST::NodeT Sautoleftparen = AST::symbolFromStr("auto(");
AST::NodeT SkeywordP = AST::symbolFromStr("keyword?");
AST::NodeT SintSucc = AST::symbolFromStr("intSucc");
AST::NodeT SloadFromLibrary = AST::symbolFromStr("loadFromLibrary");
AST::NodeT Srightcurly = AST::symbolFromStr("}");
AST::NodeT Shello = AST::symbolFromStr("hello");
AST::NodeT Sdef = AST::symbolFromStr("def");
AST::NodeT Sleft = AST::symbolFromStr("left");
AST::NodeT Stab = AST::symbolFromStr("tab");
AST::NodeT Snewline = AST::symbolFromStr("newline");
AST::NodeT Sbackspace = AST::symbolFromStr("backspace");
AST::NodeT Sescape = AST::symbolFromStr("escape");
AST::NodeT Sinfo = AST::symbolFromStr("info");
AST::NodeT Simport = AST::symbolFromStr("import");
AST::NodeT Sdescribe = AST::symbolFromStr("describe");
AST::NodeT SrequireModule = AST::symbolFromStr("requireModule");
AST::NodeT Sunderline = AST::symbolFromStr("_");
AST::NodeT SmoduleKeys = AST::symbolFromStr("moduleKeys");
AST::NodeT Sexports = AST::symbolFromStr("exports");
AST::NodeT Sdispatch = AST::symbolFromStr("dispatch");
AST::NodeT Sprefix = AST::symbolFromStr("prefix");
AST::NodeT Spostfix = AST::symbolFromStr("postfix");
AST::NodeT Sdot = AST::symbolFromStr(".");
AST::NodeT Sunarydash = AST::symbolFromStr("unary-");
AST::NodeT Ssubstr = AST::symbolFromStr("substr");
AST::NodeT SstrUntilZero = AST::symbolFromStr("strUntilZero");
AST::NodeT Sintegral = AST::symbolFromStr("∫");
AST::NodeT Sroot = AST::symbolFromStr("√");
AST::NodeT Sa = AST::symbolFromStr("a");
AST::NodeT Sb = AST::symbolFromStr("b");
AST::NodeT SBuiltins = AST::symbolFromStr("Builtins");
AST::NodeT Scolonequal = AST::symbolFromStr(":=");
AST::NodeT SgetOperatorPrecedenceListexclam = AST::symbolFromStr("getOperatorPrecedenceList!");
AST::NodeT Sdescribeexclam = AST::symbolFromStr("describe!");
AST::NodeT Sdefineexcam = AST::symbolFromStr("define!");
AST::NodeT Simportexclam = AST::symbolFromStr("import!");
AST::NodeT Spurgeexclam = AST::symbolFromStr("purge!");
AST::NodeT Sexecuteexclam = AST::symbolFromStr("execute!");
AST::NodeT Sreturnexclam = AST::symbolFromStr("return!");
AST::NodeT Shashexports = AST::symbolFromStr("#exports");
AST::NodeT Scomma = AST::symbolFromStr(",");
AST::NodeT Sfst = AST::symbolFromStr("fst");
AST::NodeT Ssnd = AST::symbolFromStr("snd");
AST::NodeT SpairP = AST::symbolFromStr("pair?");
AST::NodeT Sfrom = AST::symbolFromStr("from");
AST::NodeT Shashexclam = AST::symbolFromStr("#!");
AST::NodeT SAX = AST::symbolFromStr("AX");
AST::NodeT SCX = AST::symbolFromStr("CX");
AST::NodeT SDX = AST::symbolFromStr("DX");
AST::NodeT SBX = AST::symbolFromStr("BX");
AST::NodeT SSP = AST::symbolFromStr("SP");
AST::NodeT SBP = AST::symbolFromStr("BP");
AST::NodeT SSI = AST::symbolFromStr("SI");
AST::NodeT SDI = AST::symbolFromStr("DI");
AST::NodeT SloadRegImm = AST::symbolFromStr("loadRegImm");
AST::NodeT SloadRegReg = AST::symbolFromStr("loadRegReg");
AST::NodeT Spop = AST::symbolFromStr("pop");
AST::NodeT Spush = AST::symbolFromStr("push");
AST::NodeT SaddRegReg = AST::symbolFromStr("addRegReg");
AST::NodeT SaddValReg = AST::symbolFromStr("addValReg");
AST::NodeT SsubRegReg = AST::symbolFromStr("subRegReg");
AST::NodeT SsubValReg = AST::symbolFromStr("subValReg");
AST::NodeT SmulRegReg = AST::symbolFromStr("mulRegReg");
AST::NodeT SmulValRegReg = AST::symbolFromStr("mulValRegReg");
AST::NodeT SidivImm = AST::symbolFromStr("idivImm");
AST::NodeT Sret = AST::symbolFromStr("ret");
AST::NodeT SclearCarry = AST::symbolFromStr("clearCarry");
AST::NodeT SsetCarry = AST::symbolFromStr("setCarry");
AST::NodeT Sadc = AST::symbolFromStr("adc");
AST::NodeT Ssbb = AST::symbolFromStr("sbb");
};
