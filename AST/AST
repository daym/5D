#ifndef __AST_H
#define __AST_H
/*
5D vector analysis program
Copyright (C) 2011  Danny Milosavljevic
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include <string>

namespace AST {

struct Node {
	//virtual std::string str(void) const;
	virtual ~Node(void);
};
struct Cons : Node {
	Node* head;
	Node* tail; /* Cons or Application */
	// FIXME virtual std::string str(void) const;
};
struct Application : Node {
	Node* operator_;
	Node* operand;
	Node* result;
	bool bResult;
	//virtual std::string str(void) const;
};
struct Abstraction : Node {
	Node* parameter;
	Node* body;
	//virtual std::string str(void) const;
};
struct Str : Node {
	std::string text; // char* text;
	Str(const std::string& value) {
		text = value;
	}
	//virtual std::string str(void) const;
};
struct Operation : Node {
	virtual bool eager_P() const;
	virtual AST::Node* execute(AST::Node* argument) = 0;
	virtual AST::Node* repr(AST::Node* selfName) const;
};
struct Box : Node {
	void* native;
	Box(void* native) {
		this->native = native;
	}
	//virtual std::string str(void) const;
};

Cons* makeCons(Node* head, Node* tail);
Str* makeStr(const char* text);
AST::Cons* follow_tail(AST::Cons* list);
bool str_P(AST::Node* node);
/*typedef Operation BuiltinOperation;*/
struct BuiltinOperation : AST::Operation { /* FIXME make this string out the fallback, too */
	AST::Node* fallback;
	BuiltinOperation(AST::Node* fallback) {
		this->fallback = fallback;
	}
	virtual bool eager_P() const {
		return(true);
	}
};

static inline bool abstraction_P(Node* root) {
	return(dynamic_cast<Abstraction*>(root) != NULL);
}
static inline bool application_P(Node* root) {
	return(dynamic_cast<Application*>(root) != NULL);
}
static inline Node* get_application_operator(Node* app) {
	return(((Application*)app)->operator_);
}
static inline Node* get_application_operand(Node* app) {
	return(((Application*)app)->operand);
}
static inline Node* get_abstraction_body(Node* abstraction) {
	return(((Abstraction*)abstraction)->body);
}
static inline Node* get_abstraction_parameter(Node* abstraction) {
	return(((Abstraction*)abstraction)->parameter);
}
Application* makeApplication(Node* fn, Node* argument);
Abstraction* makeAbstraction(Node* parameter, Node* body);
Application* makeOperation(Node* operator_, Node* operand_1, Node* operand_2);

}; /* namespace AST */
#endif /* __AST_H */
