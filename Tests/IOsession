runIO $ import [(-) (<) nan inf infinite? (=) (√) floor] from (requireModule "Arithmetic") in 
import [(return!)] from (requireModule "IO") in 
import [(if) (else) (not)] from (requireModule "Logic") in
import [write! stdout flush!] from (requireModule "File") in 
write! stdout "hello\n" ;\_
flush! stdout ;\_
return! 2
hello
2
runIO $ import [defer!] from (requireModule "IO") in 
import [write! stdout flush!] from (requireModule "File") in 
defer! (write! stdout "finished" ;\_ flush! stdout))
	write! stdout "not yet "
not yet finished
runIO $ import [use!] from (requireModule "IO") in
import [open! close! readline!] from (requireModule "File") in 
use! (open! "IOsession" "r") close! \f
	readline! f
"runIO $ import [(-) (<) nan inf infinite? (=) (√) floor] from (requireModule \"Arithmetic\") in \n"
