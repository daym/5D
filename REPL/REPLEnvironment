#ifndef __REPL_REPLENVIRONMENT_H
#define __REPL_REPLENVIRONMENT_H
#include <deque>
#include "Evaluators/FFI"
#include "Evaluators/Builtins"
#include "Evaluators/Evaluators"
#include "FFIs/ResultMarshaller"
#include "FFIs/FFIs"

namespace GUI {
};
namespace REPLX {
typedef AST::Node EnvEntry; /* actually Application, but we don't want the client to assume silly things */
using namespace GUI;

/*      [ ->!]            [ ->!]                  [ ->!]
        ^                 ^                       ^
    fTailEnvironment  fTailUserEnvironment   fTailUserEnvironmentFrontier

   entry = ((\x B) a)

((\+ 

	(\*

		B

	(M +))

(\x nil) is used as a tail marker for where the user code should go.

) P)

env-entry = application(abstraction(\+, xxx), P)
xxx = application(abstraction(...), ...) or nil or junk


there is a dummy entry at the beginnning, called fTailEnvironment.
fTailUserEnvironment is the last entry before the user environment, it can be used to smuggle in new builtins.
fTailUserEnvironmentFrontier is the last entry of the user environment. Its tail will be the code to execute.
*/

static bool envEntry_P(AST::Node* node) {
	return(application_P(node) && abstraction_P(get_application_operator(node)));
}
static void envEntrySetTail(AST::Node* node, AST::Node* value) {
	// continue at the abstraction body embedded in the application (all other slots are used up)
	assert(envEntry_P(node));
	AST::Node* op = get_application_operator(node);
	assert(abstraction_P(op));
	((AST::Abstraction*)op)->body = value; // shoot me now
}
static AST::Node* envEntryGetTail(AST::Node* node) {
	// continue at the abstraction body embedded in the application (all other slots are used up)
	assert(envEntry_P(node));
	AST::Node* op = get_application_operator(node);
	assert(abstraction_P(op));
	return(get_abstraction_body(op));
}
static AST::Node* makeEnvEntry(AST::Symbol* name, AST::Node* body, AST::Node* next) {
	return(makeApplication(makeAbstraction(name, next), body));
}
static void getEnvEntry(AST::Node* entry, AST::Node*& name, AST::Node*& body, AST::Node*& next) {
	assert(application_P(entry));
	AST::Node* abstraction = get_application_operator(entry);
	assert(abstraction_P(abstraction));
	name = get_abstraction_parameter(abstraction);
	next = get_abstraction_body(abstraction);
	body = get_application_operand(entry);
}
AST::Node* REPL_get_definition_backwards(struct REPL* self, AST::Symbol* name, size_t backOffset) {
	// envEntrySetTail(self->fTailUserEnvironmentFrontier, NULL);
	AST::Node* x_name;
	AST::Node* x_body;
	AST::Node* x_next;
	std::deque<AST::Node*> matches;
	for(AST::Node* entry = envEntryGetTail(self->fTailEnvironment); getEnvEntry(entry, x_name, x_body, x_next), true; entry = x_next) {
		if(x_name == name) {
			matches.push_front(x_body);
		}
		if(entry == self->fTailUserEnvironmentFrontier)
			break;
	}
	if(backOffset >= 0 && backOffset < matches.size())
		return(matches[backOffset]);
	else
		return(NULL);
}
AST::Node* REPL_get_definition(struct REPL* self, size_t offset) {
	// envEntrySetTail(self->fTailUserEnvironmentFrontier, NULL);
	AST::Node* x_name;
	AST::Node* x_body;
	AST::Node* x_next;
	std::deque<AST::Node*> matches;
	for(AST::Node* entry = envEntryGetTail(self->fTailEnvironment); getEnvEntry(entry, x_name, x_body, x_next), true; entry = x_next, --offset) {
		if(offset == 0)
			return(x_body);
		if(entry == self->fTailUserEnvironmentFrontier)
			break;
	}
	return(NULL);
}
bool info_P(const char* text) {
	return(strncmp(text, "#info", strlen("#info")) == 0);
}
AST::Node* REPL_eval_info(struct REPL* self, const char* text) {
	char* arg = strdup(text + strlen("#info"));
	size_t backOffset;
	while(*arg && isspace(*arg))
		++arg;
	char* x_space = strchr(arg, ' ');
	if(x_space) {
		*x_space = 0;
		++x_space;
		backOffset = (size_t) atoi(x_space);
	} else {
		backOffset = 0;
	}
	if(arg[0] == '(')
		++arg;
	if(strlen(arg) > 0 && arg[strlen(arg) - 1] == ')')
		arg[strlen(arg) - 1] = 0;
	AST::Node* body = REPL_get_definition_backwards(self, AST::intern(arg), backOffset);
	return(body);
}

//fTailEnvironment
//fTailUserEnvironment /* =fTailBuiltinEnvironmentFrontier */
//fTailUserEnvironmentFrontier
void REPL_add_to_environment_simple(struct REPL* self, AST::Symbol* name, AST::Node* value);
static void REPL_add_static_builtin_binding(struct REPL* self, AST::Symbol* name, AST::Node* value) {
	REPL_add_to_environment_simple(self, name, value);
}
using namespace Evaluators;
#if 0
static void REPL_add_builtin_binding(struct REPL* self, AST::Symbol* name, AST::Node* value) { /* allows chaining */
	REPL_add_to_environment_simple(self, name, buildSuperAwareOperation(value));
}
#endif
static Evaluators::Quoter quoter(NULL);

#define REPL_add_builtin_method(s, n, v) REPL_add_to_environment_simple(s, n, buildSuperAwareOperation<v>(n))
static void REPL_init_builtins(struct REPL* self) {
	if(self->fTailUserEnvironment && envEntryGetTail(self->fTailUserEnvironment)) {
		fprintf(stderr, "warning: There is a user environment, so not clobbering it by builtins.\n");
		return;
	}
	if(!self->fTailEnvironment) { /* first init */
		self->fTailEnvironment = makeApplication(makeAbstraction(AST::intern("nil"), NULL/*mutable*/), NULL);
		self->fTailUserEnvironment = self->fTailEnvironment;
		self->fTailUserEnvironmentFrontier = self->fTailUserEnvironment;
	}
	REPL_add_static_builtin_binding(self, AST::intern("'"), &quoter); /* keep at the beginning */
	REPL_add_static_builtin_binding(self, AST::intern("define"), &quoter); // dummy
	REPL_add_static_builtin_binding(self, AST::intern("defrec"), &quoter); // dummy
	REPL_add_static_builtin_binding(self, AST::intern("let"), &quoter); // dummy
	REPL_add_static_builtin_binding(self, AST::intern("reduce"), &Evaluators::reducer);
	REPL_add_builtin_method(self, AST::intern("fromLibrary"), FFIs::LibraryLoader);
	REPL_add_static_builtin_binding(self, AST::intern("nil"), NULL);
	REPL_add_builtin_method(self, AST::intern(":"), Evaluators::Conser);
	REPL_add_builtin_method(self, AST::intern("cons?"), Evaluators::ConsP);
	REPL_add_builtin_method(self, AST::intern("nil?"), Evaluators::NilP);
	REPL_add_builtin_method(self, AST::intern("head"), Evaluators::HeadGetter);
	REPL_add_builtin_method(self, AST::intern("tail"), Evaluators::TailGetter);
	REPL_add_builtin_method(self, AST::intern("int?"), Numbers::IntP);
	REPL_add_static_builtin_binding(self, AST::intern("int0"), Numbers::internNative((Numbers::NativeInt) 0));
	REPL_add_builtin_method(self, AST::intern("intSucc"), Numbers::IntSucc);
	REPL_add_builtin_method(self, AST::intern("integer?"), Numbers::IntegerP);
	REPL_add_builtin_method(self, AST::intern("integerSucc"), Numbers::IntegerSucc);
	REPL_add_builtin_method(self, AST::intern("+"), Evaluators::Adder);
	REPL_add_builtin_method(self, AST::intern("-"), Evaluators::Subtractor);
	REPL_add_builtin_method(self, AST::intern("*"), Evaluators::Multiplicator);
	REPL_add_builtin_method(self, AST::intern("/"), Evaluators::Divider);
	REPL_add_builtin_method(self, AST::intern("divmod"), Evaluators::QModulator);
	REPL_add_builtin_method(self, AST::intern("<="), Evaluators::LEComparer);
	REPL_add_builtin_method(self, AST::intern("float?"), Numbers::FloatP);
	REPL_add_builtin_method(self, AST::intern("str?"), Evaluators::StrP);
	REPL_add_builtin_method(self, AST::intern("symbol?"), Evaluators::SymbolP);
	REPL_add_builtin_method(self, AST::intern("addrsLE?"), Evaluators::AddrLEComparer);
	REPL_add_builtin_method(self, AST::intern("symbolsEqual?"), Evaluators::SymbolEqualityChecker);
	REPL_add_builtin_method(self, AST::intern("keyword?"), Evaluators::KeywordP);
	REPL_add_builtin_method(self, AST::intern("translateFFI"), FFIs::ResultMarshaller);
	REPL_add_builtin_method(self, AST::intern("intern"), Evaluators::Interner);
	REPL_add_builtin_method(self, AST::intern("keywordFromStr"), Evaluators::KeywordFromStringGetter);
	REPL_add_builtin_method(self, AST::intern("keywordStr"), Evaluators::KeywordStr);
	REPL_add_builtin_method(self, AST::intern("listFromStr"), Evaluators::ListFromStringGetter);
	REPL_add_builtin_method(self, AST::intern("internalRunWorld2"), Evaluators::WorldRunner);
	REPL_add_static_builtin_binding(self, AST::intern("#t"), Evaluators::churchTrue);
	REPL_add_static_builtin_binding(self, AST::intern("#f"), Evaluators::churchFalse);
	self->fTailUserEnvironment = self->fTailUserEnvironmentFrontier;
	/*self->fTailUserEnvironmentFrontier = self->fTailUserEnvironmentFrontier;*/
}
//int REPL_add_to_environment_simple_GUI(struct REPL* self, AST::Symbol* name, AST::Node* value);
/* returns: whether we just inserted something after endIter, ostensibly moving stuff */
bool REPL_add_to_environment_simple_end(struct REPL* self, AST::Symbol* name, AST::Node* value, AST::Node* endIter) {
	using namespace AST;
	using namespace Evaluators;
	int index = REPL_add_to_environment_simple_GUI(self, name, value);
	assert(index >= 0);
	EnvEntry* prevNode = self->fTailEnvironment;
	EnvEntry* shiftedNode = NULL;
	EnvEntry* newNode;
	// there is a sentinel at the beginning.
	for(; index > 0 && prevNode != endIter; --index)
		prevNode = envEntryGetTail(prevNode);
	if(!prevNode) {
		abort();
	}
	shiftedNode = envEntryGetTail(prevNode);
	newNode = makeEnvEntry(name, value, /*next*/shiftedNode);
	envEntrySetTail(prevNode, newNode);
	return(prevNode == endIter);
}
void REPL_add_to_environment_simple(struct REPL* self, AST::Symbol* name, AST::Node* value) {
	if(REPL_add_to_environment_simple_end(self, name, value, self->fTailUserEnvironmentFrontier))
		self->fTailUserEnvironmentFrontier = envEntryGetTail(self->fTailUserEnvironmentFrontier);
}
static AST::Node* REPL_close_environment(struct REPL* self, AST::Node* node) {
	if(self->fTailUserEnvironmentFrontier) {
		envEntrySetTail(self->fTailUserEnvironmentFrontier, node);
		increaseGeneration();
		return(envEntryGetTail(self->fTailEnvironment));
	} else
		return(node);
}
static void REPL_unfilter_environment(struct REPL* self, AST::Node* environment) {
	/* filters out Builtins */
	using namespace AST;
	AST::Node* name;
	AST::Node* body;
	AST::Node* next;
	if(environment == AST::intern("nil")) {
		self->fTailUserEnvironmentFrontier = self->fTailUserEnvironment;
		return;
	}
	for(; environment; environment = next) {
		getEnvEntry(environment, name, body, next);
		REPL_add_to_environment_simple_GUI(self, dynamic_cast<AST::Symbol*>(name), body);
		if(next == NULL || next == AST::intern("nil")) { // used as a tail marker
			self->fTailUserEnvironmentFrontier = environment;
			envEntrySetTail(self->fTailUserEnvironmentFrontier, NULL);
			break;
		}
	}
}
void REPL_set_environment(struct REPL* self, EnvEntry* environment) {
	envEntrySetTail(self->fTailUserEnvironment, NULL);
	envEntrySetTail(self->fTailUserEnvironmentFrontier, NULL); // help GC
	self->fTailUserEnvironmentFrontier = NULL;
	envEntrySetTail(self->fTailUserEnvironment, environment);
	REPL_unfilter_environment(self, environment);
}
AST::Node* REPL_get_user_environment(struct REPL* self) {
	if(self->fTailUserEnvironmentFrontier)
		envEntrySetTail(self->fTailUserEnvironmentFrontier, NULL); /* clear the last command from the environment, nobody cares. */
	return(self->fTailUserEnvironment ? envEntryGetTail(self->fTailUserEnvironment) : NULL);
}
Scanners::OperatorPrecedenceList* REPL_ensure_operator_precedence_list(struct REPL* self) {
	Scanners::OperatorPrecedenceList* result;
	result = new Scanners::OperatorPrecedenceList;
	// FIXME add the operators, reading the environment
	return(result);
}
template<typename T>
AST::Node* REPL_parse(struct REPL* self, const char* command, T destination/*for errors*/) {
	/* is not allowed to both print stuff AND return non-null, except when it updates the destination iter */
	Scanners::MathParser parser;
	FILE* input_file = fmemopen((void*) command, strlen(command), "r");
	if(input_file) {
		try {
			parser.push(input_file, 0, false);
			parser.consume();
			AST::Node* result = parser.parse(REPL_ensure_operator_precedence_list(self));
			parser.ensure_end();
			fclose(input_file);
			return(result);
		} catch(...) {
			fclose(input_file);
			throw;
		}
		REPL_set_file_modified(self, true);
	}
	REPL_queue_scroll_down(self);
	return(NULL);
}
template<typename T>
bool REPL_execute(struct REPL* self, AST::Node* input, T destination) {
	bool B_ok = false;
	try {
		AST::Node* result = input;
		Evaluators::resetWorld();
		if(!Evaluators::define_P(input)) {
			result = REPL_close_environment(self, result);
			result = Evaluators::provide_dynamic_builtins(result);
			result = Evaluators::annotate(result);
			result = Evaluators::reduce(result);
		}
		/*std::string v = result ? result->str() : "OK";
		v = " => " + v + "\n";
		REPL_insert_into_output_buffer(self, destination, v.c_str());*/
		REPL_enqueue_LATEX(self, result, destination);
		REPL_add_to_environment(self, result);
		B_ok = true;
	} catch(Evaluators::EvaluationException e) {
		std::string v = e.what() ? e.what() : "error";
		v = " => " + v + "\n";
		REPL_insert_into_output_buffer(self, destination, v.c_str());
	}
	REPL_set_file_modified(self, true);
	return(B_ok);
}

}; /* end namespace */
#endif /* __REPL_REPLENVIRONMENT_H */
