let raiseMissingSymbolError := (\key ["missing symbol" key]) in
let (|) := (\a \b b a) in 
let ($) := (\a \b a b) in 
let compose := (\f \g \x f (g x)) in 
let flip := (\f \a \b f b a) in 
let id := (\f f) in 
let Yrec := (\f (\x f (x x)) (\x f (x x))) in 
let Zrec := \f (\x f (\v x x v)) (\x f (\v (x x v))) in
let (rec) := Yrec in 
let (rem) := \a \b b in 
let (export) := id in 
let makeModuleBox := Builtins.makeModuleBox in 
let dispatchModule2 := Builtins.dispatchModule in 
let dispatch := (\table \fallbackAction \key dispatchModule2 (makeModuleBox table) fallbackAction key) in 
let dispatch1 := (\table dispatch table raiseMissingSymbolError) in 
dispatch1 (#exports[(|) ($) compose flip id rec rem export dispatch raiseMissingSymbolError dispatch1])
