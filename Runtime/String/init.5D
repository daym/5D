let List := requireModule "List" in 
let Error := requireModule "Error" in
let Composition := requireModule "Composition" in
let Logic := requireModule "Logic" in 
import [if else elif] from Logic in 
import [($)] from Composition in 
import [tail nil? foldr map drop (++)] from List in 
import [listFromStr str? strFromKeyword strFromList substr] from Builtins in 
let strcat := \a \b strFromList ((listFromStr a) ++ (listFromStr b)) in 
let strjoinp := (\sepl \strings 
	let prefixSepl := (\x sepl ++ listFromStr x) in 
	let parts := (map prefixSepl strings) in 
	foldr (++) "" parts
) in 
let strjoin := (\sep \strings 
	let sepl := (listFromStr sep) in 
	if (nil? strings)
		""
	$else
		strFromList (drop (List.length sepl) (strjoinp sepl strings))
) in 
(requireModule "Composition").dispatch1 (#exports[listFromStr str? strFromKeyword strFromList substr strcat strjoin])
