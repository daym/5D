= Macros = 

list comprehensions in []

= Builtin Types =

numbers: 1. Int (done), 2. Integer (done), 3. Q, 4. Float (done), 5. arbitrary-precision fixed point
equality (numbers, strings(?) and booleans (?) and symbols (?) and lists (?)) and non-equality.
Builtin ops: power
When printing builtin ops, revert to the symbol?
Complex number literals: #C(3.2 2)
Array literals: #(a b c)
subseq "Hello, World" 2 9
string-upcase

= Packages =

packages (namespaces)
import xyz hiding (a, b, c)
import xyz (a,b,c)
import qualified ...
import foo

= Data Structures =

sorting: quicksort (?), mergesort.
uniq
searching: binary search, bisect.
trees: binary trees, tries, red black trees.

= Error Handling =

... `catch` \e error e

= Pie-in-the-Sky =

bool builtins: move them into the runtime and somehow have the parser find them anyway (?)
move provide_dynamic_builtins into the reduce phase (?)
provide hooks for big integers (?)
provide callback used by the scanner for getting currently registered operators and their precedence
(+3) = \x (x+3)
Only implement marshallers and demarshallers in C, let them return stand-in buffers
#| commented out |#
make it possible to define custom operators in the REPL
function to join buffers (memoryview)
merge Str and Integer into one (for integer, the str() is reversed, though).
move str() to the actual language
#'print or (function print) to get the value in the function slot.

= GUI =

GUI: allow deletion environment nodes (includes usage check in the rest of the environment).
GUI: allow moving of environment nodes.
GUI: allow compacting of environment nodes.
GUI: fix LATEX formatter again: Cons spaces are not printed for some reason.
TUI: if trying to pass a path to a file that does not exist, it doesn't create it on exit. Should it?

= Beauty =

Math: indentation for 'if, 'rec, 'let, ';, ':  - don't forget nested ifs.
pattern-match a:b:c:nil back to the [] macro (this is already done for the Cons builtin but not if the Cons has not yet been built).
nested lists: line-break only for the second list if the first list is short enough.
pattern-match env entry back to the let macro.
Allow querying a list of exported symbols of a shared library.
Auto-load libc (or at least determine the file name?)

= Performance =

performance optimisation: use the lowest bit to signify pointers (1=it is one). This will have problems with native pointers maybe, so also override the native allocator.
degrade from Integer to Int when possible.
$! strict applicator
make AST::Symbol const everywhere (best to introduce a Symbol_t or something)
maybe delay and force
optimize module system?

= Parser =

1+2â‹… => error or partial application
--x
"# " as line comment starter (=> rem)
unary posfix operators like "!"?

= Correctness =

Have the predicates check for non-SymbolReference non-quoted symbols or non-executed applications and if so, return "we can't do it"?
Floats only work to 3E38, it seems. What about higher numbers? (there's no such limit for 3E-999999)
It would be possible to make numbers like 3E3 mean 3000 and not 3000.0 - do we want that?
Reintroduce FALLBACK, i.e. tail [] shouldn't reduce.
If there are open parens, ignore indentation (note that this is the LEXER and so it technically can't distinguish between quoted or macro braces and actual braces).

= Debugging Macros =

trace
untrace
step
disassemble

= TODO =

move all the builtins into an .so file and load them via FFI.
support reloading of modules (in that case, need to use monads)
