#ifndef __5D_BUILTINS_H
#define __5D_BUILTINS_H
#include <sstream>
#include "AST/AST"
#include "AST/Symbols"

#include "Numbers/Small"
#include "Numbers/Integer"
#include "Numbers/Real"
#include "AST/Keyword"
#include "AST/Symbol"
#include "Evaluators/Evaluators"
#include "Evaluators/Operation"

namespace Evaluators {

AST::Node* operator/(const Numbers::Integer& a, const Numbers::Integer& b);
AST::Node* internNative(bool value);
static inline AST::Node* buildSuperAwareOperation(AST::Node* actualOperation, AST::Node* fallback) {
	return(AST::makeApplication(Symbols::Sinline, AST::makeApplication(actualOperation, fallback)));
}

void resetWorld(void);

/* TODO factorize str here so it returns "(2.3â‹…10**4)" or whatever: */
AST::Node* provide_dynamic_builtins(AST::Node* body);
extern AST::Node* churchFalse;
extern AST::Node* churchTrue;

DECLARE_BINARY_OPERATION(Conser)
DECLARE_SIMPLE_OPERATION(ConsP)
DECLARE_SIMPLE_OPERATION(NilP)
DECLARE_SIMPLE_OPERATION(HeadGetter)
DECLARE_SIMPLE_OPERATION(TailGetter)
DECLARE_BINARY_OPERATION(Adder)
DECLARE_BINARY_OPERATION(Subtractor)
DECLARE_BINARY_OPERATION(Multiplicator)
DECLARE_BINARY_OPERATION(Divider)
DECLARE_BINARY_OPERATION(QModulator)
DECLARE_BINARY_OPERATION(LEComparer)
DECLARE_BINARY_OPERATION(StrP)
DECLARE_BINARY_OPERATION(SymbolP)
DECLARE_BINARY_OPERATION(AddrLEComparer)
DECLARE_BINARY_OPERATION(SymbolEqualityChecker)
DECLARE_BINARY_OPERATION(KeywordP)
DECLARE_BINARY_OPERATION(SymbolFromStrGetter)
DECLARE_BINARY_OPERATION(KeywordFromStrGetter)
DECLARE_BINARY_OPERATION(KeywordStr)
DECLARE_BINARY_OPERATION(ListFromStrGetter)
DECLARE_BINARY_OPERATION(StrFromListGetter)
DECLARE_SIMPLE_OPERATION(WorldRunner)

};

#endif /* ndef __5D_BUILTINS_H */
