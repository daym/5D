#ifndef __5D_BUILTINS_H
#define __5D_BUILTINS_H
#include <sstream>
#include "Numbers/Small"
#include "Numbers/Integer"
#include "Numbers/Real"
#include "AST/Keyword"
#include "AST/Symbol"

namespace Evaluators {
AST::Node* internNative(bool value);

/* there's a special case in the annotator, so this cannot happen:
AST::SymbolReference* ref = dynamic_cast<AST::SymbolReference*>(argument);
return(ref ? ref->symbol : argument);
*/
DEFINE_UNEAGER_OPERATION(Quoter, "'", argument)
#define DECLARE_CURRIED_OPERATION(P, N) \
struct P : AST::BuiltinOperation { \
	AST::Operation* fParent; \
	AST::Node* fArgument; \
	P(AST::Operation* parent, AST::Node* fallback, AST::Node* argument) : AST::BuiltinOperation(fallback), fParent(parent), fArgument(argument) {} \
	virtual AST::Node* execute(AST::Node* argument); \
	virtual std::string str(void) const { \
		/*return(std::string("(N" ") + (fallback ? fallback->str() : std::string("()")) + ")"); f... off */ \
		return(std::string("(") + N + std::string(") ") + (fArgument ? fArgument->str() : std::string("()"))); \
	} \
};

#define DECLARE_BINARY_OPERATION(P, N) \
	DECLARE_SIMPLE_OPERATION(P, N) \
	DECLARE_CURRIED_OPERATION(Curried ## P, N)

#define FALLBACK (AST::Node*) makeOperation(AST::intern(" "), fallback, argument)

DEFINE_SIMPLE_OPERATION(ProcedureP, "procedure?", (dynamic_cast<Operation*>(argument) != NULL))
DECLARE_BINARY_OPERATION(Conser, ":")
DEFINE_SIMPLE_OPERATION(HeadGetter, "head", (dynamic_cast<AST::Cons*>(argument) ? ((AST::Cons*) argument)->head : FALLBACK))
DEFINE_SIMPLE_OPERATION(TailGetter, "tail", (dynamic_cast<AST::Cons*>(argument) ? ((AST::Cons*) argument)->head : FALLBACK))
DEFINE_SIMPLE_OPERATION(NilP, "nil?", (argument == NULL))
DEFINE_SIMPLE_OPERATION(ConsP, "cons?", (dynamic_cast<AST::Cons*>(argument) != NULL))
DEFINE_SIMPLE_OPERATION(StrP, "str?", str_P(argument))
DEFINE_SIMPLE_OPERATION(SymbolP, "symbol?", symbol_P(argument))
DEFINE_SIMPLE_OPERATION(KeywordP, "keyword?", keyword_P(argument))
/*DECLARE_SIMPLE_OPERATION(Int0, "int0")*/
DECLARE_BINARY_OPERATION(Adder, "+")
DECLARE_BINARY_OPERATION(Subtractor, "-")
DECLARE_BINARY_OPERATION(Multiplicator, "*")
DECLARE_BINARY_OPERATION(LEComparer, "<=")
DEFINE_SIMPLE_OPERATION(Interner, "intern", (dynamic_cast<AST::Str*>(argument) ? internNative(((AST::Str*)argument)->text.c_str()) : FALLBACK));
DECLARE_SIMPLE_OPERATION(KeywordFromStringGetter, "keywordFromStr")
DECLARE_SIMPLE_OPERATION(KeywordStr, "keywordStr")

/* TODO factorize str here so it returns "(2.3â‹…10**4)" or whatever: */
AST::Node* provide_dynamic_builtins(AST::Node* body);
extern AST::Node* churchFalse;
extern AST::Node* churchTrue;

};

#endif /* ndef __5D_BUILTINS_H */
