#ifndef __5D_BUILTINS_H
#define __5D_BUILTINS_H
#include <sstream>
#include <list>
#include "AST/AST"
#include "AST/Symbols"
#include "AST/Keyword"

#include "Numbers/Small"
#include "Numbers/Integer"
#include "Numbers/Real"
#include "AST/Keyword"
#include "AST/Symbol"
#include "Evaluators/Evaluators"
#include "Evaluators/Operation"

namespace Evaluators {

AST::Node* operator/(const Numbers::Integer& a, const Numbers::Integer& b);
AST::Node* operator/(const Numbers::Int& a, const Numbers::Int& b);
AST::Node* internNative(bool value);
AST::Node* internNative(const char* value);

void resetWorld(void);

/* TODO factorize str here so it returns "(2.3â‹…10**4)" or whatever: */
AST::Node* provide_dynamic_builtins(AST::Node* body);
extern AST::Node* churchFalse;
extern AST::Node* churchTrue;

DECLARE_BINARY_OPERATION(Conser)
DECLARE_SIMPLE_OPERATION(ConsP)
DECLARE_SIMPLE_OPERATION(NilP)
DECLARE_SIMPLE_OPERATION(HeadGetter)
DECLARE_SIMPLE_OPERATION(TailGetter)
DECLARE_BINARY_OPERATION(Adder)
DECLARE_BINARY_OPERATION(Subtractor)
DECLARE_BINARY_OPERATION(Multiplicator)
DECLARE_BINARY_OPERATION(Divider)
DECLARE_BINARY_OPERATION(QModulator2)
DECLARE_BINARY_OPERATION(LEComparer)
DECLARE_BINARY_OPERATION(StrP)
DECLARE_BINARY_OPERATION(SymbolP)
DECLARE_BINARY_OPERATION(AddrLEComparer)
DECLARE_BINARY_OPERATION(SymbolEqualityChecker)
DECLARE_BINARY_OPERATION(KeywordP)
DECLARE_BINARY_OPERATION(SymbolFromStrGetter)
DECLARE_BINARY_OPERATION(KeywordFromStrGetter)
DECLARE_BINARY_OPERATION(KeywordStr)
DECLARE_SIMPLE_OPERATION(IORunner)

/* first arg is a Box with a list of [key value] */
DECLARE_SIMPLE_OPERATION(ModuleDispatcher)

DECLARE_SIMPLE_OPERATION(ModuleBoxMaker)

DECLARE_SIMPLE_OPERATION(ApplicationMaker)
DECLARE_SIMPLE_OPERATION(ApplicationP)
DECLARE_SIMPLE_OPERATION(ApplicationOperatorGetter)
DECLARE_SIMPLE_OPERATION(ApplicationOperandGetter)

DECLARE_SIMPLE_OPERATION(AbstractionMaker)
DECLARE_SIMPLE_OPERATION(AbstractionP)
DECLARE_SIMPLE_OPERATION(AbstractionParameterGetter)
DECLARE_SIMPLE_OPERATION(AbstractionBodyGetter)

DECLARE_SIMPLE_OPERATION(RFileMathParser)
DECLARE_SIMPLE_OPERATION(RStrMathParser)

typedef std::list<std::pair<AST::Keyword*, AST::Node*>, gc_allocator<std::pair<AST::Keyword*, AST::Node*> > > CXXArguments;
/* WARNING WARNING this auto-reduces all the arguments WARNING WARNING */
CXXArguments CXXfromArguments(AST::Node* options, AST::Node* argument); /* non-keyword arguments will be at the FRONT */

CXXArguments CXXfromArgumentsU(AST::Node* options, AST::Node* argument, int backwardsIndexOfArgumentNotToReduce); /* non-keyword arguments will be at the FRONT */
AST::Node* CXXgetKeywordArgumentValue(const CXXArguments& list, AST::Keyword* key);
AST::Node* divideA(AST::Node* a, AST::Node* b, AST::Node* fallback);
AST::Node* divremA(AST::Node* a, AST::Node* b, AST::Node* fallback);

};

#endif /* ndef __5D_BUILTINS_H */
