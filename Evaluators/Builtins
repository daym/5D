#ifndef __4D_BUILTINS_H
#define __4D_BUILTINS_H
#include <sstream>

namespace Evaluators {
struct Quoter;

AST::Node* internNative(int value);
AST::Node* internNative(bool value);
struct Quoter : Operation {
	virtual bool eager_P(void) const;
	virtual AST::Node* execute(AST::Node* argument);
	virtual std::string str(void) const {
		return("<Quoter>");
	}
};
#define DECLARE_SIMPLE_OPERATION(P) \
struct P : Operation { \
	virtual AST::Node* execute(AST::Node* argument); \
	virtual std::string str(void) const { \
		return("<" ""#P ">"); \
	} \
};
DECLARE_SIMPLE_OPERATION(ProcedureP)
DECLARE_SIMPLE_OPERATION(Conser)
DECLARE_SIMPLE_OPERATION(HeadGetter)
DECLARE_SIMPLE_OPERATION(TailGetter)
DECLARE_SIMPLE_OPERATION(ConsP)
struct Conser2 : Operation {
private:
	AST::Node* head;
public:
	Conser2(AST::Node* head);
	virtual AST::Node* execute(AST::Node* argument);
};
/* use internNative to create. */
struct SmallInteger : AST::Node {
	int value;
	SmallInteger(int value) {
		this->value = value;
	}
	virtual std::string str(void) const {
		std::stringstream sst;
		sst << this->value;
		return(sst.str());
	}
};
AST::Node* provide_dynamic_builtins(AST::Node* body);

};

#endif /* ndef __4D_BUILTINS_H */
