#ifndef __5D_BUILTINS_H
#define __5D_BUILTINS_H
#include <sstream>
#include "Numbers/Small"
#include "Numbers/Integer"
#include "Numbers/Real"

namespace Evaluators {
struct Quoter;
AST::Node* internNative(bool value);
struct Quoter : AST::Operation {
	virtual bool eager_P(void) const;
	virtual AST::Node* execute(AST::Node* argument);
	virtual std::string str(void) const {
		return("'");
	}
};
#define DECLARE_CURRIED_OPERATION(P, N) \
struct P : AST::BuiltinOperation { \
	AST::Node* fArgument; \
	P(AST::Node* fallback, AST::Node* argument) : AST::BuiltinOperation(fallback), fArgument(argument) {} \
	virtual AST::Node* execute(AST::Node* argument); \
	virtual std::string str(void) const { \
		/*return(std::string("(N" ") + (fallback ? fallback->str() : std::string("()")) + ")"); f... off */ \
		return((fArgument ? fArgument->str() : std::string("()")) + N); \
	} \
};

#define DECLARE_BINARY_OPERATION(P, N) \
	DECLARE_SIMPLE_OPERATION(P, N) \
	DECLARE_CURRIED_OPERATION(Curried ## P, "a" N)

DECLARE_SIMPLE_OPERATION(ProcedureP, "procedure?")
DECLARE_SIMPLE_OPERATION(Conser, ":")
DECLARE_SIMPLE_OPERATION(HeadGetter, "head")
DECLARE_SIMPLE_OPERATION(TailGetter, "tail")
DECLARE_SIMPLE_OPERATION(NilP, "nil?")
DECLARE_SIMPLE_OPERATION(ConsP, "cons?")
DECLARE_SIMPLE_OPERATION(StrP, "str?")
DECLARE_SIMPLE_OPERATION(SymbolP, "symbol?")
DECLARE_SIMPLE_OPERATION(KeywordP, "keyword?")
/*DECLARE_SIMPLE_OPERATION(Int0, "int0")*/
DECLARE_BINARY_OPERATION(Adder, "+")
DECLARE_BINARY_OPERATION(Subtractor, "-")
DECLARE_BINARY_OPERATION(Multiplicator, "*")
DECLARE_BINARY_OPERATION(LEComparer, "<=")
DECLARE_SIMPLE_OPERATION(Interner, "intern")
DECLARE_SIMPLE_OPERATION(KeywordFromStringGetter, "keywordFromStr")
DECLARE_SIMPLE_OPERATION(KeywordStr, "keywordStr")

struct Conser2 : AST::Operation {
private:
	AST::Node* head;
public:
	Conser2(AST::Node* head);
	virtual AST::Node* execute(AST::Node* argument);
	virtual std::string str(void) const;
};
/* TODO factorize str here so it returns "(2.3â‹…10**4)" or whatever: */
AST::Node* provide_dynamic_builtins(AST::Node* body);
extern AST::Node* churchFalse;
extern AST::Node* churchTrue;

};

#endif /* ndef __5D_BUILTINS_H */
