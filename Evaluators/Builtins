#ifndef __4D_BUILTINS_H
#define __4D_BUILTINS_H
#include <sstream>

namespace Evaluators {
struct Quoter;
typedef float NativeReal; /* TODO use double for 64 bits? */
AST::Node* internNative(int value);
AST::Node* internNative(bool value);
AST::Node* internNative(NativeReal value);
struct Quoter : BuiltinOperation {
	virtual bool eager_P(void) const;
	virtual AST::Node* execute(AST::Node* argument);
	virtual std::string str(void) const {
		return("quote");
	}
};
#define DECLARE_SIMPLE_OPERATION(P, N) \
struct P : BuiltinOperation { \
	virtual AST::Node* execute(AST::Node* argument); \
	virtual std::string str(void) const { \
		return(N); \
	} \
};
DECLARE_SIMPLE_OPERATION(ProcedureP, "procedure?")
DECLARE_SIMPLE_OPERATION(Conser, "cons")
DECLARE_SIMPLE_OPERATION(HeadGetter, "head")
DECLARE_SIMPLE_OPERATION(TailGetter, "tail")
DECLARE_SIMPLE_OPERATION(ConsP, "cons?")
DECLARE_SIMPLE_OPERATION(SmallIntegerP, "smallInteger?")
DECLARE_SIMPLE_OPERATION(SmallRealP, "smallReal?")
DECLARE_SIMPLE_OPERATION(StringP, "string?")
struct Conser2 : BuiltinOperation {
private:
	AST::Node* head;
public:
	Conser2(AST::Node* head);
	virtual AST::Node* execute(AST::Node* argument);
};
#define DECLARE_SMALL_VALUE(P, T) \
/* use internNative to create. */ \
struct P : AST::Node { \
	T value; \
	P(T value) { \
		this->value = value; \
	} \
	virtual std::string str(void) const { \
		std::stringstream sst; \
		sst << this->value; \
		return(sst.str()); \
	} \
};
DECLARE_SMALL_VALUE(SmallInteger, int)
/* TODO factorize str here so it returns "(2.3â‹…10**4)" or whatever: */
DECLARE_SMALL_VALUE(SmallReal, NativeReal)
AST::Node* provide_dynamic_builtins(AST::Node* body);

};

#endif /* ndef __4D_BUILTINS_H */
