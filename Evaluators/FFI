#ifndef __5D_Evaluators_FFI_H
#define __5D_Evaluators_FFI_H
/*
5D vector analysis program
Copyright (C) 2011  Danny Milosavljevic
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include <stdlib.h>
#include <map>
#include "Evaluators/Evaluators"
#include "AST/AST"

namespace Evaluators {

int get_native_integer(AST::Node* root);
void* get_native_pointer(AST::Node* root);
bool get_native_boolean(AST::Node* root);
char* get_native_string(AST::Node* root);

struct FFI : AST::Operation {
	bool B_pure;
	FFI(void) {
		B_pure = true; /* FIXME false;*/
	}
	virtual AST::Node* execute(AST::Node* argument);
	virtual AST::Node* executeLowlevel(AST::Node* argument) = 0;
};
struct FFIClosure : AST::Operation {
	AST::Node* argument;
	FFI* routine;
	AST::Node* result;
	bool B_has_result;
	FFIClosure(AST::Node* argument, FFI* routine) {
		this->argument = argument;
		this->routine = routine;
		this->result = NULL;
		this->B_has_result = 0;
	}
	virtual AST::Node* execute(AST::Node* state);
	virtual std::string str(void) const;
};
struct SymArgCacheFFI : BuiltinOperation {
private:
	std::map<AST::Symbol*, AST::Node*> knownResults;
public:
	SymArgCacheFFI(AST::Node* fallback);
	virtual AST::Node* execute(AST::Node* argument);
	/* FIXME str for fallback */
};

};

#endif /* ndef __5D_Evaluators_FFI_H */
