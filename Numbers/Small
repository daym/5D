#ifndef __NUMBERS_SMALL_H
#define __NUMBERS_SMALL_H

#define FALLBACK (AST::Node*) reduce(makeOperation(Symbols::Sspace, fallback, argument))

#define DECLARE_SMALL_VALUE(P, T) \
/* use internNative to create. */ \
struct P : AST::Node { \
	T value; \
	P(T value) { \
		this->value = value; \
	} \
};

#define DECLARE_SIMPLE_OPERATION_BODY(P, N, B) \
struct P : AST::BuiltinOperation { \
	P(AST::Node* fallback) : AST::BuiltinOperation(fallback) {} \
	virtual AST::Node* execute(AST::Node* argument) B \
};

#define DECLARE_SIMPLE_OPERATION(P, N) \
	DECLARE_SIMPLE_OPERATION_BODY(P, N, ;)

#define DEFINE_SIMPLE_OPERATION(P, N, B) \
	DECLARE_SIMPLE_OPERATION_BODY(P, N, { if(application_P(argument) || abstraction_P(argument) || symbol_P(argument)) return(FALLBACK); else return(internNative(B)); }) \
	REGISTER_STR(P, return(N);)

#define DECLARE_UNEAGER_OPERATION_BODY(P, N, B) \
struct P : AST::BuiltinOperation { \
	virtual bool eager_P(void) const { \
		return(false); \
	} \
	P(AST::Node* fallback) : AST::BuiltinOperation(fallback) {} \
	virtual AST::Node* execute(AST::Node* argument) B \
};

#define DECLARE_UNEAGER_OPERATION(P, N) \
	DECLARE_UNEAGER_OPERATION_BODY(P, N, ;)

#define DEFINE_UNEAGER_OPERATION(P, N, B) \
	DECLARE_UNEAGER_OPERATION_BODY(P, N, { return(B); }) \
	REGISTER_STR(P, return(N);)

#endif /* ndef __NUMBERS_SMALL_H */
