#ifndef __NUMBERS_REAL_H
#define __NUMBERS_REAL_H
#include <sstream>
#include "Numbers/Small"
#include "AST/AST"
#include "Evaluators/Operation"

namespace Numbers {

#if defined(__VFP_FP__) || defined(__ARM_EABI__)
/* ARM doesn't have extended-precision floating point */
typedef double NativeFloat;
#else
typedef long double NativeFloat;
#endif

AST::Node* internNative(NativeFloat value);

DECLARE_SMALL_VALUE(Float, NativeFloat)   
DECLARE_SIMPLE_OPERATION(FloatP)

struct Real : AST::Node {
	NativeFloat* parts;
};

AST::Node* operator+(const Float& a, const Float& b);
AST::Node* operator-(const Float& a, const Float& b);
AST::Node* operator*(const Float& a, const Float& b);
AST::Node* operator/(const Float& a, const Float& b);
Real* operator+(const Real& a, const Real& b);
Real* operator-(const Real& a, const Real& b);
Real* operator*(const Real& a, const Real& b);
Real* operator/(const Real& a, const Real& b);
AST::Node* operator<=(const Float& a, const Float& b);
AST::Node* operator<=(const Real& a, const Real& b);

NativeFloat toNativeFloat(AST::Node* node, bool& B_ok);

};

#endif /* ndef __NUMBERS_REAL_H */
