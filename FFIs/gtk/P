;; -*- scheme -*-

(include "atk-types.defs")

;; From atk-enum-types.h

(define-function hyperlink_state_flags_get_type
  (c-name "atk_hyperlink_state_flags_get_type")
  (return-type "GType")
)

(define-function role_get_type
  (c-name "atk_role_get_type")
  (return-type "GType")
)

(define-function layer_get_type
  (c-name "atk_layer_get_type")
  (return-type "GType")
)

(define-function relation_type_get_type
  (c-name "atk_relation_type_get_type")
  (return-type "GType")
)

(define-function state_type_get_type
  (c-name "atk_state_type_get_type")
  (return-type "GType")
)

(define-function text_attribute_get_type
  (c-name "atk_text_attribute_get_type")
  (return-type "GType")
)

(define-function text_boundary_get_type
  (c-name "atk_text_boundary_get_type")
  (return-type "GType")
)

(define-function text_clip_type_get_type
  (c-name "atk_text_clip_type_get_type")
  (return-type "GType")
)

(define-function key_event_type_get_type
  (c-name "atk_key_event_type_get_type")
  (return-type "GType")
)

(define-function coord_type_get_type
  (c-name "atk_coord_type_get_type")
  (return-type "GType")
)



;; From /usr/include/atk-1.0/atk/atkaction.h

(define-function atk_action_get_type
  (c-name "atk_action_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-method do_action
  (of-object "AtkAction")
  (c-name "atk_action_do_action")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-method get_n_actions
  (of-object "AtkAction")
  (c-name "atk_action_get_n_actions")
  (return-type "gint")
)

(define-method get_description
  (of-object "AtkAction")
  (c-name "atk_action_get_description")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_name
  (of-object "AtkAction")
  (c-name "atk_action_get_name")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_keybinding
  (of-object "AtkAction")
  (c-name "atk_action_get_keybinding")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-method set_description
  (of-object "AtkAction")
  (c-name "atk_action_set_description")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
    '("const-gchar*" "desc")
  )
)

(define-method get_localized_name
  (of-object "AtkAction")
  (c-name "atk_action_get_localized_name")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual do_action
  (of-object "AtkAction")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_n_actions
  (of-object "AtkAction")
  (return-type "gint")
)

(define-virtual get_description
  (of-object "AtkAction")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_name
  (of-object "AtkAction")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_keybinding
  (of-object "AtkAction")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual set_description
  (of-object "AtkAction")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
    '("const-gchar*" "desc")
  )
)

(define-virtual get_localized_name
  (of-object "AtkAction")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)



;; From /usr/include/atk-1.0/atk/atkcomponent.h

(define-function atk_component_get_type
  (c-name "atk_component_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-method add_focus_handler
  (of-object "AtkComponent")
  (c-name "atk_component_add_focus_handler")
  (return-type "guint")
  (parameters
    '("AtkFocusHandler" "handler")
  )
)

(define-method contains
  (of-object "AtkComponent")
  (c-name "atk_component_contains")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-method ref_accessible_at_point
  (of-object "AtkComponent")
  (c-name "atk_component_ref_accessible_at_point")
  (return-type "AtkObject*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-method get_extents
  (of-object "AtkComponent")
  (c-name "atk_component_get_extents")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
    '("AtkCoordType" "coord_type")
  )
)

(define-method get_position
  (of-object "AtkComponent")
  (c-name "atk_component_get_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-method get_size
  (of-object "AtkComponent")
  (c-name "atk_component_get_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method grab_focus
  (of-object "AtkComponent")
  (c-name "atk_component_grab_focus")
  (return-type "gboolean")
)

(define-method remove_focus_handler
  (of-object "AtkComponent")
  (c-name "atk_component_remove_focus_handler")
  (return-type "none")
  (parameters
    '("guint" "handler_id")
  )
)

(define-method set_extents
  (of-object "AtkComponent")
  (c-name "atk_component_set_extents")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("AtkCoordType" "coord_type")
  )
)

(define-method set_position
  (of-object "AtkComponent")
  (c-name "atk_component_set_position")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-method set_size
  (of-object "AtkComponent")
  (c-name "atk_component_set_size")
  (return-type "gboolean")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function rectangle_get_type
  (c-name "atk_rectangle_get_type")
  (return-type "GType")
)

(define-method get_layer
  (of-object "AtkComponent")
  (c-name "atk_component_get_layer")
  (return-type "AtkLayer")
)

(define-method get_mdi_zorder
  (of-object "AtkComponent")
  (c-name "atk_component_get_mdi_zorder")
  (return-type "gint")
)

(define-method get_alpha
  (of-object "AtkComponent")
  (c-name "atk_component_get_alpha")
  (return-type "gdouble")
)

(define-virtual add_focus_handler
  (of-object "AtkComponent")
  (return-type "guint")
  (parameters
    '("AtkFocusHandler" "handler")
  )
)

(define-virtual contains
  (of-object "AtkComponent")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual ref_accessible_at_point
  (of-object "AtkComponent")
  (return-type "AtkObject*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual get_extents
  (of-object "AtkComponent")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual get_position
  (of-object "AtkComponent")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual get_size
  (of-object "AtkComponent")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-virtual grab_focus
  (of-object "AtkComponent")
  (return-type "gboolean")
)

(define-virtual remove_focus_handler
  (of-object "AtkComponent")
  (return-type "none")
  (parameters
    '("guint" "handler_id")
  )
)

(define-virtual set_extents
  (of-object "AtkComponent")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual set_position
  (of-object "AtkComponent")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual set_size
  (of-object "AtkComponent")
  (return-type "gboolean")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual get_layer
  (of-object "AtkComponent")
  (return-type "AtkLayer")
)

(define-virtual get_mdi_zorder
  (of-object "AtkComponent")
  (return-type "gint")
)

(define-virtual bounds_changed
  (of-object "AtkComponent")
  (return-type "none")
  (parameters
    '("AtkRectangle*" "bounds")
  )
)

(define-virtual get_alpha
  (of-object "AtkComponent")
  (return-type "gdouble")
)



;; From /usr/include/atk-1.0/atk/atkdocument.h

(define-function atk_document_get_type
  (c-name "atk_document_get_type")
  (return-type "GType")
)

(define-method get_document_type
  (of-object "AtkDocument")
  (c-name "atk_document_get_document_type")
  (return-type "const-gchar*")
)

(define-method get_document
  (of-object "AtkDocument")
  (c-name "atk_document_get_document")
  (return-type "gpointer")
)

(define-method get_attributes
  (of-object "AtkDocument")
  (c-name "atk_document_get_attributes")
  (return-type "AtkAttributeSet*")
)

(define-method get_attribute_value
  (of-object "AtkDocument")
  (c-name "atk_document_get_attribute_value")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "attribute_name")
  )
)

(define-method set_attribute_value
  (of-object "AtkDocument")
  (c-name "atk_document_set_attribute_value")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "attribute_name")
    '("const-gchar*" "attribute_value")
  )
)


(define-virtual get_document_type
  (of-object "AtkDocument")
  (return-type "const-gchar*")
)

(define-virtual get_document
  (of-object "AtkDocument")
  (return-type "gpointer")
)

(define-virtual get_document_attributes
  (of-object "AtkDocument")
  (return-type "AtkAttributeSet*")
)

(define-virtual get_document_attribute_value
  (of-object "AtkDocument")
  (return-type "G_CONST_RETURNgchar*")
  (parameters
    '("const-gchar*" "attribute_name")
  )
)

(define-virtual set_document_attribute
  (of-object "AtkDocument")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "attribute_name")
    '("const-gchar*" "attribute_value")
  )
)



;; From /usr/include/atk-1.0/atk/atkeditabletext.h

(define-function atk_editable_text_get_type
  (c-name "atk_editable_text_get_type")
  (return-type "GType")
)

(define-method set_run_attributes
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_set_run_attributes")
  (return-type "gboolean")
  (parameters
    '("AtkAttributeSet*" "attrib_set")
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-method set_text_contents
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_set_text_contents")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    )
)

(define-method insert_text
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_insert_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    '("gint" "length")
    '("gint*" "position")
  )
)

(define-method copy_text
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_copy_text")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-method cut_text
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_cut_text")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-method delete_text
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_delete_text")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-method paste_text
  (of-object "AtkEditableText")
  (c-name "atk_editable_text_paste_text")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-virtual set_run_attributes
  (of-object "AtkEditableText")
  (return-type "gboolean")
  (parameters
    '("AtkAttributeSet*" "attrib_set")
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-virtual set_text_contents
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-virtual insert_text
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    '("gint" "length")
    '("gint*" "position")
  )
)

(define-virtual copy_text
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual cut_text
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual delete_text
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual paste_text
  (of-object "AtkEditableText")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)



;; From atkgobjectaccessible.h

(define-function gobject_accessible_get_type
  (c-name "atk_gobject_accessible_get_type")
  (return-type "GType")
)

(define-function gobject_accessible_for_object
  (c-name "atk_gobject_accessible_for_object")
  (return-type "AtkObject*")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method get_object
  (of-object "AtkGObjectAccessible")
  (c-name "atk_gobject_accessible_get_object")
  (return-type "GObject*")
)



;; From /usr/include/atk-1.0/atk/atk.h



;; From /usr/include/atk-1.0/atk/atkhyperlink.h

(define-function atk_hyperlink_get_type
  (c-name "atk_hyperlink_get_type")
  (return-type "GType")
)

(define-method get_uri
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_get_uri")
  (return-type "gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_object
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_get_object")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_end_index
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_get_end_index")
  (return-type "gint")
)

(define-method get_start_index
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_get_start_index")
  (return-type "gint")
)

(define-method is_valid
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_is_valid")
  (return-type "gboolean")
)

(define-method get_n_anchors
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_get_n_anchors")
  (return-type "gint")
)

(define-method is_inline
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_is_inline")
  (return-type "gboolean")
)

(define-method is_selected_link
  (of-object "AtkHyperlink")
  (c-name "atk_hyperlink_is_selected_link")
  (return-type "gboolean")
)

(define-method get_attributes
  (of-object "AtkObject")
  (c-name "atk_object_get_attributes")
  (return-type "AtkAttributeSet*")
)


(define-virtual get_uri
  (of-object "AtkHyperlink")
  (return-type "gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_object
  (of-object "AtkHyperlink")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_end_index
  (of-object "AtkHyperlink")
  (return-type "gint")
)

(define-virtual get_start_index
  (of-object "AtkHyperlink")
  (return-type "gint")
)

(define-virtual is_valid
  (of-object "AtkHyperlink")
  (return-type "gboolean")
)

(define-virtual get_n_anchors
  (of-object "AtkHyperlink")
  (return-type "gint")
)

(define-virtual link_state
  (of-object "AtkHyperlink")
  (return-type "guint")
)

(define-virtual is_selected_link
  (of-object "AtkHyperlink")
  (return-type "gboolean")
)

(define-virtual link_activated
  (of-object "AtkHyperlink")
  (return-type "none")
)

(define-virtual get_attributes
  (of-object "AtkObject")
  (return-type "AtkAttributeSet*")
)



;; From atkhyperlinkimpl.h

(define-function atk_hyperlink_impl_get_type
  (c-name "atk_hyperlink_impl_get_type")
  (return-type "GType")
)

(define-method get_hyperlink
  (of-object "AtkHyperlinkImpl")
  (c-name "atk_hyperlink_impl_get_hyperlink")
  (return-type "AtkHyperlink*")
)

(define-virtual get_hyperlink
  (of-object "AtkHyperlinkImpl")
  (return-type "AtkHyperlink*")
)



;; From /usr/include/atk-1.0/atk/atkhypertext.h

(define-function atk_hypertext_get_type
  (c-name "atk_hypertext_get_type")
  (return-type "GType")
)

(define-method get_link
  (of-object "AtkHypertext")
  (c-name "atk_hypertext_get_link")
  (return-type "AtkHyperlink*")
  (parameters
    '("gint" "link_index")
  )
)

(define-method get_n_links
  (of-object "AtkHypertext")
  (c-name "atk_hypertext_get_n_links")
  (return-type "gint")
)

(define-method get_link_index
  (of-object "AtkHypertext")
  (c-name "atk_hypertext_get_link_index")
  (return-type "gint")
  (parameters
    '("gint" "char_index")
  )
)

(define-virtual get_link
  (of-object "AtkHypertext")
  (return-type "AtkHyperlink*")
  (parameters
    '("gint" "link_index")
  )
)

(define-virtual get_n_links
  (of-object "AtkHypertext")
  (return-type "gint")
)

(define-virtual get_link_index
  (of-object "AtkHypertext")
  (return-type "gint")
  (parameters
    '("gint" "char_index")
  )
)

(define-virtual link_selected
  (of-object "AtkHypertext")
  (return-type "none")
  (parameters
    '("gint" "link_index")
  )
)



;; From /usr/include/atk-1.0/atk/atkimage.h

(define-function atk_image_get_type
  (c-name "atk_image_get_type")
  (return-type "GType")
)

(define-method get_image_description
  (of-object "AtkImage")
  (c-name "atk_image_get_image_description")
  (return-type "const-gchar*")
)

(define-method get_image_size
  (of-object "AtkImage")
  (c-name "atk_image_get_image_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method set_image_description
  (of-object "AtkImage")
  (c-name "atk_image_set_image_description")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method get_image_position
  (of-object "AtkImage")
  (c-name "atk_image_get_image_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual get_image_position
  (of-object "AtkImage")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("AtkCoordType" "coord_type")
  )
)

(define-virtual get_image_description
  (of-object "AtkImage")
  (return-type "const-gchar*")
)

(define-virtual get_image_size
  (of-object "AtkImage")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-virtual set_image_description
  (of-object "AtkImage")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "description")
  )
)



;; From /usr/include/atk-1.0/atk/atknoopobjectfactory.h

(define-function atk_no_op_object_factory_get_type
  (c-name "atk_no_op_object_factory_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-function atk_no_op_object_factory_new
  (c-name "atk_no_op_object_factory_new")
  (return-type "AtkObjectFactory*")
  (is-constructor-of AtkNoOpObjectFactory)
  (parameters
  )
)



;; From /usr/include/atk-1.0/atk/atknoopobject.h

(define-function atk_no_op_object_get_type
  (c-name "atk_no_op_object_get_type")
  (return-type "GType")
)

(define-function atk_no_op_object_new
  (c-name "atk_no_op_object_new")
  (return-type "AtkNoOpObject*")
  (is-constructor-of AtkNoOpObject)
  (parameters
    '("GObject*" "obj")
  )
)



;; From /usr/include/atk-1.0/atk/atkobjectfactory.h

(define-function atk_object_factory_get_type
  (c-name "atk_object_factory_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-method create_accessible
  (of-object "AtkObjectFactory")
  (c-name "atk_object_factory_create_accessible")
  (return-type "AtkObject*")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method invalidate
  (of-object "AtkObjectFactory")
  (c-name "atk_object_factory_invalidate")
  (return-type "none")
)

(define-method get_accessible_type
  (of-object "AtkObjectFactory")
  (c-name "atk_object_factory_get_accessible_type")
  (return-type "GType")
)

(define-virtual create_accessible
  (of-object "AtkObjectFactory")
  (return-type "AtkObject*")
)

(define-virtual invalidate
  (of-object "AtkObjectFactory")
  (return-type "none")
)



;; From /usr/include/atk-1.0/atk/atkobject.h

(define-function atk_object_get_type
  (c-name "atk_object_get_type")
  (return-type "GType")
)

(define-function atk_implementor_get_type
  (c-name "atk_implementor_get_type")
  (return-type "GType")
)

(define-method ref_accessible
  (of-object "AtkImplementorIface")
  (c-name "atk_implementor_ref_accessible")
  (return-type "AtkObject*")
)

(define-virtual ref_accessible
  (of-object "AtkImplementor")
  (return-type "AtkObject*")
)

(define-method get_name
  (of-object "AtkObject")
  (c-name "atk_object_get_name")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "AtkObject")
  (c-name "atk_object_get_description")
  (return-type "const-gchar*")
)

(define-method get_parent
  (of-object "AtkObject")
  (c-name "atk_object_get_parent")
  (return-type "AtkObject*")
)

(define-method get_n_accessible_children
  (of-object "AtkObject")
  (c-name "atk_object_get_n_accessible_children")
  (return-type "gint")
)

(define-method ref_accessible_child
  (of-object "AtkObject")
  (c-name "atk_object_ref_accessible_child")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-method ref_relation_set
  (of-object "AtkObject")
  (c-name "atk_object_ref_relation_set")
  (return-type "AtkRelationSet*")
)

(define-method get_role
  (of-object "AtkObject")
  (c-name "atk_object_get_role")
  (return-type "AtkRole")
)

(define-method get_layer
  (of-object "AtkObject")
  (c-name "atk_object_get_layer")
  (return-type "AtkLayer")
)

(define-method get_mdi_zorder
  (of-object "AtkObject")
  (c-name "atk_object_get_mdi_zorder")
  (return-type "gint")
)

(define-method ref_state_set
  (of-object "AtkObject")
  (c-name "atk_object_ref_state_set")
  (return-type "AtkStateSet*")
)

(define-method get_index_in_parent
  (of-object "AtkObject")
  (c-name "atk_object_get_index_in_parent")
  (return-type "gint")
)

(define-method set_name
  (of-object "AtkObject")
  (c-name "atk_object_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_description
  (of-object "AtkObject")
  (c-name "atk_object_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method set_parent
  (of-object "AtkObject")
  (c-name "atk_object_set_parent")
  (return-type "none")
  (parameters
    '("AtkObject*" "parent")
  )
)

(define-method set_role
  (of-object "AtkObject")
  (c-name "atk_object_set_role")
  (return-type "none")
  (parameters
    '("AtkRole" "role")
  )
)

(define-method connect_property_change_handler
  (of-object "AtkObject")
  (c-name "atk_object_connect_property_change_handler")
  (return-type "guint")
  (parameters
    '("AtkPropertyChangeHandler*" "handler")
  )
)

(define-method remove_property_change_handler
  (of-object "AtkObject")
  (c-name "atk_object_remove_property_change_handler")
  (return-type "none")
  (parameters
    '("guint" "handler_id")
  )
)

(define-method notify_state_change
  (of-object "AtkObject")
  (c-name "atk_object_notify_state_change")
  (return-type "none")
  (parameters
    '("AtkState" "state")
    '("gboolean" "value")
  )
)

(define-virtual get_name
  (of-object "AtkObject")
  (return-type "const-gchar*")
)

(define-virtual get_description
  (of-object "AtkObject")
  (return-type "const-gchar*")
)

(define-virtual get_parent
  (of-object "AtkObject")
  (return-type "AtkObject*")
)

(define-virtual get_n_children
  (of-object "AtkObject")
  (return-type "gint")
)

(define-virtual ref_child
  (of-object "AtkObject")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_index_in_parent
  (of-object "AtkObject")
  (return-type "gint")
)

(define-virtual ref_relation_set
  (of-object "AtkObject")
  (return-type "AtkRelationSet*")
)

(define-virtual get_role
  (of-object "AtkObject")
  (return-type "AtkRole")
)

(define-virtual get_layer
  (of-object "AtkObject")
  (return-type "AtkLayer")
)

(define-virtual get_mdi_zorder
  (of-object "AtkObject")
  (return-type "gint")
)

(define-virtual ref_state_set
  (of-object "AtkObject")
  (return-type "AtkStateSet*")
)

(define-virtual set_name
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual set_description
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-virtual set_parent
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("AtkObject*" "parent")
  )
)

(define-virtual set_role
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("AtkRole" "role")
  )
)

(define-virtual connect_property_change_handler
  (of-object "AtkObject")
  (return-type "guint")
  (parameters
    '("AtkPropertyChangeHandler*" "handler")
  )
)

(define-virtual remove_property_change_handler
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("guint" "handler_id")
  )
)

(define-virtual initialize
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-virtual children_changed
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("guint" "change_index")
    '("gpointer" "changed_child")
  )
)

(define-virtual focus_event
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("gboolean" "focus_in")
  )
)

(define-virtual property_change
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("AtkPropertyValues*" "values")
  )
)

(define-virtual state_change
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gboolean" "state_set")
  )
)

(define-virtual visible_data_changed
  (of-object "AtkObject")
  (return-type "none")
)

(define-virtual active_descendant_changed
  (of-object "AtkObject")
  (return-type "none")
  (parameters
    '("gpointer*" "child")
  )
)

(define-function role_register
  (c-name "atk_role_register")
  (return-type "AtkRole")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method initialize
  (of-object "AtkObject")
  (c-name "atk_object_initialize")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method add_relationship
  (of-object "AtkObject")
  (c-name "atk_object_add_relationship")
  (return-type "gboolean")
  (parameters
    '("AtkRelationType" "relationship")
    '("AtkObject*" "target")
  )
)

(define-method remove_relationship
  (of-object "AtkObject")
  (c-name "atk_object_remove_relationship")
  (return-type "gboolean")
  (parameters
    '("AtkRelationType" "relationship")
    '("AtkObject*" "target")
  )
)

(define-function role_get_localized_name
  (c-name "atk_role_get_localized_name")
  (return-type "const-gchar*")
  (parameters
    '("AtkRole" "role")
  )
)



;; From /usr/include/atk-1.0/atk/atkregistry.h

(define-function atk_registry_get_type
  (c-name "atk_registry_get_type")
  (return-type "GType")
)

(define-method set_factory_type
  (of-object "AtkRegistry")
  (c-name "atk_registry_set_factory_type")
  (return-type "none")
  (parameters
    '("GType" "type")
    '("GType" "factory_type")
  )
)

(define-method get_factory_type
  (of-object "AtkRegistry")
  (c-name "atk_registry_get_factory_type")
  (return-type "GType")
  (parameters
    '("GType" "type")
  )
)

(define-method get_factory
  (of-object "AtkRegistry")
  (c-name "atk_registry_get_factory")
  (return-type "AtkObjectFactory*")
  (parameters
    '("GType" "type")
  )
)

(define-function get_default_registry
  (c-name "atk_get_default_registry")
  (return-type "AtkRegistry*")
  (parameters
  )
)



;; From /usr/include/atk-1.0/atk/atkrelation.h

(define-function atk_relation_get_type
  (c-name "atk_relation_get_type")
  (return-type "GType")
)

(define-function relation_type_register
  (c-name "atk_relation_type_register")
  (return-type "AtkRelationType")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function relation_type_get_name
  (c-name "atk_relation_type_get_name")
  (return-type "const-gchar*")
  (parameters
    '("AtkRelationType" "relationship")
  )
)

(define-function relation_type_for_name
  (c-name "atk_relation_type_for_name")
  (return-type "AtkRelationType")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function relation_new
  (c-name "atk_relation_new")
  (return-type "AtkRelation*")
  (is-constructor-of AtkRelation)
  (parameters
    '("AtkObject**" "targets")
    '("gint" "n_targets")
    '("AtkRelationType" "relationship")
  )
)

(define-method get_relation_type
  (of-object "AtkRelation")
  (c-name "atk_relation_get_relation_type")
  (return-type "AtkRelationType")
)

(define-method get_target
  (of-object "AtkRelation")
  (c-name "atk_relation_get_target")
  (return-type "GPtrArray*")
)
 
(define-method add_target
  (of-object "AtkRelation")
  (c-name "atk_relation_add_target")
  (return-type "none")
  (parameters
    '("AtkObject*" "target")
  )
)



;; From /usr/include/atk-1.0/atk/atkrelationset.h

(define-function atk_relation_set_get_type
  (c-name "atk_relation_set_get_type")
  (return-type "GType")
)

(define-function relation_set_new
  (c-name "atk_relation_set_new")
  (is-constructor-of AtkRelationSet)
  (return-type "AtkRelationSet*")
)

(define-method contains
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_contains")
  (return-type "gboolean")
  (parameters
    '("AtkRelationType" "relationship")
  )
)

(define-method remove
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_remove")
  (return-type "none")
  (parameters
    '("AtkRelation*" "relation")
  )
)

(define-method add
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_add")
  (return-type "none")
  (parameters
    '("AtkRelation*" "relation")
  )
)

(define-method get_n_relations
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_get_n_relations")
  (return-type "gint")
)

(define-method get_relation
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_get_relation")
  (return-type "AtkRelation*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_relation_by_type
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_get_relation_by_type")
  (return-type "AtkRelation*")
  (parameters
    '("AtkRelationType" "relationship")
  )
)

(define-method add_relation_by_type
  (of-object "AtkRelationSet")
  (c-name "atk_relation_set_add_relation_by_type")
  (return-type "none")
  (parameters
    '("AtkRelationType" "relationship")
    '("AtkObject*" "target")
  )
)



;; From /usr/include/atk-1.0/atk/atkselection.h

(define-function atk_selection_get_type
  (c-name "atk_selection_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-method add_selection
  (of-object "AtkSelection")
  (c-name "atk_selection_add_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-method clear_selection
  (of-object "AtkSelection")
  (c-name "atk_selection_clear_selection")
  (return-type "gboolean")
)

(define-method ref_selection
  (of-object "AtkSelection")
  (c-name "atk_selection_ref_selection")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_selection_count
  (of-object "AtkSelection")
  (c-name "atk_selection_get_selection_count")
  (return-type "gint")
)

(define-method is_child_selected
  (of-object "AtkSelection")
  (c-name "atk_selection_is_child_selected")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-method remove_selection
  (of-object "AtkSelection")
  (c-name "atk_selection_remove_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-method select_all_selection
  (of-object "AtkSelection")
  (c-name "atk_selection_select_all_selection")
  (return-type "gboolean")
)

(define-virtual add_selection
  (of-object "AtkSelection")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-virtual clear_selection
  (of-object "AtkSelection")
  (return-type "gboolean")
)

(define-virtual ref_selection
  (of-object "AtkSelection")
  (return-type "AtkObject*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_selection_count
  (of-object "AtkSelection")
  (return-type "gint")
)

(define-virtual is_child_selected
  (of-object "AtkSelection")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-virtual remove_selection
  (of-object "AtkSelection")
  (return-type "gboolean")
  (parameters
    '("gint" "i")
  )
)

(define-virtual select_all_selection
  (of-object "AtkSelection")
  (return-type "gboolean")
)

(define-virtual selection_changed
  (of-object "AtkSelection")
  (return-type "none")
)



;; From /usr/include/atk-1.0/atk/atkstate.h

(define-function state_type_register
  (c-name "atk_state_type_register")
  (return-type "AtkStateType")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function state_type_get_name
  (c-name "atk_state_type_get_name")
  (return-type "const-gchar*")
  (parameters
    '("AtkStateType" "type")
  )
)

(define-function state_type_for_name
  (c-name "atk_state_type_for_name")
  (return-type "AtkStateType")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/atk-1.0/atk/atkstateset.h

(define-function atk_state_set_get_type
  (c-name "atk_state_set_get_type")
  (return-type "GType")
)

(define-function atk_state_set_new
  (c-name "atk_state_set_new")
  (is-constructor-of "AtkStateSet")
  (return-type "AtkStateSet*")
)

(define-method is_empty
  (of-object "AtkStateSet")
  (c-name "atk_state_set_is_empty")
  (return-type "gboolean")
)

(define-method add_state
  (of-object "AtkStateSet")
  (c-name "atk_state_set_add_state")
  (return-type "gboolean")
  (parameters
    '("AtkStateType" "type")
  )
)

(define-method add_states
  (of-object "AtkStateSet")
  (c-name "atk_state_set_add_states")
  (return-type "none")
  (parameters
    '("AtkStateType*" "types")
    '("gint" "n_types")
  )
)

(define-method clear_states
  (of-object "AtkStateSet")
  (c-name "atk_state_set_clear_states")
  (return-type "none")
)

(define-method contains_state
  (of-object "AtkStateSet")
  (c-name "atk_state_set_contains_state")
  (return-type "gboolean")
  (parameters
    '("AtkStateType" "type")
  )
)

(define-method contains_states
  (of-object "AtkStateSet")
  (c-name "atk_state_set_contains_states")
  (return-type "gboolean")
  (parameters
    '("AtkStateType*" "types")
    '("gint" "n_types")
  )
)

(define-method remove_state
  (of-object "AtkStateSet")
  (c-name "atk_state_set_remove_state")
  (return-type "gboolean")
  (parameters
    '("AtkStateType" "type")
  )
)

(define-method and_sets
  (of-object "AtkStateSet")
  (c-name "atk_state_set_and_sets")
  (return-type "AtkStateSet*")
  (parameters
    '("AtkStateSet*" "compare_set")
  )
)

(define-method or_sets
  (of-object "AtkStateSet")
  (c-name "atk_state_set_or_sets")
  (return-type "AtkStateSet*")
  (parameters
    '("AtkStateSet*" "compare_set")
  )
)

(define-method xor_sets
  (of-object "AtkStateSet")
  (c-name "atk_state_set_xor_sets")
  (return-type "AtkStateSet*")
  (parameters
    '("AtkStateSet*" "compare_set")
  )
)



;; From /usr/include/atk-1.0/atk/atkstreamablecontent.h

(define-function atk_streamable_content_get_type
  (c-name "atk_streamable_content_get_type")
  (return-type "GType")
)

(define-method get_n_mime_types
  (of-object "AtkStreamableContent")
  (c-name "atk_streamable_content_get_n_mime_types")
  (return-type "gint")
)

(define-method get_mime_type
  (of-object "AtkStreamableContent")
  (c-name "atk_streamable_content_get_mime_type")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-method get_stream
  (of-object "AtkStreamableContent")
  (c-name "atk_streamable_content_get_stream")
  (return-type "GIOChannel*")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-method get_uri
  (of-object "AtkStreamableContent")
  (c-name "atk_streamable_content_get_uri")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-virtual get_n_mime_types
  (of-object "AtkStreamableContent")
  (return-type "gint")
)

(define-virtual get_mime_type
  (of-object "AtkStreamableContent")
  (return-type "const-gchar*")
  (parameters
    '("gint" "i")
  )
)

(define-virtual get_stream
  (of-object "AtkStreamableContent")
  (return-type "GIOChannel*")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-virtual get_uri
  (of-object "AtkStreamableContent")
  (return-type "G_CONST_RETURNgchar*")
  (parameters
    '("const-gchar*" "mime_type")
  )
)



;; From /usr/include/atk-1.0/atk/atktable.h

(define-function atk_table_get_type
  (c-name "atk_table_get_type")
  (return-type "GType")
  (parameters
  )
)

(define-method ref_at
  (of-object "AtkTable")
  (c-name "atk_table_ref_at")
  (return-type "AtkObject*")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method get_index_at
  (of-object "AtkTable")
  (c-name "atk_table_get_index_at")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method get_column_at_index
  (of-object "AtkTable")
  (c-name "atk_table_get_column_at_index")
  (return-type "gint")
  (parameters
    '("gint" "index")
  )
)

(define-method get_row_at_index
  (of-object "AtkTable")
  (c-name "atk_table_get_row_at_index")
  (return-type "gint")
  (parameters
    '("gint" "index")
  )
)

(define-method get_n_columns
  (of-object "AtkTable")
  (c-name "atk_table_get_n_columns")
  (return-type "gint")
)

(define-method get_n_rows
  (of-object "AtkTable")
  (c-name "atk_table_get_n_rows")
  (return-type "gint")
)

(define-method get_column_extent_at
  (of-object "AtkTable")
  (c-name "atk_table_get_column_extent_at")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method get_row_extent_at
  (of-object "AtkTable")
  (c-name "atk_table_get_row_extent_at")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method get_caption
  (of-object "AtkTable")
  (c-name "atk_table_get_caption")
  (return-type "AtkObject*")
)

(define-method get_column_description
  (of-object "AtkTable")
  (c-name "atk_table_get_column_description")
  (return-type "const-gchar*")
  (parameters
    '("gint" "column")
  )
)

(define-method get_column_header
  (of-object "AtkTable")
  (c-name "atk_table_get_column_header")
  (return-type "AtkObject*")
  (parameters
    '("gint" "column")
  )
)

(define-method get_row_description
  (of-object "AtkTable")
  (c-name "atk_table_get_row_description")
  (return-type "const-gchar*")
  (parameters
    '("gint" "row")
  )
)

(define-method get_row_header
  (of-object "AtkTable")
  (c-name "atk_table_get_row_header")
  (return-type "AtkObject*")
  (parameters
    '("gint" "row")
  )
)

(define-method get_summary
  (of-object "AtkTable")
  (c-name "atk_table_get_summary")
  (return-type "AtkObject*")
)

(define-method set_caption
  (of-object "AtkTable")
  (c-name "atk_table_set_caption")
  (return-type "none")
  (parameters
    '("AtkObject*" "caption")
  )
)

(define-method set_column_description
  (of-object "AtkTable")
  (c-name "atk_table_set_column_description")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("const-gchar*" "description")
  )
)

(define-method set_column_header
  (of-object "AtkTable")
  (c-name "atk_table_set_column_header")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("AtkObject*" "header")
  )
)

(define-method set_row_description
  (of-object "AtkTable")
  (c-name "atk_table_set_row_description")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("const-gchar*" "description")
  )
)

(define-method set_row_header
  (of-object "AtkTable")
  (c-name "atk_table_set_row_header")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("AtkObject*" "header")
  )
)

(define-method set_summary
  (of-object "AtkTable")
  (c-name "atk_table_set_summary")
  (return-type "none")
  (parameters
    '("AtkObject*" "accessible")
  )
)

(define-method get_selected_columns
  (of-object "AtkTable")
  (c-name "atk_table_get_selected_columns")
  (return-type "gint")
  (parameters
    '("gint**" "selected")
  )
)

(define-method get_selected_rows
  (of-object "AtkTable")
  (c-name "atk_table_get_selected_rows")
  (return-type "gint")
  (parameters
    '("gint**" "selected")
  )
)

(define-method is_column_selected
  (of-object "AtkTable")
  (c-name "atk_table_is_column_selected")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-method is_row_selected
  (of-object "AtkTable")
  (c-name "atk_table_is_row_selected")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-method is_selected
  (of-object "AtkTable")
  (c-name "atk_table_is_selected")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method add_row_selection
  (of-object "AtkTable")
  (c-name "atk_table_add_row_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-method remove_row_selection
  (of-object "AtkTable")
  (c-name "atk_table_remove_row_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-method add_column_selection
  (of-object "AtkTable")
  (c-name "atk_table_add_column_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-method remove_column_selection
  (of-object "AtkTable")
  (c-name "atk_table_remove_column_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-virtual ref_at
  (of-object "AtkTable")
  (return-type "AtkObject*")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-virtual get_index_at
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-virtual get_column_at_index
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint" "index")
  )
)

(define-virtual get_row_at_index
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint" "index")
  )
)

(define-virtual get_n_columns
  (of-object "AtkTable")
  (return-type "gint")
)

(define-virtual get_n_rows
  (of-object "AtkTable")
  (return-type "gint")
)

(define-virtual get_column_extent_at
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-virtual get_row_extent_at
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-virtual get_caption
  (of-object "AtkTable")
  (return-type "AtkObject*")
)

(define-virtual get_column_description
  (of-object "AtkTable")
  (return-type "const-gchar*")
  (parameters
    '("gint" "column")
  )
)

(define-virtual get_column_header
  (of-object "AtkTable")
  (return-type "AtkObject*")
  (parameters
    '("gint" "column")
  )
)

(define-virtual get_row_description
  (of-object "AtkTable")
  (return-type "const-gchar*")
  (parameters
    '("gint" "row")
  )
)

(define-virtual get_row_header
  (of-object "AtkTable")
  (return-type "AtkObject*")
  (parameters
    '("gint" "row")
  )
)

(define-virtual get_summary
  (of-object "AtkTable")
  (return-type "AtkObject*")
)

(define-virtual set_caption
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("AtkObject*" "caption")
  )
)

(define-virtual set_column_description
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("const-gchar*" "description")
  )
)

(define-virtual set_column_header
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("AtkObject*" "header")
  )
)

(define-virtual set_row_description
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("const-gchar*" "description")
  )
)

(define-virtual set_row_header
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("AtkObject*" "header")
  )
)

(define-virtual set_summary
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("AtkObject*" "accessible")
  )
)

(define-virtual get_selected_columns
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint**" "selected")
  )
)

(define-virtual get_selected_rows
  (of-object "AtkTable")
  (return-type "gint")
  (parameters
    '("gint**" "selected")
  )
)

(define-virtual is_column_selected
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-virtual is_row_selected
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-virtual is_selected
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-virtual add_row_selection
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-virtual remove_row_selection
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-virtual add_column_selection
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-virtual remove_column_selection
  (of-object "AtkTable")
  (return-type "gboolean")
  (parameters
    '("gint" "column")
  )
)

(define-virtual row_inserted
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "num_inserted")
  )
)

(define-virtual column_inserted
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "num_inserted")
  )
)

(define-virtual row_deleted
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "num_deleted")
  )
)

(define-virtual column_deleted
  (of-object "AtkTable")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "num_deleted")
  )
)

(define-virtual row_reordered
  (of-object "AtkTable")
  (return-type "none")
)

(define-virtual column_reordered
  (of-object "AtkTable")
  (return-type "none")
)

(define-virtual model_changed
  (of-object "AtkTable")
  (return-type "none")
)



;; From /usr/include/atk-1.0/atk/atktext.h

(define-function atk_text_get_type
  (c-name "atk_text_get_type")
  (return-type "GType")
)

(define-method get_text
  (of-object "AtkText")
  (c-name "atk_text_get_text")
  (return-type "gchar*")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-method get_character_at_offset
  (of-object "AtkText")
  (c-name "atk_text_get_character_at_offset")
  (return-type "gunichar")
  (parameters
    '("gint" "offset")
  )
)

(define-method get_text_after_offset
  (of-object "AtkText")
  (c-name "atk_text_get_text_after_offset")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-method get_text_at_offset
  (of-object "AtkText")
  (c-name "atk_text_get_text_at_offset")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-method get_text_before_offset
  (of-object "AtkText")
  (c-name "atk_text_get_text_before_offset")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-method get_caret_offset
  (of-object "AtkText")
  (c-name "atk_text_get_caret_offset")
  (return-type "gint")
)

(define-method get_character_extents
  (of-object "AtkText")
  (c-name "atk_text_get_character_extents")
  (return-type "none")
  (parameters
    '("gint" "offset")
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
    '("AtkCoordType" "coords")
  )
)

(define-method get_run_attributes
  (of-object "AtkText")
  (c-name "atk_text_get_run_attributes")
  (return-type "AtkAttributeSet*")
  (parameters
    '("gint" "offset")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-method get_default_attributes
  (of-object "AtkText")
  (c-name "atk_text_get_default_attributes")
  (return-type "AtkAttributeSet*")
)

(define-method get_character_count
  (of-object "AtkText")
  (c-name "atk_text_get_character_count")
  (return-type "gint")
)

(define-method get_offset_at_point
  (of-object "AtkText")
  (c-name "atk_text_get_offset_at_point")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coords")
  )
)

(define-method get_n_selections
  (of-object "AtkText")
  (c-name "atk_text_get_n_selections")
  (return-type "gint")
)

(define-method get_selection
  (of-object "AtkText")
  (c-name "atk_text_get_selection")
  (return-type "gchar*")
  (parameters
    '("gint" "selection_num")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-method add_selection
  (of-object "AtkText")
  (c-name "atk_text_add_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-method remove_selection
  (of-object "AtkText")
  (c-name "atk_text_remove_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "selection_num")
  )
)

(define-method set_selection
  (of-object "AtkText")
  (c-name "atk_text_set_selection")
  (return-type "gboolean")
  (parameters
    '("gint" "selection_num")
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-method set_caret_offset
  (of-object "AtkText")
  (c-name "atk_text_set_caret_offset")
  (return-type "gboolean")
  (parameters
    '("gint" "offset")
  )
)

(define-method get_range_extents
  (of-object "AtkText")
  (c-name "atk_text_get_range_extents")
  (return-type "none")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
    '("AtkCoordType" "coord_type")
    '("AtkTextRectangle*" "rect")
  )
)

(define-method get_bounded_ranges
  (of-object "AtkText")
  (c-name "atk_text_get_bounded_ranges")
  (return-type "AtkTextRange**")
  (parameters
    '("AtkTextRectangle*" "rect")
    '("AtkCoordType" "coord_type")
    '("AtkTextClipType" "x_clip_type")
    '("AtkTextClipType" "y_clip_type")
  )
)

(define-function text_free_ranges
  (c-name "atk_text_free_ranges")
  (return-type "none")
  (parameters
    '("AtkTextRange**" "ranges")
  )
)

(define-method free
  (of-object "AtkAttributeSet")
  (c-name "atk_attribute_set_free")
  (return-type "none")
)

(define-function text_attribute_get_name
  (c-name "atk_text_attribute_get_name")
  (return-type "const-gchar*")
  (parameters
    '("AtkTextAttribute" "attr")
  )
)

(define-function text_attribute_get_value
  (c-name "atk_text_attribute_get_value")
  (return-type "const-gchar*")
  (parameters
    '("AtkTextAttribute" "attr")
    '("gint" "index")
  )
)

(define-function text_attribute_register
  (c-name "atk_text_attribute_register")
  (return-type "AtkTextAttribute")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function text_attribute_for_name
  (c-name "atk_text_attribute_for_name")
  (return-type "AtkTextAttribute")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual get_text
  (of-object "AtkText")
  (return-type "gchar*")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-virtual get_text_after_offset
  (of-object "AtkText")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-virtual get_text_at_offset
  (of-object "AtkText")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-virtual get_character_at_offset
  (of-object "AtkText")
  (return-type "gunichar")
  (parameters
    '("gint" "offset")
  )
)

(define-virtual get_text_before_offset
  (of-object "AtkText")
  (return-type "gchar*")
  (parameters
    '("gint" "offset")
    '("AtkTextBoundary" "boundary_type")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-virtual get_caret_offset
  (of-object "AtkText")
  (return-type "gint")
)

(define-virtual get_run_attributes
  (of-object "AtkText")
  (return-type "AtkAttributeSet*")
  (parameters
    '("gint" "offset")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-virtual get_default_attributes
  (of-object "AtkText")
  (return-type "AtkAttributeSet*")
)

(define-virtual get_character_extents
  (of-object "AtkText")
  (return-type "none")
  (parameters
    '("gint" "offset")
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
    '("AtkCoordType" "coords")
  )
)

(define-virtual get_character_count
  (of-object "AtkText")
  (return-type "gint")
)

(define-virtual get_offset_at_point
  (of-object "AtkText")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("AtkCoordType" "coords")
  )
)

(define-virtual get_n_selections
  (of-object "AtkText")
  (return-type "gint")
)

(define-virtual get_selection
  (of-object "AtkText")
  (return-type "gchar*")
  (parameters
    '("gint" "selection_num")
    '("gint*" "start_offset")
    '("gint*" "end_offset")
  )
)

(define-virtual add_selection
  (of-object "AtkText")
  (return-type "gboolean")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-virtual remove_selection
  (of-object "AtkText")
  (return-type "gboolean")
  (parameters
    '("gint" "selection_num")
  )
)

(define-virtual set_selection
  (of-object "AtkText")
  (return-type "gboolean")
  (parameters
    '("gint" "selection_num")
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-virtual set_caret_offset
  (of-object "AtkText")
  (return-type "gboolean")
  (parameters
    '("gint" "offset")
  )
)

(define-virtual text_changed
  (of-object "AtkText")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("gint" "length")
  )
)

(define-virtual text_caret_moved
  (of-object "AtkText")
  (return-type "none")
  (parameters
    '("gint" "location")
  )
)

(define-virtual text_selection_changed
  (of-object "AtkText")
  (return-type "none")
)

(define-virtual text_attributes_changed
  (of-object "AtkText")
  (return-type "none")
)

(define-virtual get_range_extents
  (of-object "AtkText")
  (return-type "none")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
    '("AtkCoordType" "coord_type")
    '("AtkTextRectangle*" "rect")
  )
)

(define-virtual get_bounded_ranges
  (of-object "AtkText")
  (return-type "AtkTextRange**")
  (parameters
    '("AtkTextRectangle*" "rect")
    '("AtkCoordType" "coord_type")
    '("AtkTextClipType" "x_clip_type")
    '("AtkTextClipType" "y_clip_type")
  )
)



;; From /usr/include/atk-1.0/atk/atkutil.h

(define-function atk_util_get_type
  (c-name "atk_util_get_type")
  (return-type "GType")
)

(define-function add_focus_tracker
  (c-name "atk_add_focus_tracker")
  (return-type "guint")
  (parameters
    '("AtkEventListener" "focus_tracker")
  )
)

(define-function remove_focus_tracker
  (c-name "atk_remove_focus_tracker")
  (return-type "none")
  (parameters
    '("guint" "tracker_id")
  )
)

(define-function focus_tracker_init
  (c-name "atk_focus_tracker_init")
  (return-type "none")
  (parameters
    '("AtkEventListenerInit" "add_function")
  )
)

(define-function focus_tracker_notify
  (c-name "atk_focus_tracker_notify")
  (return-type "none")
  (parameters
    '("AtkObject*" "object")
  )
)

(define-function add_global_event_listener
  (c-name "atk_add_global_event_listener")
  (return-type "guint")
  (parameters
    '("GSignalEmissionHook" "listener")
    '("const-gchar*" "event_type")
  )
)

(define-function remove_global_event_listener
  (c-name "atk_remove_global_event_listener")
  (return-type "none")
  (parameters
    '("guint" "listener_id")
  )
)

(define-function add_key_event_listener
  (c-name "atk_add_key_event_listener")
  (return-type "guint")
  (parameters
    '("AtkKeySnoopFunc" "listener")
    '("gpointer" "data")
  )
)

(define-function remove_key_event_listener
  (c-name "atk_remove_key_event_listener")
  (return-type "none")
  (parameters
    '("guint" "listener_id")
  )
)

(define-function get_root
  (c-name "atk_get_root")
  (return-type "AtkObject*")
)

(define-function get_toolkit_name
  (c-name "atk_get_toolkit_name")
  (return-type "const-gchar*")
)

(define-function get_toolkit_version
  (c-name "atk_get_toolkit_version")
  (return-type "const-gchar*")
)

(define-function get_focus_object
  (c-name "atk_get_focus_object")
  (return-type "AtkObject*")
)

(define-virtual add_global_event_listener
  (of-object "AtkUtil")
  (return-type "guint")
  (parameters
    '("const-gchar*" "event_type")
  )
)

(define-virtual remove_global_event_listener
  (of-object "AtkUtil")
  (return-type "none")
)

(define-virtual add_key_event_listener
  (of-object "AtkUtil")
  (return-type "guint")
  (parameters
    '("gpointer" "data")
  )
)

(define-virtual remove_key_event_listener
  (of-object "AtkUtil")
  (return-type "none")
)



;; From /usr/include/atk-1.0/atk/atkvalue.h

(define-function atk_value_get_type
  (c-name "atk_value_get_type")
  (return-type "GType")
)

(define-method get_current_value
  (of-object "AtkValue")
  (c-name "atk_value_get_current_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method get_maximum_value
  (of-object "AtkValue")
  (c-name "atk_value_get_maximum_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method get_minimum_value
  (of-object "AtkValue")
  (c-name "atk_value_get_minimum_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method set_current_value
  (of-object "AtkValue")
  (c-name "atk_value_set_current_value")
  (return-type "gboolean")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method get_minimum_increment
  (of-object "AtkValue")
  (c-name "atk_value_get_minimum_increment")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-virtual get_current_value
  (of-object "AtkValue")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-virtual get_maximum_value
  (of-object "AtkValue")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-virtual get_minimum_value
  (of-object "AtkValue")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-virtual set_current_value
  (of-object "AtkValue")
  (return-type "gboolean")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-virtual get_minimum_increment
  (of-object "AtkValue")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-function role_get_name
  (c-name "atk_role_get_name")
  (return-type "const-gchar*")
  (parameters
    '("AtkRole" "role")
  )
)

(define-function role_for_name
  (c-name "atk_role_for_name")
  (return-type "AtkRole")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function rectangle_new
  (c-name "atk_rectangle_new")
  (is-constructor-of "AtkRectangle")
  (return-type "AtkRectangle")
)
 
;; -*- scheme -*-
; object definitions ...
(define-object Hyperlink
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkHyperlink")
  (gtype-id "ATK_TYPE_HYPERLINK")
)

(define-object GObjectAccessible
  (in-module "Atk")
  (parent "AtkObject")
  (c-name "AtkGObjectAccessible")
  (gtype-id "ATK_TYPE_GOBJECT_ACCESSIBLE")
)

(define-object Object
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkObject")
  (gtype-id "ATK_TYPE_OBJECT")
)

(define-object NoOpObject
  (in-module "Atk")
  (parent "AtkObject")
  (c-name "AtkNoOpObject")
  (gtype-id "ATK_TYPE_NO_OP_OBJECT")
)

(define-object ObjectFactory
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkObjectFactory")
  (gtype-id "ATK_TYPE_OBJECT_FACTORY")
)

(define-object NoOpObjectFactory
  (in-module "Atk")
  (parent "AtkObjectFactory")
  (c-name "AtkNoOpObjectFactory")
  (gtype-id "ATK_TYPE_NO_OP_OBJECT_FACTORY")
)

(define-object Registry
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkRegistry")
  (gtype-id "ATK_TYPE_REGISTRY")
)

(define-object Relation
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkRelation")
  (gtype-id "ATK_TYPE_RELATION")
)

(define-object RelationSet
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkRelationSet")
  (gtype-id "ATK_TYPE_RELATION_SET")
)

(define-object StateSet
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkStateSet")
  (gtype-id "ATK_TYPE_STATE_SET")
)

(define-object Util
  (in-module "Atk")
  (parent "GObject")
  (c-name "AtkUtil")
  (gtype-id "ATK_TYPE_UTIL")
)

(define-interface Action
  (in-module "Atk")
  (c-name "AtkAction")
  (gtype-id "ATK_TYPE_ACTION")
)

(define-interface Component
  (in-module "Atk")
  (c-name "AtkComponent")
  (gtype-id "ATK_TYPE_COMPONENT")
)

(define-interface Document
  (in-module "Atk")
  (c-name "AtkDocument")
  (gtype-id "ATK_TYPE_DOCUMENT")
)

(define-interface EditableText
  (in-module "Atk")
  (c-name "AtkEditableText")
  (gtype-id "ATK_TYPE_EDITABLE_TEXT")
)

(define-interface HyperlinkImpl
  (in-module "Atk")
  (c-name "AtkHyperlinkImpl")
  (gtype-id "ATK_TYPE_HYPERLINK_IMPL")
)

(define-interface Hypertext
  (in-module "Atk")
  (c-name "AtkHypertext")
  (gtype-id "ATK_TYPE_HYPERTEXT")
)

(define-interface Image
  (in-module "Atk")
  (c-name "AtkImage")
  (gtype-id "ATK_TYPE_IMAGE")
)

(define-interface ImplementorIface
  (in-module "Atk")
  (c-name "AtkImplementorIface")
  (gtype-id "ATK_TYPE_IMPLEMENTOR")
)

(define-interface Selection
  (in-module "Atk")
  (c-name "AtkSelection")
  (gtype-id "ATK_TYPE_SELECTION")
)

(define-interface StreamableContent
  (in-module "Atk")
  (c-name "AtkStreamableContent")
  (gtype-id "ATK_TYPE_STREAMABLE_CONTENT")
)

(define-interface Table
  (in-module "Atk")
  (c-name "AtkTable")
  (gtype-id "ATK_TYPE_TABLE")
)

(define-interface Text
  (in-module "Atk")
  (c-name "AtkText")
  (gtype-id "ATK_TYPE_TEXT")
)

(define-interface Value
  (in-module "Atk")
  (c-name "AtkValue")
  (gtype-id "ATK_TYPE_VALUE")
)

(define-boxed Rectangle
  (in-module "Atk")
  (c-name "AtkRectangle")
  (gtype-id "ATK_TYPE_RECTANGLE")
  (fields
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )   
)

;; Enumerations and flags ...

;; From gdkcairo.h

(define-function cairo_set_source_pixmap
  (c-name "gdk_cairo_set_source_pixmap")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkPixmap*" "pixmap")
    '("double" "pixmap_x")
    '("double" "pixmap_y")
  )
)



;; From gdkcolor.h



;; From gdkcursor.h



;; From gdkdisplay.h

(define-method supports_shapes
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_shapes")
  (return-type "gboolean")
)

(define-method supports_input_shapes
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_input_shapes")
  (return-type "gboolean")
)



;; From gdkdisplaymanager.h



;; From gdkdnd.h



;; From gdkdrawable.h



;; From gdkenumtypes.h



;; From gdkevents.h



;; From gdkfont.h



;; From gdkgc.h



;; From gdk.h



;; From gdki18n.h



;; From gdkimage.h



;; From gdkinput.h



;; From gdkkeys.h



;; From gdkkeysyms.h



;; From gdkpango.h



;; From gdkpixbuf.h



;; From gdkpixmap.h

(define-function pixmap_foreign_new_for_screen
  (c-name "gdk_pixmap_foreign_new_for_screen")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkScreen*" "screen")
    '("GdkNativeWindow" "anid")
    '("gint" "width")
    '("gint" "height")
    '("gint" "depth")
  )
)



;; From gdkprivate.h



;; From gdkproperty.h

(define-function atom_intern_static_string
  (c-name "gdk_atom_intern_static_string")
  (return-type "GdkAtom")
  (parameters
    '("const-gchar*" "atom_name")
  )
)



;; From gdkregion.h



;; From gdkrgb.h



;; From gdkscreen.h

(define-method is_composited
  (of-object "GdkScreen")
  (c-name "gdk_screen_is_composited")
  (return-type "gboolean")
)

(define-method set_font_options
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_font_options")
  (return-type "none")
  (parameters
    '("const-cairo_font_options_t*" "options")
  )
)

(define-method get_font_options
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_font_options")
  (return-type "const-cairo_font_options_t*")
)

(define-method set_resolution
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_resolution")
  (return-type "none")
  (parameters
    '("gdouble" "dpi")
  )
)

(define-method get_resolution
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_resolution")
  (return-type "gdouble")
)

(define-method get_active_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_active_window")
  (return-type "GdkWindow*")
)

(define-method get_window_stack
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_window_stack")
  (return-type "GList*")
)

(define-virtual composited_changed
  (of-object "GdkScreen")
  (return-type "none")
)



;; From gdkselection.h



;; From gdkspawn.h



;; From gdktypes.h



;; From gdkvisual.h



;; From gdkwindow.h

(define-method input_shape_combine_mask
  (of-object "GdkWindow")
  (c-name "gdk_window_input_shape_combine_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "mask")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method input_shape_combine_region
  (of-object "GdkWindow")
  (c-name "gdk_window_input_shape_combine_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "shape_region")
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-method set_child_input_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_set_child_input_shapes")
  (return-type "none")
)

(define-method merge_child_input_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_merge_child_input_shapes")
  (return-type "none")
)

(define-method get_type_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_get_type_hint")
  (return-type "GdkWindowTypeHint")
)



;; From gdkcolor.h

(define-method to_string
  (of-object "GdkColor")
  (c-name "gdk_color_to_string")
  (return-type "gchar*")
)



;; From gdkdisplay.h

(define-method supports_composite
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_composite")
  (return-type "gboolean")
)



;; From gdkevents.h

(define-function event_request_motions
  (c-name "gdk_event_request_motions")
  (return-type "none")
  (parameters
    '("GdkEventMotion*" "event")
  )
)



;; From gdkkeys.h

(define-method have_bidi_layouts
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_have_bidi_layouts")
  (return-type "gboolean")
)



;; From gdkpango.h

(define-function gdk_pango_attr_emboss_color_new
  (c-name "gdk_pango_attr_emboss_color_new")
  (is-constructor-of "GdkPangoAttrEmbossColor")
  (return-type "PangoAttribute*")
  (parameters
    '("const-GdkColor*" "color")
  )
)



;; From gdkwindow.h

(define-method set_composited
  (of-object "GdkWindow")
  (c-name "gdk_window_set_composited")
  (return-type "none")
  (parameters
    '("gboolean" "composited")
  )
)

(define-method set_startup_id
  (of-object "GdkWindow")
  (c-name "gdk_window_set_startup_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)

(define-method beep
  (of-object "GdkWindow")
  (c-name "gdk_window_beep")
  (return-type "none")
)

(define-method set_opacity
  (of-object "GdkWindow")
  (c-name "gdk_window_set_opacity")
  (return-type "none")
  (parameters
    '("gdouble" "opacity")
  )
)


(ifdef GDK_TARGET_X11

;; From gdkx.h

(define-function x11_display_get_startup_notification_id
  (c-name "gdk_x11_display_get_startup_notification_id")
  (return-type "const-gchar*")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-function x11_display_broadcast_startup_message
  (c-name "gdk_x11_display_broadcast_startup_message")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
    '("const-char*" "message_type")
  )
  (varargs #t)
)

)

;; From gdk.h

(define-function threads_add_idle_full
  (c-name "gdk_threads_add_idle_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function threads_add_idle
  (c-name "gdk_threads_add_idle")
  (return-type "guint")
  (parameters
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

(define-function threads_add_timeout_full
  (c-name "gdk_threads_add_timeout_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function threads_add_timeout
  (c-name "gdk_threads_add_timeout")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

(define-function notify_startup_complete_with_id
  (c-name "gdk_notify_startup_complete_with_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)
;; -*- scheme -*-
; object definitions ...
;; Enumerations and flags ...


;; From gdkapplaunchcontext.h

(define-function gdk_app_launch_context_get_type
  (c-name "gdk_app_launch_context_get_type")
  (return-type "GType")
)

(define-function gdk_app_launch_context_new
  (c-name "gdk_app_launch_context_new")
  (is-constructor-of "GdkAppLaunchContext")
  (return-type "GdkAppLaunchContext*")
)

(define-method set_display
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-method set_screen
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_desktop
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_desktop")
  (return-type "none")
  (parameters
    '("gint" "desktop")
  )
)

(define-method set_timestamp
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_timestamp")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method set_icon
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_icon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon" (null-ok))
  )
)

(define-method set_icon_name
  (of-object "GdkAppLaunchContext")
  (c-name "gdk_app_launch_context_set_icon_name")
  (return-type "none")
  (parameters
    '("const-char*" "icon_name" (null-ok))
  )
)



;; From gdkscreen.h

(define-method get_monitor_width_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_width_mm")
  (return-type "gint")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method get_monitor_height_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_height_mm")
  (return-type "gint")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method get_monitor_plug_name
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_plug_name")
  (return-type "gchar*")
  (parameters
    '("gint" "monitor_num")
  )
)



;; From gdkwindow.h

(define-method redirect_to_drawable
  (of-object "GdkWindow")
  (c-name "gdk_window_redirect_to_drawable")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint" "dest_x")
    '("gint" "dest_y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method remove_redirection
  (of-object "GdkWindow")
  (c-name "gdk_window_remove_redirection")
  (return-type "none")
)



(ifdef GDK_TARGET_X11
 
;; From gdkx.h

(define-function x11_screen_get_monitor_output
  (c-name "gdk_x11_screen_get_monitor_output")
  (return-type "XID")
  (parameters
    '("GdkScreen*" "screen")
    '("gint" "monitor_num")
  )
)

)
;; -*- scheme -*-
; object definitions ...



;; From gdkkeys.h

(define-method get_caps_lock_state
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_caps_lock_state")
  (return-type "gboolean")
)

;; -*- scheme -*-

(include "gdk-base-types.defs")

;; From /opt/gtk2/include/gtk-2.0/gdk/gdk.h

(define-function notify_startup_complete
  (c-name "gdk_notify_startup_complete")
  (return-type "none")
)

(define-function get_display_arg_name
  (c-name "gdk_get_display_arg_name")
  (return-type "const-gchar*")
)

(define-function get_program_class
  (c-name "gdk_get_program_class")
  (return-type "const-gchar*")
)

(define-function set_program_class
  (c-name "gdk_set_program_class")
  (parameters
    '("const-gchar*" "program_class")
  )
)

(define-function get_display
  (c-name "gdk_get_display")
  (return-type "const-gchar*")
)

(define-function pointer_grab
  (c-name "gdk_pointer_grab")
  (return-type "GdkGrabStatus")
  (parameters
    '("GdkWindow*" "window")
    '("gboolean" "owner_events" (null-ok) (default "FALSE"))
    '("GdkEventMask" "event_mask" (null-ok) (default "0"))
    '("GdkWindow*" "confine_to" (null-ok) (default "NULL"))
    '("GdkCursor*" "cursor" (null-ok) (default "NULL"))
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-function pointer_ungrab
  (c-name "gdk_pointer_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-function keyboard_grab
  (c-name "gdk_keyboard_grab")
  (return-type "GdkGrabStatus")
  (parameters
    '("GdkWindow*" "window")
    '("gboolean" "owner_events" (null-ok) (default "FALSE"))
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-function keyboard_ungrab
  (c-name "gdk_keyboard_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-function pointer_is_grabbed
  (c-name "gdk_pointer_is_grabbed")
  (return-type "gboolean")
)

(define-function screen_width
  (c-name "gdk_screen_width")
  (return-type "gint")
)

(define-function screen_height
  (c-name "gdk_screen_height")
  (return-type "gint")
)

(define-function screen_width_mm
  (c-name "gdk_screen_width_mm")
  (return-type "gint")
)

(define-function screen_height_mm
  (c-name "gdk_screen_height_mm")
  (return-type "gint")
)

(define-function flush
  (c-name "gdk_flush")
  (return-type "none")
)

(define-function beep
  (c-name "gdk_beep")
  (return-type "none")
)

(define-function set_double_click_time
  (c-name "gdk_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

(define-function threads_enter
  (c-name "gdk_threads_enter")
  (return-type "none")
)

(define-function threads_leave
  (c-name "gdk_threads_leave")
  (return-type "none")
)

(define-function threads_init
  (c-name "gdk_threads_init")
  (return-type "none")
)

(define-function parse_args
  (c-name "gdk_parse_args")
  (return-type "none")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function init
  (c-name "gdk_init")
  (return-type "none")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function init_check
  (c-name "gdk_init_check")
  (return-type "gboolean")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function add_option_entries_libgtk_only
  (c-name "gdk_add_option_entries_libgtk_only")
  (return-type "none")
  (parameters
    '("GOptionGroup*" "group")
  )
)

(define-function pre_parse_libgtk_only
  (c-name "gdk_pre_parse_libgtk_only")
  (return-type "none")
)

(define-function exit
  (c-name "gdk_exit")
  (return-type "none")
  (parameters
    '("gint" "error_code")
  )
)

(define-function set_locale
  (c-name "gdk_set_locale")
  (return-type "gchar*")
)

(define-function error_trap_push
  (c-name "gdk_error_trap_push")
  (return-type "none")
)

(define-function error_trap_pop
  (c-name "gdk_error_trap_pop")
  (return-type "gint")
)

(define-function set_use_xshm
  (c-name "gdk_set_use_xshm")
  (return-type "none")
  (parameters
    '("gboolean" "use_xshm")
  )
)

(define-function get_use_xshm
  (c-name "gdk_get_use_xshm")
  (return-type "gboolean")
)

(define-function input_add_full
  (c-name "gdk_input_add_full")
  (return-type "gint")
  (parameters
    '("gint" "source")
    '("GdkInputCondition" "condition")
    '("GdkInputFunction" "function")
    '("gpointer" "data")
    '("GdkDestroyNotify" "destroy")
  )
)

(define-function input_add
  (c-name "gdk_input_add")
  (return-type "gint")
  (parameters
    '("gint" "source")
    '("GdkInputCondition" "condition")
    '("GdkInputFunction" "function")
    '("gpointer" "data")
  )
)

(define-function input_remove
  (c-name "gdk_input_remove")
  (return-type "none")
  (parameters
    '("gint" "tag")
  )
)

(define-function pointer_grab_info_libgtk_only
  (c-name "gdk_pointer_grab_info_libgtk_only")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow**" "grab_window")
    '("gboolean*" "owner_events")
  )
)

(define-function keyboard_grab_info_libgtk_only
  (c-name "gdk_keyboard_grab_info_libgtk_only")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow**" "grab_window")
    '("gboolean*" "owner_events")
  )
)

(define-function rectangle_get_type
  (c-name "gdk_rectangle_get_type")
  (return-type "GType")
)

(define-function wcstombs
  (c-name "gdk_wcstombs")
  (return-type "gchar*")
  (parameters
    '("const-GdkWChar*" "src")
  )
)

(define-function mbstowcs
  (c-name "gdk_mbstowcs")
  (return-type "gint")
  (parameters
    '("GdkWChar*" "dest")
    '("const-gchar*" "src")
    '("gint" "dest_max")
  )
)

(define-method send_client_message
  (of-object "GdkEvent")
  (c-name "gdk_event_send_client_message")
  (return-type "gboolean")
  (parameters
    '("GdkNativeWindow" "winid")
  )
)

(define-method send_clientmessage_toall
  (of-object "GdkEvent")
  (c-name "gdk_event_send_clientmessage_toall")
  (return-type "none")
)

(define-function event_send_client_message_for_display
  (c-name "gdk_event_send_client_message_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkEvent*" "event")
    '("GdkNativeWindow" "winid")
  )
)

(define-function threads_set_lock_functions
  (c-name "gdk_threads_set_lock_functions")
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkcolor.h

(define-method ref
  (of-object "GdkColormap")
  (c-name "gdk_colormap_ref")
  (return-type "GdkColormap*")
)

(define-method unref
  (of-object "GdkColormap")
  (c-name "gdk_colormap_unref")
  (return-type "none")
)

(define-method change
  (of-object "GdkColormap")
  (deprecated "deprecated")
  (c-name "gdk_colormap_change")
  (return-type "none")
  (parameters
    '("gint" "ncolors")
  )
)

(define-method alloc_colors
  (of-object "GdkColormap")
  (c-name "gdk_colormap_alloc_colors")
  (return-type "gint")
  (parameters
    '("GdkColor*" "colors")
    '("gint" "ncolors")
    '("gboolean" "writeable")
    '("gboolean" "best_match")
    '("gboolean*" "success")
  )
)

(define-method free_colors
  (of-object "GdkColormap")
  (c-name "gdk_colormap_free_colors")
  (return-type "none")
  (parameters
    '("GdkColor*" "colors")
    '("gint" "ncolors")
  )
)

(define-method copy
  (of-object "GdkColor")
  (c-name "gdk_color_copy")
  (return-type "GdkColor*")
)

(define-method free
  (of-object "GdkColor")
  (c-name "gdk_color_free")
  (return-type "none")
)

(define-method hash
  (of-object "GdkColor")
  (c-name "gdk_color_hash")
  (return-type "guint")
)

(define-method equal
  (of-object "GdkColor")
  (c-name "gdk_color_equal")
  (return-type "gboolean")
  (parameters
    '("const-GdkColor*" "colorb")
  )
)

(define-function color_get_type
  (c-name "gdk_color_get_type")
  (return-type "GType")
)

(define-function colors_store
  (c-name "gdk_colors_store")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkColor*" "colors")
    '("gint" "ncolors")
  )
)

(define-function colors_alloc
  (c-name "gdk_colors_alloc")
  (return-type "gint")
  (parameters
    '("GdkColormap*" "colormap")
    '("gboolean" "contiguous")
    '("gulong*" "planes")
    '("gint" "nplanes")
    '("gulong*" "pixels")
    '("gint" "npixels")
  )
)

(define-function colors_free
  (c-name "gdk_colors_free")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("gulong*" "pixels")
    '("gint" "npixels")
    '("gulong" "planes")
  )
)

(define-function color_new
  (c-name "gdk_color_new")
  (is-constructor-of "GdkColor")
  (return-type "GdkColor")
)

(define-function colormap_get_type
  (c-name "gdk_colormap_get_type")
  (return-type "GType")
)

(define-function colormap_new
  (c-name "gdk_colormap_new")
  (is-constructor-of GdkColormap)
  (return-type "GdkColormap*")
  (parameters
    '("GdkVisual*" "visual")
    '("gboolean" "allocate")
  )
)

(define-function colormap_get_system
  (c-name "gdk_colormap_get_system")
  (return-type "GdkColormap*")
)

(define-function colormap_get_system_size
  (deprecated "deprecated")
  (c-name "gdk_colormap_get_system_size")
  (return-type "gint")
)

(define-method alloc_color
  (of-object "GdkColormap")
  (c-name "gdk_colormap_alloc_color")
  (return-type "gboolean")
  (parameters
    '("GdkColor*" "color")
    '("gboolean" "writeable")
    '("gboolean" "best_match")
  )
)

(define-method query_color
  (of-object "GdkColormap")
  (c-name "gdk_colormap_query_color")
  (parameters
   '("gulong" "pixel")
   '("GdkColor*" "color")
  )
)

(define-method get_visual
  (of-object "GdkColormap")
  (c-name "gdk_colormap_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_screen
  (of-object "GdkColormap")
  (c-name "gdk_colormap_get_screen")
  (return-type "GdkScreen*")
)

(define-function color_parse
  (c-name "gdk_color_parse")
  (return-type "gint")
  (parameters
    '("const-gchar*" "spec")
    '("GdkColor*" "color")
  )
)

(define-method white
  (deprecated "deprecated")
  (of-object "GdkColormap")
  (c-name "gdk_color_white")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method black
  (deprecated "deprecated")
  (of-object "GdkColormap")
  (c-name "gdk_color_black")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method alloc
  (deprecated "deprecated")
  (of-object "GdkColormap")
  (c-name "gdk_color_alloc")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-function color_change
  (deprecated "deprecated")
  (c-name "gdk_color_change")
  (return-type "gint")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkColor*" "color")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkcursor.h

;; From gdkcursor.h

(define-function cursor_get_type
  (c-name "gdk_cursor_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GdkCursor")
  (c-name "gdk_cursor_ref")
  (return-type "GdkCursor*")
)

(define-method unref
  (of-object "GdkCursor")
  (c-name "gdk_cursor_unref")
  (return-type "none")
)

(define-function cursor_new_from_name
  (c-name "gdk_cursor_new_from_name")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "name")
  )
)

(define-method get_image
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_image")
  (return-type "GdkPixbuf*")
)


(define-function cursor_new
  (is-constructor-of GdkCursor)
  (c-name "gdk_cursor_new")
  (return-type "GdkCursor*")
  (parameters
    '("GdkCursorType" "cursor_type")
  )
)

(define-function cursor_new_for_display
  (is-constructor-of GdkCursor)
  (c-name "gdk_cursor_new_for_display")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkCursorType" "cursor_type")
  )
)

(define-function cursor_new_from_pixmap
  (is-constructor-of GdkCursor)
  (c-name "gdk_cursor_new_from_pixmap")
  (return-type "GdkCursor*")
  (parameters
    '("GdkPixmap*" "source")
    '("GdkPixmap*" "mask")
    '("GdkColor*" "fg")
    '("GdkColor*" "bg")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-function cursor_new_from_pixbuf
  (is-constructor-of GdkCursor)
  (c-name "gdk_cursor_new_from_pixbuf")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkPixbuf*" "source")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_display
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_display")
  (return-type "GdkDisplay*")
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkdisplay.h

(define-function gdk_display_get_type
  (c-name "gdk_display_get_type")
  (return-type "GType")
)

(define-function display_open
  (is-constructor-of "GdkDisplay")
  (c-name "gdk_display_open")
  (return-type "GdkDisplay*")
  (parameters
    '("const-gchar*" "display_name" (null-ok))
  )
)

(define-method get_name
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_name")
  (return-type "const-gchar*")
)

(define-method get_n_screens
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_n_screens")
  (return-type "gint")
)

(define-method get_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_screen")
  (return-type "GdkScreen*")
  (parameters
    '("gint" "screen_num")
  )
)

(define-method get_default_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_screen")
  (return-type "GdkScreen*")
)

(define-method pointer_ungrab
  (of-object "GdkDisplay")
  (c-name "gdk_display_pointer_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time_" (default "GDK_CURRENT_TIME"))
  )
)

(define-method keyboard_ungrab
  (of-object "GdkDisplay")
  (c-name "gdk_display_keyboard_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time_" (default "GDK_CURRENT_TIME"))
  )
)

(define-method pointer_is_grabbed
  (of-object "GdkDisplay")
  (c-name "gdk_display_pointer_is_grabbed")
  (return-type "gboolean")
)

(define-method beep
  (of-object "GdkDisplay")
  (c-name "gdk_display_beep")
  (return-type "none")
)

(define-method sync
  (of-object "GdkDisplay")
  (c-name "gdk_display_sync")
  (return-type "none")
)

(define-method close
  (of-object "GdkDisplay")
  (c-name "gdk_display_close")
  (return-type "none")
)

(define-method list_devices
  (of-object "GdkDisplay")
  (c-name "gdk_display_list_devices")
  (return-type "GList*")
)

(define-method get_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_event")
  (return-type "GdkEvent*")
)

(define-method peek_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_peek_event")
  (return-type "GdkEvent*")
)

(define-method put_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_put_event")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method add_client_message_filter
  (of-object "GdkDisplay")
  (c-name "gdk_display_add_client_message_filter")
  (return-type "none")
  (parameters
    '("GdkAtom" "message_type")
    '("GdkFilterFunc" "func")
    '("gpointer" "data")
  )
)

(define-method set_double_click_time
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

(define-function display_get_default
  (c-name "gdk_display_get_default")
  (return-type "GdkDisplay*")
)

(define-method get_core_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_core_pointer")
  (return-type "GdkDevice*")
)

(define-method get_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_pointer")
  (return-type "none")
  (parameters
    '("GdkScreen**" "screen")
    '("gint*" "x")
    '("gint*" "y")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_window_at_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_window_at_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "win_x")
    '("gint*" "win_y")
  )
)

(define-method set_pointer_hooks
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_pointer_hooks")
  (return-type "GdkDisplayPointerHooks*")
  (parameters
    '("const-GdkDisplayPointerHooks*" "new_hooks")
  )
)

(define-method store_clipboard
  (of-object "GdkDisplay")
  (c-name "gdk_display_store_clipboard")
  (return-type "none")
  (parameters
    '("GdkWindow*" "clipboard_window")
    '("guint32" "time_")
    '("GdkAtom*" "targets")
    '("gint" "n_targets")
  )
)

(define-method supports_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_selection_notification")
  (return-type "gboolean")
)

(define-method request_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_request_selection_notification")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-method supports_clipboard_persistence
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_clipboard_persistence")
  (return-type "gboolean")
)

(define-method flush
  (of-object "GdkDisplay")
  (c-name "gdk_display_flush")
  (return-type "none")
)
 
(define-method set_double_click_distance
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_distance")
  (return-type "none")
  (parameters
    '("guint" "distance")
  )
)
 
(define-method supports_cursor_alpha
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_alpha")
  (return-type "gboolean")
)
 
(define-method supports_cursor_color
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_color")
  (return-type "gboolean")
)
 
(define-method get_default_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_cursor_size")
  (return-type "guint")
)

(define-method get_maximal_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_maximal_cursor_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)
(define-method get_default_group
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_group")
  (return-type "GdkWindow*")
)

(define-method warp_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_warp_pointer")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-virtual get_display_name
  (of-object "GdkDisplay")
  (return-type "const-gchar*")
)

(define-virtual get_n_screens
  (of-object "GdkDisplay")
  (return-type "gint")
)

(define-virtual get_screen
  (of-object "GdkDisplay")
  (return-type "GdkScreen*")
  (parameters
    '("gint" "screen_num")
  )
)

(define-virtual get_default_screen
  (of-object "GdkDisplay")
  (return-type "GdkScreen*")
)

(define-virtual closed
  (of-object "GdkDisplay")
  (return-type "none")
  (parameters
    '("gboolean" "is_error")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkdisplaymanager.h

(define-function gdk_display_manager_get_type
  (c-name "gdk_display_manager_get_type")
  (return-type "GType")
)

(define-function display_manager_get
  (c-name "gdk_display_manager_get")
  (return-type "GdkDisplayManager*")
)

(define-method get_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_get_default_display")
  (return-type "GdkDisplay*")
)

(define-method set_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_set_default_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-method list_displays
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_list_displays")
  (return-type "GSList*")
)

(define-virtual display_opened
  (of-object "GdkDisplayManager")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)

;;

(define-function display_open_default_libgtk_only
  (c-name "gdk_display_open_default_libgtk_only")
  (return-type "GdkDisplay*")
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkdnd.h

(define-function drag_context_get_type
  (c-name "gdk_drag_context_get_type")
  (return-type "GType")
)

(define-function drag_context_new
  (is-constructor-of GdkDragContext)
  (c-name "gdk_drag_context_new")
  (return-type "GdkDragContext*")
)

(define-method ref
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_ref")
  (return-type "none")
)

(define-method unref
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_unref")
  (return-type "none")
)

(define-method drag_status
  (of-object "GdkDragContext")
  (c-name "gdk_drag_status")
  (return-type "none")
  (parameters
    '("GdkDragAction" "action")
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-method drop_reply
  (of-object "GdkDragContext")
  (c-name "gdk_drop_reply")
  (return-type "none")
  (parameters
    '("gboolean" "ok")
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-method drop_finish
  (of-object "GdkDragContext")
  (c-name "gdk_drop_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success")
    '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-method drag_get_selection
  (of-object "GdkDragContext")
  (c-name "gdk_drag_get_selection")
  (return-type "GdkAtom")
)

(define-method drag_begin
  (of-object "GdkWindow")
  (c-name "gdk_drag_begin")
  (return-type "GdkDragContext*")
  (parameters
    '("GList*" "targets")
  )
)

(define-function drag_get_protocol
  (c-name "gdk_drag_get_protocol")
  (return-type "guint32")
  (parameters
    '("guint32" "xid")
    '("GdkDragProtocol*" "protocol")
  )
)

(define-method drag_find_window
  (of-object "GdkDragContext")
  (c-name "gdk_drag_find_window")
  (return-type "none")
  (parameters
    '("GdkWindow*" "drag_window")
    '("gint" "x_root")
    '("gint" "y_root")
    '("GdkWindow**" "dest_window")
    '("GdkDragProtocol*" "protocol")
  )
)

(define-function drag_get_protocol_for_display
  (c-name "gdk_drag_get_protocol_for_display")
  (return-type "guint32")
  (parameters
    '("GdkDisplay*" "display")
    '("guint32" "xid")
    '("GdkDragProtocol*" "protocol")
  )
)

(define-method drag_find_window_for_screen
  (of-object "GdkDragContext")
  (c-name "gdk_drag_find_window_for_screen")
  (return-type "none")
  (parameters
    '("GdkWindow*" "drag_window")
    '("GdkScreen*" "screen")
    '("gint" "x_root")
    '("gint" "y_root")
    '("GdkWindow**" "dest_window")
    '("GdkDragProtocol*" "protocol")
  )
)

(define-method drag_motion
  (of-object "GdkDragContext")
  (c-name "gdk_drag_motion")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "dest_window")
    '("GdkDragProtocol" "protocol")
    '("gint" "x_root")
    '("gint" "y_root")
    '("GdkDragAction" "suggested_action")
    '("GdkDragAction" "possible_actions")
    '("guint32" "time")
  )
)

(define-method drag_drop
  (of-object "GdkDragContext")
  (c-name "gdk_drag_drop")
  (return-type "none")
  (parameters
    '("guint32" "time")
  )
)

(define-method drag_abort
  (of-object "GdkDragContext")
  (c-name "gdk_drag_abort")
  (return-type "none")
  (parameters
    '("guint32" "time")
  )
)

(define-method drag_drop_succeeded
  (of-object "GdkDragContext")
  (c-name "gdk_drag_drop_succeeded")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkdrawable.h

(define-function gdk_drawable_get_type
  (c-name "gdk_drawable_get_type")
  (return-type "GType")
)

(define-method copy_to_image
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_copy_to_image")
  (return-type "GdkImage*")
  (parameters
    '("GdkImage*" "image")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint" "dest_x")
    '("gint" "dest_y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method set_data
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_set_data")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_func")
  )
)

(define-method get_data
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_data")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_size
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method set_colormap
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_colormap
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_colormap")
  (return-type "GdkColormap*")
)

(define-method get_visual
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_depth
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_depth")
  (return-type "gint")
)

(define-method get_screen
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_screen")
  (return-type "GdkScreen*")
)

(define-method get_display
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_display")
  (return-type "GdkDisplay*")
)

(define-method ref
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_ref")
  (return-type "GdkDrawable*")
)

(define-method unref
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_unref")
  (return-type "none")
)

(define-method draw_point
  (of-object "GdkDrawable")
  (c-name "gdk_draw_point")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method draw_line
  (of-object "GdkDrawable")
  (c-name "gdk_draw_line")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x1")
    '("gint" "y1")
    '("gint" "x2")
    '("gint" "y2")
  )
)

(define-method draw_rectangle
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rectangle")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method draw_arc
  (of-object "GdkDrawable")
  (c-name "gdk_draw_arc")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint" "angle1")
    '("gint" "angle2")
  )
)

(define-method draw_polygon
  (of-object "GdkDrawable")
  (c-name "gdk_draw_polygon")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-method draw_string
  (deprecated "use GdkDrawable.draw_layout")
  (of-object "GdkDrawable")
  (c-name "gdk_draw_string")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "string")
  )
)

(define-method draw_text
  (deprecated "use GdkDrawable.draw_layout")
  (of-object "GdkDrawable")
  (c-name "gdk_draw_text")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "text")
    '("gint" "text_length")
  )
)

(define-method draw_text_wc
  (deprecated "use GdkDrawable.draw_layout")
  (of-object "GdkDrawable")
  (c-name "gdk_draw_text_wc")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
  )
)

(define-method draw_drawable
  (of-object "GdkDrawable")
  (c-name "gdk_draw_drawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkDrawable*" "src")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method draw_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkImage*" "image")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method draw_points
  (of-object "GdkDrawable")
  (c-name "gdk_draw_points")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-method draw_segments
  (of-object "GdkDrawable")
  (c-name "gdk_draw_segments")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkSegment*" "segs")
    '("gint" "nsegs")
  )
)

(define-method draw_lines
  (of-object "GdkDrawable")
  (c-name "gdk_draw_lines")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-method draw_pixbuf
  (of-object "GdkDrawable")
  (c-name "gdk_draw_pixbuf")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (null-ok))
    '("GdkPixbuf*" "pixbuf")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint" "dest_x")
    '("gint" "dest_y")
    '("gint" "width" (default "-1"))
    '("gint" "height" (default "-1"))
    '("GdkRgbDither" "dither" (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (default "0"))
    '("gint" "y_dither" (default "0"))
  )
)

(define-method draw_glyphs
  (of-object "GdkDrawable")
  (c-name "gdk_draw_glyphs")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-method draw_layout_line
  (of-object "GdkDrawable")
  (c-name "gdk_draw_layout_line")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayoutLine*" "line")
  )
)

(define-method draw_layout
  (of-object "GdkDrawable")
  (c-name "gdk_draw_layout")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")
  )
)

(define-function draw_layout_line_with_colors
  (c-name "gdk_draw_layout_line_with_colors")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayoutLine*" "line")
    '("GdkColor*" "foreground")
    '("GdkColor*" "background")
  )
)

(define-function draw_layout_with_colors
  (deprecated "use gtk.gdk.Drawable.draw_layout instead")
  (c-name "gdk_draw_layout_with_colors")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")
    '("GdkColor*" "foreground")
    '("GdkColor*" "background")
  )
)

(define-function draw_glyphs_transformed
  (c-name "gdk_draw_glyphs_transformed")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("PangoMatrix*" "matrix")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-function draw_trapezoids
  (c-name "gdk_draw_trapezoids")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("GdkTrapezoid*" "trapezoids")
    '("gint" "n_trapezoids")
  )
)
(define-method get_image
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_image")
  (return-type "GdkImage*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (caller-owns-return #t)
)

(define-method get_clip_region
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_clip_region")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
)

(define-method get_visible_region
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_visible_region")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
)

(define-virtual create_gc
  (of-object "GdkDrawable")
  (return-type "GdkGC*")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "mask")
  )
)

(define-virtual draw_rectangle
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual draw_arc
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint" "angle1")
    '("gint" "angle2")
  )
)

(define-virtual draw_polygon
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_text
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "text")
    '("gint" "text_length")
  )
)

(define-virtual draw_text_wc
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
  )
)

(define-virtual draw_drawable
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkDrawable*" "src")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual draw_points
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_segments
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkSegment*" "segs")
    '("gint" "nsegs")
  )
)

(define-virtual draw_lines
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_glyphs
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-virtual draw_image
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkImage*" "image")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual get_depth
  (of-object "GdkDrawable")
  (return-type "gint")
)

(define-virtual get_size
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-virtual set_colormap
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkColormap*" "cmap")
  )
)

(define-virtual get_colormap
  (of-object "GdkDrawable")
  (return-type "GdkColormap*")
)

(define-virtual get_visual
  (of-object "GdkDrawable")
  (return-type "GdkVisual*")
)

(define-virtual get_screen
  (of-object "GdkDrawable")
  (return-type "GdkScreen*")
)

(define-virtual get_image
  (of-object "GdkDrawable")
  (return-type "GdkImage*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual get_clip_region
  (of-object "GdkDrawable")
  (return-type "GdkRegion*")
)

(define-virtual get_visible_region
  (of-object "GdkDrawable")
  (return-type "GdkRegion*")
)

(define-virtual get_composite_drawable
  (of-object "GdkDrawable")
  (return-type "GdkDrawable*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint*" "composite_x_offset")
    '("gint*" "composite_y_offset")
  )
)

(define-virtual draw_pixbuf
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPixbuf*" "pixbuf")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint" "dest_x")
    '("gint" "dest_y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dither")
    '("gint" "x_dither")
    '("gint" "y_dither")
  )
)

(define-virtual draw_glyphs_transformed
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("PangoMatrix*" "matrix")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-virtual draw_trapezoids
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkTrapezoid*" "trapezoids")
    '("gint" "n_trapezoids")
  )
)

(define-virtual ref_cairo_surface
  (of-object "GdkDrawable")
  (return-type "cairo_surface_t*")
)




;; From /opt/gtk2/include/gtk-2.0/gdk/gdkevents.h

(define-function gdk_event_get_type
  (c-name "gdk_event_get_type")
  (return-type "GType")
)

(define-function events_pending
  (c-name "gdk_events_pending")
  (return-type "gboolean")
)

(define-function event_get
  (c-name "gdk_event_get")
  (return-type "GdkEvent*")
)

(define-function event_peek
  (c-name "gdk_event_peek")
  (return-type "GdkEvent*")
)

(define-function event_get_graphics_expose
  (c-name "gdk_event_get_graphics_expose")
  (return-type "GdkEvent*")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method put
  (of-object "GdkEvent")
  (c-name "gdk_event_put")
  (return-type "none")
)

(define-function event_new
  (is-constructor-of "GdkEvent")
  (c-name "gdk_event_new")
  (return-type "GdkEvent*")
  (parameters
    '("GdkEventType" "type")
  )
)

(define-method copy
  (of-object "GdkEvent")
  (c-name "gdk_event_copy")
  (return-type "GdkEvent*")
)

(define-method free
  (of-object "GdkEvent")
  (c-name "gdk_event_free")
  (return-type "none")
)

(define-method get_time
  (of-object "GdkEvent")
  (c-name "gdk_event_get_time")
  (return-type "guint32")
)

(define-method get_state
  (of-object "GdkEvent")
  (c-name "gdk_event_get_state")
  (return-type "gboolean")
  (parameters
    '("GdkModifierType*" "state")
  )
)

(define-method get_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_win")
    '("gdouble*" "y_win")
  )
)

(define-method get_root_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_root_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_root")
    '("gdouble*" "y_root")
  )
)

(define-method get_axis
  (of-object "GdkEvent")
  (c-name "gdk_event_get_axis")
  (return-type "gboolean")
  (parameters
    '("GdkAxisUse" "axis_use")
    '("gdouble*" "value")
  )
)

(define-function event_handler_set
  (c-name "gdk_event_handler_set")
  (return-type "none")
  (parameters
    '("GdkEventFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_get_screen")
  (return-type "GdkScreen*")
)

(define-function set_show_events
  (c-name "gdk_set_show_events")
  (return-type "none")
  (parameters
    '("gboolean" "show_events")
  )
)

(define-function get_show_events
  (c-name "gdk_get_show_events")
  (return-type "gboolean")
)

(define-function add_client_message_filter
  (c-name "gdk_add_client_message_filter")
  (return-type "none")
  (parameters
    '("GdkAtom" "message_type")
    '("GdkFilterFunc" "func")
    '("gpointer" "data")
  )
)

(define-function setting_get
  (c-name "gdk_setting_get")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
    '("GValue*" "value")
  )
)




;; From /opt/gtk2/include/gtk-2.0/gdk/gdkfont.h

(define-function font_get_type
  (c-name "gdk_font_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GdkFont")
  (c-name "gdk_font_ref")
  (return-type "GdkFont*")
)

(define-method unref
  (of-object "GdkFont")
  (c-name "gdk_font_unref")
  (return-type "none")
)

(define-method equal
  (of-object "GdkFont")
  (c-name "gdk_font_equal")
  (return-type "gboolean")
  (parameters
    '("const-GdkFont*" "fontb")
  )
)

(define-method id
  (of-object "GdkFont")
  (c-name "gdk_font_id")
  (return-type "gint")
)

(define-function font_load_for_display
  (c-name "gdk_font_load_for_display")
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "font_name")
  )
)

(define-function fontset_load_for_display
  (c-name "gdk_fontset_load_for_display")
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "fontset_name")
  )
)

(define-function font_from_description_for_display
  (c-name "gdk_font_from_description_for_display")
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display")
    '("PangoFontDescription*" "font_desc")
  )
)

(define-function font_load
  (is-constructor-of GdkFont)
  (c-name "gdk_font_load")
  (return-type "GdkFont*")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-function fontset_load
  (c-name "gdk_fontset_load")
  (return-type "GdkFont*")
  (parameters
    '("const-gchar*" "fontset_name")
  )
)

(define-function font_from_description
  (c-name "gdk_font_from_description")
  (return-type "GdkFont*")
  (parameters
    '("PangoFontDescription*" "font_desc")
  )
)

(define-method string_width
  (of-object "GdkFont")
  (c-name "gdk_string_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method width
  (of-object "GdkFont")
  (c-name "gdk_text_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method text_width_wc
  (of-object "GdkFont")
  (c-name "gdk_text_width_wc")
  (return-type "gint")
  (parameters
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
  )
)

(define-method char_width
  (of-object "GdkFont")
  (c-name "gdk_char_width")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method char_width_wc
  (of-object "GdkFont")
  (c-name "gdk_char_width_wc")
  (return-type "gint")
  (parameters
    '("GdkWChar" "character")
  )
)

(define-method string_measure
  (of-object "GdkFont")
  (c-name "gdk_string_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method measure
  (of-object "GdkFont")
  (c-name "gdk_text_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method char_measure
  (of-object "GdkFont")
  (c-name "gdk_char_measure")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method string_height
  (of-object "GdkFont")
  (c-name "gdk_string_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method height
  (of-object "GdkFont")
  (c-name "gdk_text_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method char_height
  (of-object "GdkFont")
  (c-name "gdk_char_height")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method extents
  (of-object "GdkFont")
  (c-name "gdk_text_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)

(define-method text_extents_wc
  (of-object "GdkFont")
  (c-name "gdk_text_extents_wc")
  (return-type "none")
  (parameters
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)

(define-method string_extents
  (of-object "GdkFont")
  (c-name "gdk_string_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)

(define-method "get_display"
  (of-object "GdkFont")
  (c-name "gdk_font_get_display")
  (return-type "GdkDisplay*")
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkgc.h

(define-method ref
  (of-object "GdkGC")
  (c-name "gdk_gc_ref")
  (return-type "GdkGC*")
)

(define-method unref
  (of-object "GdkGC")
  (c-name "gdk_gc_unref")
  (return-type "none")
)

(define-function gdk_gc_get_type
  (c-name "gdk_gc_get_type")
  (return-type "GType")
)

(define-function gc_new
  (c-name "gdk_gc_new")
  (is-constructor-of "GdkGC")
  (return-type "GdkGC*")
  (parameters
    '("GdkDrawable*" "drawable")
  )
)

(define-function gc_new
  (deprecated "use gdk.GC")
  (c-name "gdk_gc_new2")
  (return-type "GdkGC*")
  (parameters
    '("GdkDrawable*" "drawable")
  )
)

(define-method new_gc
  (of-object "GdkDrawable")
  (c-name "gdk_gc_new_with_values")
  (return-type "GdkGC*")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "values_mask")
  )
)

(define-method get_values
  (of-object "GdkGC")
  (c-name "gdk_gc_get_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
  )
)

(define-method set_values
  (of-object "GdkGC")
  (c-name "gdk_gc_set_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "values_mask")
  )
)

(define-method set_foreground
  (of-object "GdkGC")
  (c-name "gdk_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_background
  (of-object "GdkGC")
  (c-name "gdk_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_font
  (of-object "GdkGC")
  (c-name "gdk_gc_set_font")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
  )
)

(define-method set_function
  (of-object "GdkGC")
  (c-name "gdk_gc_set_function")
  (return-type "none")
  (parameters
    '("GdkFunction" "function")
  )
)

(define-method set_fill
  (of-object "GdkGC")
  (c-name "gdk_gc_set_fill")
  (return-type "none")
  (parameters
    '("GdkFill" "fill")
  )
)

(define-method set_tile
  (of-object "GdkGC")
  (c-name "gdk_gc_set_tile")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "tile")
  )
)

(define-method set_stipple
  (of-object "GdkGC")
  (c-name "gdk_gc_set_stipple")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "stipple")
  )
)

(define-method set_ts_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_ts_origin")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_clip_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_origin")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_clip_mask
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "mask")
  )
)

(define-method set_clip_rectangle
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_rectangle")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method set_clip_region
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
  )
)

(define-method set_subwindow
  (of-object "GdkGC")
  (c-name "gdk_gc_set_subwindow")
  (return-type "none")
  (parameters
    '("GdkSubwindowMode" "mode")
  )
)

(define-method set_exposures
  (of-object "GdkGC")
  (c-name "gdk_gc_set_exposures")
  (return-type "none")
  (parameters
    '("gboolean" "exposures")
  )
)

(define-method set_line_attributes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_line_attributes")
  (return-type "none")
  (parameters
    '("gint" "line_width")
    '("GdkLineStyle" "line_style")
    '("GdkCapStyle" "cap_style")
    '("GdkJoinStyle" "join_style")
  )
)

(define-method set_dashes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_dashes")
  (return-type "none")
  (parameters
    '("gint" "dash_offset")
    '("gint8[]" "dash_list")
    '("gint" "n")
  )
)

(define-method offset
  (of-object "GdkGC")
  (c-name "gdk_gc_offset")
  (return-type "none")
  (parameters
    '("gint" "x_offset")
    '("gint" "y_offset")
  )
)

(define-method copy
  (of-object "GdkGC")
  (c-name "gdk_gc_copy")
  (return-type "none")
  (parameters
    '("GdkGC*" "src_gc")
  )
)

(define-method set_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_get_colormap")
  (return-type "GdkColormap*")
)

(define-method set_rgb_fg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_fg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_rgb_bg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_bg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method "get_screen"
  (of-object "GdkGC")
  (c-name "gdk_gc_get_screen")
  (return-type "GdkScreen*")
)


(define-virtual get_values
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
  )
)

(define-virtual set_values
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "mask")
  )
)

(define-virtual set_dashes
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("gint" "dash_offset")
    '("gint8[]" "dash_list")
    '("gint" "n")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkimage.h

(define-function gdk_image_get_type
  (c-name "gdk_image_get_type")
  (return-type "GType")
)

(define-function image_new
  (is-constructor-of GdkImage)
  (c-name "gdk_image_new")
  (return-type "GdkImage*")
  (parameters
    '("GdkImageType" "type")
    '("GdkVisual*" "visual")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method ref
  (of-object "GdkImage")
  (c-name "gdk_image_ref")
  (return-type "GdkImage*")
)

(define-method unref
  (of-object "GdkImage")
  (c-name "gdk_image_unref")
  (return-type "none")
)

(define-function image_new_bitmap
  (c-name "gdk_image_new_bitmap")
  (return-type "GdkImage*")
  (parameters
    '("GdkVisual*" "visual")
    '("gpointer" "data")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method image_get
  (of-object "GdkDrawable")
  (deprecated "use GdkDrawable.get_image")
  (c-name "gdk_image_get")
  (return-type "GdkImage*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method put_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_put_pixel")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("guint32" "pixel")
  )
)

(define-method get_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_get_pixel")
  (return-type "guint32")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_get_colormap")
  (return-type "GdkColormap*")
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkinput.h

(define-function device_get_type
  (c-name "gdk_device_get_type")
  (return-type "GType")
)

(define-function devices_list
  (c-name "gdk_devices_list")
  (return-type "GList*")
)

(define-method set_source
  (of-object "GdkDevice")
  (c-name "gdk_device_set_source")
  (return-type "none")
  (parameters
    '("GdkInputSource" "source")
  )
)

(define-method set_mode
  (of-object "GdkDevice")
  (c-name "gdk_device_set_mode")
  (return-type "gboolean")
  (parameters
    '("GdkInputMode" "mode")
  )
)

(define-method set_key
  (of-object "GdkDevice")
  (c-name "gdk_device_set_key")
  (return-type "none")
  (parameters
    '("guint" "index")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-method set_axis_use
  (of-object "GdkDevice")
  (c-name "gdk_device_set_axis_use")
  (return-type "none")
  (parameters
    '("guint" "index")
    '("GdkAxisUse" "use")
  )
)

(define-method get_state
  (of-object "GdkDevice")
  (c-name "gdk_device_get_state")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gdouble*" "axes")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_history
  (of-object "GdkDevice")
  (c-name "gdk_device_get_history")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "window")
    '("guint32" "start")
    '("guint32" "stop")
    '("GdkTimeCoord***" "events")
    '("gint*" "n_events")
  )
)

(define-function device_free_history
  (c-name "gdk_device_free_history")
  (return-type "none")
  (parameters
    '("GdkTimeCoord**" "events")
    '("gint" "n_events")
  )
)

(define-method get_axis
  (of-object "GdkDevice")
  (c-name "gdk_device_get_axis")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "axes")
    '("GdkAxisUse" "use")
    '("gdouble*" "value")
  )
)

(define-method input_set_extension_events
  (of-object "GdkWindow")
  (c-name "gdk_input_set_extension_events")
  (return-type "none")
  (parameters
    '("gint" "mask")
    '("GdkExtensionMode" "mode")
  )
)

(define-function device_get_core_pointer
  (c-name "gdk_device_get_core_pointer")
  (return-type "GdkDevice*")
)



;; from /opt/gtk2/include/gtk-2.0/gdk/gdkkeys.h

(define-function gdk_keymap_get_type
  (c-name "gdk_keymap_get_type")
  (return-type "GType")
)

(define-function keymap_get_default
  (c-name "gdk_keymap_get_default")
  (return-type "GdkKeymap*")
)

(define-function keymap_get_for_display
  (c-name "gdk_keymap_get_for_display")
  (return-type "GdkKeymap*")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-method lookup_key
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_lookup_key")
  (return-type "guint")
  (parameters
    '("const-GdkKeymapKey*" "key")
  )
)

(define-method translate_keyboard_state
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_translate_keyboard_state")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode")
    '("GdkModifierType" "state")
    '("gint" "group")
    '("guint*" "keyval")
    '("gint*" "effective_group")
    '("gint*" "level")
    '("GdkModifierType*" "consumed_modifiers")
  )
)

(define-method get_entries_for_keyval
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keyval")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
    '("GdkKeymapKey**" "keys")
    '("gint*" "n_keys")
  )
)

(define-method get_entries_for_keycode
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keycode")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode")
    '("GdkKeymapKey**" "keys")
    '("guint**" "keyvals")
    '("gint*" "n_entries")
  )
)

(define-method get_direction
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_direction")
  (return-type "PangoDirection")
)

(define-function keyval_name
  (c-name "gdk_keyval_name")
  (return-type "gchar*")
  (parameters
    '("guint" "keyval")
  )
  (caller-owns-return #f)
)

(define-function keyval_from_name
  (c-name "gdk_keyval_from_name")
  (return-type "guint")
  (parameters
    '("const-gchar*" "keyval_name")
  )
)

(define-function keyval_convert_case
  (c-name "gdk_keyval_convert_case")
  (return-type "none")
  (parameters
    '("guint" "symbol")
    '("guint*" "lower")
    '("guint*" "upper")
  )
)

(define-function keyval_to_upper
  (c-name "gdk_keyval_to_upper")
  (return-type "guint")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_to_lower
  (c-name "gdk_keyval_to_lower")
  (return-type "guint")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_is_upper
  (c-name "gdk_keyval_is_upper")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_is_lower
  (c-name "gdk_keyval_is_lower")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_to_unicode
  (c-name "gdk_keyval_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)

(define-function unicode_to_keyval
  (c-name "gdk_unicode_to_keyval")
  (return-type "guint")
  (parameters
    '("guint32" "wc")
  )
)

(define-virtual direction_changed
  (of-object "GdkKeymap")
  (return-type "none")
)

(define-virtual keys_changed
  (of-object "GdkKeymap")
  (return-type "none")
)



;; From /home/jdahlin/dev/gtk-2.8/gtk+/gdk/gdkpango.h

(define-function gdk_pango_renderer_get_type
  (c-name "gdk_pango_renderer_get_type")
  (return-type "GType")
)

(define-function pango_renderer_new
  (c-name "gdk_pango_renderer_new")
  (is-constructor-of "GdkPangoRenderer")
  (return-type "PangoRenderer*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-function pango_renderer_get_default
  (c-name "gdk_pango_renderer_get_default")
  (return-type "PangoRenderer*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_drawable
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_drawable")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable" (null-ok))
  )
)

(define-method set_gc
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_gc")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc"(null-ok))
  )
)

(define-method set_stipple
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_stipple")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("GdkBitmap*" "stipple"(null-ok))
  )
)

(define-method set_override_color
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_override_color")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("const-GdkColor*" "color"(null-ok))
  )
)

(define-function pango_context_get_for_screen
  (c-name "gdk_pango_context_get_for_screen")
  (return-type "PangoContext*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-function pango_context_get
  (c-name "gdk_pango_context_get")
  (return-type "PangoContext*")
)

(define-function pango_context_set_colormap
  (c-name "gdk_pango_context_set_colormap")
  (return-type "none")
  (parameters
    '("PangoContext*" "context")
    '("GdkColormap*" "colormap")
  )
)

(define-function pango_layout_line_get_clip_region
  (c-name "gdk_pango_layout_line_get_clip_region")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
  (parameters
    '("PangoLayoutLine*" "line")
    '("gint" "x_origin")
    '("gint" "y_origin")
    '("gint*" "index_ranges")
    '("gint" "n_ranges")
  )
)

(define-function pango_layout_get_clip_region
  (c-name "gdk_pango_layout_get_clip_region")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
  (parameters
    '("PangoLayout*" "layout")
    '("gint" "x_origin")
    '("gint" "y_origin")
    '("gint*" "index_ranges")
    '("gint" "n_ranges")
  )
)

(define-function pango_attr_stipple_new
  (c-name "gdk_pango_attr_stipple_new")
  (is-constructor-of "GdkPangoAttrStipple")
  (return-type "PangoAttribute*")
  (parameters
    '("GdkBitmap*" "stipple")
  )
)

(define-function pango_attr_embossed_new
  (c-name "gdk_pango_attr_embossed_new")
  (is-constructor-of "GdkPangoAttrEmbossed")
  (return-type "PangoAttribute*")
  (parameters
    '("gboolean" "embossed")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gdk/gdkpixbuf.h

(define-method render_threshold_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_threshold_alpha")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "bitmap")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
    '("int" "alpha_threshold")
  )
)

(define-method render_pixmap_and_mask_for_colormap
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_pixmap_and_mask_for_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap**" "pixmap_return")
    '("GdkBitmap**" "mask_return")
    '("int" "alpha_threshold")
  )
)

(define-method render_to_drawable
  (deprecated "use gtk.gdk.Drawable.draw_pixbuf")
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_to_drawable")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
    '("GdkRgbDither" "dither" (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (default "0"))
    '("gint" "y_dither" (default "0"))
  )
)

(define-method render_to_drawable_alpha
  (deprecated "use gtk.gdk.Drawable.draw_pixbuf")
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_to_drawable_alpha")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
    '("GdkPixbufAlphaMode" "alpha_mode")
    '("int" "alpha_threshold")
    '("GdkRgbDither" "dither" (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (default "0"))
    '("gint" "y_dither" (default "0"))
  )
)

(define-method render_pixmap_and_mask
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_pixmap_and_mask")
  (return-type "none")
  (parameters
    '("GdkPixmap**" "pixmap_return")
    '("GdkBitmap**" "mask_return")
    '("int" "alpha_threshold" (default "127"))
  )
)

(define-method get_from_drawable
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_from_drawable")
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkDrawable*" "src")
    '("GdkColormap*" "cmap")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
  )
)

(define-function pixbuf_get_from_drawable
  (c-name "gdk_pixbuf_get_from_drawable2")
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
    '("GdkDrawable*" "src")
    '("GdkColormap*" "cmap")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method get_from_image
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_from_image")
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkImage*" "src")
    '("GdkColormap*" "cmap")
    '("int" "src_x")
    '("int" "src_y")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method rotate_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_rotate_simple")
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "angle")
  )
  (caller-owns-return #t)
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkpixmap.h

(define-function gdk_pixmap_get_type
  (c-name "gdk_pixmap_get_type")
  (return-type "GType")
)

(define-function pixmap_new
  (is-constructor-of GdkPixmap)
  (c-name "gdk_pixmap_new")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (null-ok))
    '("gint" "width")
    '("gint" "height")
    '("gint" "depth" (default "-1"))
  )
)

(define-function bitmap_create_from_data
  (c-name "gdk_bitmap_create_from_data")
  (return-type "GdkBitmap*")
  (parameters
    '("GdkDrawable*" "drawable" (null-ok))
    '("const-guchar*" "data")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function pixmap_create_from_data
  (c-name "gdk_pixmap_create_from_data")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (null-ok))
    '("const-guchar*" "data")
    '("gint" "width")
    '("gint" "height")
    '("gint" "depth")
    '("GdkColor*" "fg")
    '("GdkColor*" "bg")
  )
)

(define-function pixmap_create_from_xpm
  (c-name "gdk_pixmap_create_from_xpm")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkBitmap**" "mask")
    '("GdkColor*" "transparent_color")
    '("const-gchar*" "filename")
  )
)

(define-function pixmap_colormap_create_from_xpm
  (c-name "gdk_pixmap_colormap_create_from_xpm")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkColormap*" "colormap")
    '("GdkBitmap**" "mask")
    '("GdkColor*" "transparent_color")
    '("const-gchar*" "filename")
  )
)

(define-function pixmap_create_from_xpm_d
  (c-name "gdk_pixmap_create_from_xpm_d")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkBitmap**" "mask")
    '("GdkColor*" "transparent_color")
    '("gchar**" "data")
  )
)

(define-function pixmap_colormap_create_from_xpm_d
  (c-name "gdk_pixmap_colormap_create_from_xpm_d")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkColormap*" "colormap")
    '("GdkBitmap**" "mask")
    '("GdkColor*" "transparent_color")
    '("gchar**" "data")
  )
)

(define-function pixmap_foreign_new
  (c-name "gdk_pixmap_foreign_new")
  (return-type "GdkPixmap*")
  (caller-owns-return #t)
  (parameters
    '("GdkNativeWindow" "anid")
  )
)

(define-function pixmap_lookup
  (c-name "gdk_pixmap_lookup")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkNativeWindow" "anid")
  )
)

(define-function pixmap_foreign_new_for_display
  (c-name "gdk_pixmap_foreign_new_for_display")
  (return-type "GdkPixmap*")
  (caller-owns-return #t)
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "anid")
  )
)

(define-function pixmap_lookup_for_display
  (c-name "gdk_pixmap_lookup_for_display")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "anid")
  )
)


;; From gdkprivate.h

(define-method destroy_notify
  (of-object "GdkWindow")
  (c-name "gdk_window_destroy_notify")
  (return-type "none")
)

(define-function synthesize_window_state
  (c-name "gdk_synthesize_window_state")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GdkWindowState" "unset_flags")
    '("GdkWindowState" "set_flags")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkproperty.h

(define-function text_property_to_text_list
  (c-name "gdk_text_property_to_text_list")
  (return-type "gint")
  (parameters
    '("GdkAtom" "encoding")
    '("gint" "format")
    '("const-guchar*" "text")
    '("gint" "length")
    '("gchar***" "list")
  )
)

(define-function text_property_to_utf8_list
  (c-name "gdk_text_property_to_utf8_list")
  (return-type "gint")
  (parameters
    '("GdkAtom" "encoding")
    '("gint" "format")
    '("const-guchar*" "text")
    '("gint" "length")
    '("gchar***" "list")
  )
)

(define-function utf8_to_compound_text
  (c-name "gdk_utf8_to_compound_text")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
    '("GdkAtom*" "encoding")
    '("gint*" "format")
    '("guchar**" "ctext")
    '("gint*" "length")
  )
)

(define-function string_to_compound_text
  (c-name "gdk_string_to_compound_text")
  (return-type "gint")
  (parameters
    '("const-gchar*" "str")
    '("GdkAtom*" "encoding")
    '("gint*" "format")
    '("guchar**" "ctext")
    '("gint*" "length")
  )
)

(define-function text_property_to_text_list_for_display
  (c-name "gdk_text_property_to_text_list_for_display")
  (return-type "gint")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkAtom" "encoding")
    '("gint" "format")
    '("const-guchar*" "text")
    '("gint" "length")
    '("gchar***" "list")
  )
)

(define-function text_property_to_utf8_list_for_display
  (c-name "gdk_text_property_to_utf8_list_for_display")
  (return-type "gint")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkAtom" "encoding")
    '("gint" "format")
    '("const-guchar*" "text")
    '("gint" "length")
    '("gchar***" "list")
  )
)

(define-function utf8_to_string_target
  (c-name "gdk_utf8_to_string_target")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-function string_to_compound_text_for_display
  (c-name "gdk_string_to_compound_text_for_display")
  (return-type "gint")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "str")
    '("GdkAtom*" "encoding")
    '("gint*" "format")
    '("guchar**" "ctext")
    '("gint*" "length")
  )
)

(define-function utf8_to_compound_text_for_display
  (c-name "gdk_utf8_to_compound_text_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "str")
    '("GdkAtom*" "encoding")
    '("gint*" "format")
    '("guchar**" "ctext")
    '("gint*" "length")
  )
)

(define-function free_text_list
  (c-name "gdk_free_text_list")
  (return-type "none")
  (parameters
    '("gchar**" "list")
  )
)

(define-function free_compound_text
  (c-name "gdk_free_compound_text")
  (return-type "none")
  (parameters
    '("guchar*" "ctext")
  )
)

(define-method name
  (of-object "GdkAtom")
  (c-name "gdk_atom_name")
  (return-type "gchar*")
)

(define-function atom_intern
  (c-name "gdk_atom_intern")
  (return-type "GdkAtom")
  (parameters
   '("gchar*" "atom_name")
    '("gboolean" "only_if_exists" (default "FALSE"))
  )
)

(define-method property_get
  (of-object "GdkWindow")
  (c-name "gdk_property_get")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "property")
    '("GdkAtom" "type")
    '("gulong" "offset")
    '("gulong" "length")
    '("gint" "pdelete")
    '("GdkAtom*" "actual_property_type")
    '("gint*" "actual_format")
    '("gint*" "actual_length")
    '("guchar**" "data")
  )
)

(define-method property_change
  (of-object "GdkWindow")
  (c-name "gdk_property_change")
  (return-type "none")
  (parameters
    '("GdkAtom" "property")
    '("GdkAtom" "type")
    '("gint" "format")
    '("GdkPropMode" "mode")
    '("const-guchar*" "data")
    '("gint" "nelements")
  )
)

(define-method property_delete
  (of-object "GdkWindow")
  (c-name "gdk_property_delete")
  (return-type "none")
  (parameters
    '("GdkAtom" "property")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkrgb.h

(define-function rgb_xpixel_from_rgb
  (c-name "gdk_rgb_xpixel_from_rgb")
  (return-type "gulong")
  (parameters
    '("guint32" "rgb")
  )
)

(define-function rgb_gc_set_foreground
  (c-name "gdk_rgb_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("guint32" "rgb")
  )
)

(define-function rgb_gc_set_background
  (c-name "gdk_rgb_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("guint32" "rgb")
  )
)

(define-method draw_rgb_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "rgb_buf")
    '("gint" "rowstride")
  )
)

(define-method draw_rgb_image_dithalign
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image_dithalign")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "rgb_buf")
    '("gint" "rowstride")
    '("gint" "xdith")
    '("gint" "ydith")
  )
)

(define-method draw_rgb_32_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_32_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
  )
)

(define-method draw_gray_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_gray_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
  )
)

(define-function rgb_cmap_new
  (c-name "gdk_rgb_cmap_new")
  (return-type "GdkRgbCmap*")
  (parameters
    '("guint32*" "colors")
    '("gint" "n_colors")
  )
)

(define-method draw_indexed_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_indexed_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
    '("GdkRgbCmap*" "cmap")
  )
)

(define-function rgb_ditherable
  (c-name "gdk_rgb_ditherable")
  (return-type "gboolean")
)

(define-function rgb_set_verbose
  (c-name "gdk_rgb_set_verbose")
  (return-type "none")
  (parameters
    '("gboolean" "verbose")
  )
)

(define-function rgb_set_install
  (c-name "gdk_rgb_set_install")
  (return-type "none")
  (parameters
    '("gboolean" "install")
  )
)

(define-function rgb_set_min_colors
  (c-name "gdk_rgb_set_min_colors")
  (return-type "none")
  (parameters
    '("gint" "min_colors")
  )
)

(define-function rgb_get_colormap
  (c-name "gdk_rgb_get_colormap")
  (return-type "GdkColormap*")
)

(define-function rgb_get_cmap
  (deprecated "use gtk.gdk.rgb_get_colormap instead")
  (c-name "gdk_rgb_get_cmap")
  (return-type "GdkColormap*")
)

(define-function rgb_get_visual
  (c-name "gdk_rgb_get_visual")
  (return-type "GdkVisual*")
)

(define-function rgb_init
  (c-name "gdk_rgb_init")
  (return-type "none")
)

(define-function rgb_find_color
  (c-name "gdk_rgb_find_color")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkColor*" "color")
  )
)

(define-function draw_rgb_32_image_dithalign
  (c-name "gdk_draw_rgb_32_image_dithalign")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
    '("gint" "xdith")
    '("gint" "ydith")
  )
)

(define-method free
  (of-object "GdkRgbCmap")
  (c-name "gdk_rgb_cmap_free")
  (return-type "none")
)

(define-function rgb_colormap_ditherable
  (c-name "gdk_rgb_colormap_ditherable")
  (return-type "gboolean")
  (parameters
    '("GdkColormap*" "cmap")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkscreen.h
 
(define-function gdk_screen_get_type
  (c-name "gdk_screen_get_type")
  (return-type "GType")
)
 
(define-method get_default_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_default_colormap")
  (return-type "GdkColormap*")
)

(define-method set_default_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_default_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_system_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_system_colormap")
  (return-type "GdkColormap*")
)

(define-method get_system_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_system_visual")
  (return-type "GdkVisual*")
)

(define-method get_rgb_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgb_colormap")
  (return-type "GdkColormap*")
)

(define-method get_rgba_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgba_colormap")
  (return-type "GdkColormap*")
)

(define-method get_rgb_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgb_visual")
  (return-type "GdkVisual*")
)

(define-method get_rgba_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgba_visual")
  (return-type "GdkVisual*")
)

(define-method get_root_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_root_window")
  (return-type "GdkWindow*")
)

(define-method get_display
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_number
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_number")
  (return-type "gint")
)

(define-method get_width
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width")
  (return-type "gint")
)

(define-method get_height
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height")
  (return-type "gint")
)

(define-method get_width_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width_mm")
  (return-type "gint")
)

(define-method get_height_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height_mm")
  (return-type "gint")
)

(define-method list_visuals
  (of-object "GdkScreen")
  (c-name "gdk_screen_list_visuals")
  (return-type "GList*")
)

(define-method get_toplevel_windows
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_toplevel_windows")
  (return-type "GList*")
)

(define-method make_display_name
  (of-object "GdkScreen")
  (c-name "gdk_screen_make_display_name")
  (return-type "gchar*")
)

(define-method get_n_monitors
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_n_monitors")
  (return-type "gint")
)

(define-method get_monitor_geometry
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_geometry")
  (return-type "none")
  (parameters
    '("gint" "monitor_num")
    '("GdkRectangle*" "dest")
  )
)

(define-method get_monitor_at_point
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_point")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_monitor_at_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_window")
  (return-type "gint")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method broadcast_client_message
  (of-object "GdkScreen")
  (c-name "gdk_screen_broadcast_client_message")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-function screen_get_default
  (c-name "gdk_screen_get_default")
  (return-type "GdkScreen*")
)

;; dummy, overridden to return gdk_screen_get_default()
(define-function gdk_screen_new
  (c-name "gdk_screen_new")
  (return-type "GdkScreen*")
  (is-constructor-of "GdkScreen")
)

(define-method get_setting
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_setting")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
    '("GValue*" "value")
  )
)

(define-method alternative_dialog_button_order
  (of-object "GdkScreen")
  (c-name "gtk_alternative_dialog_button_order")
  (return-type "gboolean")
)


(define-virtual size_changed
  (of-object "GdkScreen")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkselection.h

(define-function selection_owner_set
  (c-name "gdk_selection_owner_set")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "owner")
    '("GdkAtom" "selection")
    '("guint32" "time")
    '("gboolean" "send_event")
  )
)

(define-function selection_owner_get
  (c-name "gdk_selection_owner_get")
  (return-type "GdkWindow*")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-function selection_owner_set_for_display
  (c-name "gdk_selection_owner_set_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow*" "owner" (null-ok))
    '("GdkAtom" "selection")
    '("guint32" "time")
    '("gboolean" "send_event")
  )
)

(define-function selection_owner_get_for_display
  (c-name "gdk_selection_owner_get_for_display")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkAtom" "selection")
  )
)

(define-method selection_convert
  (of-object "GdkWindow")
  (c-name "gdk_selection_convert")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint32" "time")
  )
)

(define-method selection_property_get
  (of-object "GdkWindow")
  (c-name "gdk_selection_property_get")
  (return-type "gboolean")
  (parameters
    '("guchar**" "data")
    '("GdkAtom*" "prop_type")
    '("gint*" "prop_format")
  )
)

(define-function selection_send_notify
  (c-name "gdk_selection_send_notify")
  (return-type "none")
  (parameters
    '("guint32" "requestor")
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "property")
    '("guint32" "time")
  )
)

(define-function selection_send_notify_for_display
  (c-name "gdk_selection_send_notify_for_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
    '("guint32" "requestor")
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "property")
    '("guint32" "time")
  )
)

;; From /mondo/local/gtk-2.10/include/gtk-2.0/gdk/gdkspawn.h

(define-function spawn_on_screen
  (c-name "gdk_spawn_on_screen")
  (return-type "gboolean")
  (parameters
    '("GdkScreen*" "screen")
    '("const-gchar*" "working_directory")
    '("gchar**" "argv")
    '("gchar**" "envp")
    '("GSpawnFlags" "flags")
    '("GSpawnChildSetupFunc" "child_setup")
    '("gpointer" "user_data")
    '("gint*" "child_pid")
    '("GError**" "error")
  )
)

(define-function spawn_on_screen_with_pipes
  (c-name "gdk_spawn_on_screen_with_pipes")
  (return-type "gboolean")
  (parameters
    '("GdkScreen*" "screen")
    '("const-gchar*" "working_directory")
    '("gchar**" "argv")
    '("gchar**" "envp")
    '("GSpawnFlags" "flags")
    '("GSpawnChildSetupFunc" "child_setup")
    '("gpointer" "user_data")
    '("gint*" "child_pid")
    '("gint*" "standard_input")
    '("gint*" "standard_output")
    '("gint*" "standard_error")
    '("GError**" "error")
  )
)

(define-function spawn_command_line_on_screen
  (c-name "gdk_spawn_command_line_on_screen")
  (return-type "gboolean")
  (parameters
    '("GdkScreen*" "screen")
    '("const-gchar*" "command_line")
    '("GError**" "error")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkvisual.h

(define-function gdk_visual_get_type
  (c-name "gdk_visual_get_type")
  (return-type "GType")
)

(define-function visual_get_best_depth
  (c-name "gdk_visual_get_best_depth")
  (return-type "gint")
)

(define-function visual_get_best_type
  (c-name "gdk_visual_get_best_type")
  (return-type "GdkVisualType")
)

(define-function visual_get_system
  (c-name "gdk_visual_get_system")
  (return-type "GdkVisual*")
)

(define-function visual_get_best
  (c-name "gdk_visual_get_best")
  (return-type "GdkVisual*")
)

(define-function visual_get_best_with_depth
  (c-name "gdk_visual_get_best_with_depth")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth")
  )
)

(define-function visual_get_best_with_type
  (c-name "gdk_visual_get_best_with_type")
  (return-type "GdkVisual*")
  (parameters
    '("GdkVisualType" "visual_type")
  )
)

(define-function visual_get_best_with_both
  (is-constructor-of GdkVisual)
  (c-name "gdk_visual_get_best_with_both")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth")
    '("GdkVisualType" "visual_type")
  )
)

(define-function query_depths
  (c-name "gdk_query_depths")
  (return-type "none")
  (parameters
    '("gint**" "depths")
    '("gint*" "count")
  )
)

(define-function query_visual_types
  (c-name "gdk_query_visual_types")
  (return-type "none")
  (parameters
    '("GdkVisualType**" "visual_types")
    '("gint*" "count")
  )
)

(define-function list_visuals
  (c-name "gdk_list_visuals")
  (return-type "GList*")
)

(define-method get_screen
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_screen")
  (return-type "GdkScreen*")
)


;; From /opt/gtk2/include/gtk-2.0/gdk/gdkwindow.h

(define-function gdk_window_object_get_type
  (c-name "gdk_window_object_get_type")
  (return-type "GType")
)

(define-function new
  (is-constructor-of GdkWindow)
  (c-name "gdk_window_new")
  (return-type "GdkWindow*")
  (parameters
    '("GdkWindow*" "parent")
    '("GdkWindowAttr*" "attributes")
    '("gint" "attributes_mask")
  )
)

(define-method set_keep_above
  (c-name "gdk_window_set_keep_above")
  (of-object "GdkWindow")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_keep_below
  (c-name "gdk_window_set_keep_below")
  (of-object "GdkWindow")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method destroy
  (of-object "GdkWindow")
  (c-name "gdk_window_destroy")
  (return-type "none")
)

(define-method get_window_type
  (of-object "GdkWindow")
  (c-name "gdk_window_get_window_type")
  (return-type "GdkWindowType")
)

(define-function window_at_pointer
  (c-name "gdk_window_at_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "win_x")
    '("gint*" "win_y")
  )
)

(define-method show
  (of-object "GdkWindow")
  (c-name "gdk_window_show")
  (return-type "none")
)

(define-method hide
  (of-object "GdkWindow")
  (c-name "gdk_window_hide")
  (return-type "none")
)

(define-method withdraw
  (of-object "GdkWindow")
  (c-name "gdk_window_withdraw")
  (return-type "none")
)

(define-method move
  (of-object "GdkWindow")
  (c-name "gdk_window_move")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method resize
  (of-object "GdkWindow")
  (c-name "gdk_window_resize")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method move_resize
  (of-object "GdkWindow")
  (c-name "gdk_window_move_resize")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method reparent
  (of-object "GdkWindow")
  (c-name "gdk_window_reparent")
  (return-type "none")
  (parameters
    '("GdkWindow*" "new_parent")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method clear
  (of-object "GdkWindow")
  (c-name "gdk_window_clear")
  (return-type "none")
)

(define-method clear_area
  (of-object "GdkWindow")
  (c-name "gdk_window_clear_area")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method clear_area_e
  (of-object "GdkWindow")
  (c-name "gdk_window_clear_area_e")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method raise
  (of-object "GdkWindow")
  (c-name "gdk_window_raise")
  (return-type "none")
)

(define-method lower
  (of-object "GdkWindow")
  (c-name "gdk_window_lower")
  (return-type "none")
)

(define-method focus
  (of-object "GdkWindow")
  (c-name "gdk_window_focus")
  (return-type "none")
  (parameters
    '("guint32" "timestamp" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-method set_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_set_user_data")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method get_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_get_user_data")
  (return-type "none")
  (parameters
    '("gpointer*" "user_data")
  )
)

(define-method set_override_redirect
  (of-object "GdkWindow")
  (c-name "gdk_window_set_override_redirect")
  (return-type "none")
  (parameters
    '("gboolean" "override_redirect")
  )
)

(define-method add_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_add_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function")
    '("gpointer" "data")
  )
)

(define-method remove_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_remove_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function")
    '("gpointer" "data")
  )
)

(define-method scroll
  (of-object "GdkWindow")
  (c-name "gdk_window_scroll")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method shape_combine_mask
  (of-object "GdkWindow")
  (c-name "gdk_window_shape_combine_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "shape_mask" (null-ok))
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-method set_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_set_child_shapes")
  (return-type "none")
)

(define-method merge_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_merge_child_shapes")
  (return-type "none")
)

(define-method is_visible
  (of-object "GdkWindow")
  (c-name "gdk_window_is_visible")
  (return-type "gboolean")
)

(define-method is_viewable
  (of-object "GdkWindow")
  (c-name "gdk_window_is_viewable")
  (return-type "gboolean")
)

(define-method get_state
  (of-object "GdkWindow")
  (c-name "gdk_window_get_state")
  (return-type "GdkWindowState")
)

(define-method set_static_gravities
  (of-object "GdkWindow")
  (c-name "gdk_window_set_static_gravities")
  (return-type "gboolean")
  (parameters
    '("gboolean" "use_static")
  )
)

(define-function window_foreign_new
  (c-name "gdk_window_foreign_new")
  (return-type "GdkWindow*")
  (caller-owns-return #t)
  (parameters
    '("GdkNativeWindow" "anid")
  )
)

(define-function window_lookup
  (c-name "gdk_window_lookup")
  (return-type "GdkWindow*")
  (parameters
    '("GdkNativeWindow" "anid")
  )
)

(define-function window_foreign_new_for_display
  (c-name "gdk_window_foreign_new_for_display")
  (return-type "GdkWindow*")
  (caller-owns-return #t)
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "anid")
  )
)

(define-function window_lookup_for_display
  (c-name "gdk_window_lookup_for_display")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "anid")
  )
)

(define-method set_hints
  (of-object "GdkWindow")
  (c-name "gdk_window_set_hints")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "min_width")
    '("gint" "min_height")
    '("gint" "max_width")
    '("gint" "max_height")
    '("gint" "flags")
  )
)

(define-method set_type_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_type_hint")
  (return-type "none")
  (parameters
    '("GdkWindowTypeHint" "hint")
  )
)

(define-method set_modal_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_modal_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal")
  )
)

(define-method set_skip_taskbar_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_taskbar_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal")
  )
)

(define-method set_skip_pager_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_pager_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal")
  )
)

(define-method set_geometry_hints
  (of-object "GdkWindow")
  (c-name "gdk_window_set_geometry_hints")
  (return-type "none")
  (parameters
    '("GdkGeometry*" "geometry")
    '("GdkWindowHints" "flags")
  )
)

(define-function set_sm_client_id
  (c-name "gdk_set_sm_client_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "sm_client_id")
  )
)

(define-method begin_paint_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method begin_paint_region
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
  )
)

(define-method end_paint
  (of-object "GdkWindow")
  (c-name "gdk_window_end_paint")
  (return-type "none")
)

(define-method set_title
  (of-object "GdkWindow")
  (c-name "gdk_window_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method set_role
  (of-object "GdkWindow")
  (c-name "gdk_window_set_role")
  (return-type "none")
  (parameters
    '("const-gchar*" "role")
  )
)

(define-method set_transient_for
  (of-object "GdkWindow")
  (c-name "gdk_window_set_transient_for")
  (return-type "none")
  (parameters
    '("GdkWindow*" "leader")
  )
)

(define-method set_background
  (of-object "GdkWindow")
  (c-name "gdk_window_set_background")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_back_pixmap
  (of-object "GdkWindow")
  (c-name "gdk_window_set_back_pixmap")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "pixmap" (null-ok))
    '("gboolean" "parent_relative")
  )
)

(define-method set_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_set_cursor")
  (return-type "none")
  (parameters
    '("GdkCursor*" "cursor" (null-ok))
  )
)

(define-method get_geometry
  (of-object "GdkWindow")
  (c-name "gdk_window_get_geometry")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
    '("gint*" "depth")
  )
)

(define-method get_position
  (of-object "GdkWindow")
  (c-name "gdk_window_get_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_origin")
  (return-type "gint")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_deskrelative_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_deskrelative_origin")
  (return-type "gboolean")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_root_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_root_origin")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_frame_extents
  (of-object "GdkWindow")
  (c-name "gdk_window_get_frame_extents")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method get_pointer
  (of-object "GdkWindow")
  (c-name "gdk_window_get_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_get_parent")
  (return-type "GdkWindow*")
)

(define-method get_toplevel
  (of-object "GdkWindow")
  (c-name "gdk_window_get_toplevel")
  (return-type "GdkWindow*")
)

(define-method get_children
  (of-object "GdkWindow")
  (c-name "gdk_window_get_children")
  (return-type "GList*")
)

(define-method peek_children
  (of-object "GdkWindow")
  (c-name "gdk_window_peek_children")
  (return-type "GList*")
)

(define-method get_events
  (of-object "GdkWindow")
  (c-name "gdk_window_get_events")
  (return-type "GdkEventMask")
)

(define-method set_events
  (of-object "GdkWindow")
  (c-name "gdk_window_set_events")
  (return-type "none")
  (parameters
    '("GdkEventMask" "event_mask")
  )
)

(define-method set_icon_list
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_list")
  (return-type "none")
  (parameters
    '("GList*" "pixbufs")
  )
)

(define-method set_icon
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon")
  (return-type "none")
  (parameters
    '("GdkWindow*" "icon_window")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
  )
)

(define-method set_icon_name
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_group
  (of-object "GdkWindow")
  (c-name "gdk_window_set_group")
  (return-type "none")
  (parameters
    '("GdkWindow*" "leader")
  )
)

(define-method get_group
  (of-object "GdkWindow")
  (c-name "gdk_window_get_group")
  (return-type "GdkWindow*")
)

(define-method set_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_set_decorations")
  (return-type "none")
  (parameters
    '("GdkWMDecoration" "decorations")
  )
)

(define-method get_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_get_decorations")
  (return-type "gboolean")
  (parameters
    '("GdkWMDecoration*" "decorations")
  )
)

(define-method set_functions
  (of-object "GdkWindow")
  (c-name "gdk_window_set_functions")
  (return-type "none")
  (parameters
    '("GdkWMFunction" "functions")
  )
)

(define-function window_get_toplevels
  (c-name "gdk_window_get_toplevels")
  (return-type "GList*")
)

(define-method iconify
  (of-object "GdkWindow")
  (c-name "gdk_window_iconify")
  (return-type "none")
)

(define-method deiconify
  (of-object "GdkWindow")
  (c-name "gdk_window_deiconify")
  (return-type "none")
)

(define-method stick
  (of-object "GdkWindow")
  (c-name "gdk_window_stick")
  (return-type "none")
)

(define-method unstick
  (of-object "GdkWindow")
  (c-name "gdk_window_unstick")
  (return-type "none")
)

(define-method maximize
  (of-object "GdkWindow")
  (c-name "gdk_window_maximize")
  (return-type "none")
)

(define-method unmaximize
  (of-object "GdkWindow")
  (c-name "gdk_window_unmaximize")
  (return-type "none")
)

(define-method fullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_fullscreen")
  (return-type "none")
)

(define-method unfullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_unfullscreen")
  (return-type "none")
)

(define-method register_dnd
  (of-object "GdkWindow")
  (c-name "gdk_window_register_dnd")
  (return-type "none")
)

(define-method begin_resize_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_resize_drag")
  (return-type "none")
  (parameters
    '("GdkWindowEdge" "edge")
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method begin_move_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_move_drag")
  (return-type "none")
  (parameters
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method invalidate_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect" (null-ok))
    '("gboolean" "invalidate_children")
  )
)

(define-method invalidate_region
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
    '("gboolean" "invalidate_children")
  )
)

(define-method invalidate_maybe_recurse
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_maybe_recurse")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
    '("gboolean (*child_func)(GdkWindow *, gpointer)" "child_func")
  )
)

(define-method get_update_area
  (of-object "GdkWindow")
  (c-name "gdk_window_get_update_area")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
)

(define-method freeze_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_freeze_updates")
  (return-type "none")
)

(define-method thaw_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_thaw_updates")
  (return-type "none")
)

(define-function window_process_all_updates
  (c-name "gdk_window_process_all_updates")
  (return-type "none")
)

(define-method process_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_process_updates")
  (return-type "none")
  (parameters
    '("gboolean" "update_children")
  )
)

(define-function window_set_debug_updates
  (c-name "gdk_window_set_debug_updates")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-function window_constrain_size
  (c-name "gdk_window_constrain_size")
  (return-type "none")
  (parameters
    '("GdkGeometry*" "geometry")
    '("guint" "flags")
    '("gint" "width")
    '("gint" "height")
    '("gint*" "new_width")
    '("gint*" "new_height")
  )
)

(define-method get_internal_paint_info
  (of-object "GdkWindow")
  (c-name "gdk_window_get_internal_paint_info")
  (return-type "none")
  (parameters
    '("GdkDrawable**" "real_drawable")
    '("gint*" "x_offset")
    '("gint*" "y_offset")
  )
)

(define-function set_pointer_hooks
  (c-name "gdk_set_pointer_hooks")
  (return-type "GdkPointerHooks*")
  (parameters
    '("const-GdkPointerHooks*" "new_hooks")
  )
)

(define-function get_default_root_window
  (c-name "gdk_get_default_root_window")
  (return-type "GdkWindow*")
)

(define-method set_accept_focus
  (of-object "GdkWindow")
  (c-name "gdk_window_set_accept_focus")
  (return-type "none")
  (parameters
    '("gboolean" "accept_focus")
  )
)

(define-method set_focus_on_map
  (of-object "GdkWindow")
  (c-name "gdk_window_set_focus_on_map")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_map")
  )
)

(define-method enable_synchronized_configure
  (of-object "GdkWindow")
  (c-name "gdk_window_enable_synchronized_configure")
  (return-type "none")
)

(define-method configure_finished
  (of-object "GdkWindow")
  (c-name "gdk_window_configure_finished")
  (return-type "none")
)

(define-method set_urgency_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_urgency_hint")
  (return-type "none")
  (parameters
    '("gboolean" "urgent")
  )
)

;; From /mondo/local/gtk-2.10/include/gtk-2.0/gdk/gdkwindow.h

(define-method show_unraised
  (of-object "GdkWindow")
  (c-name "gdk_window_show_unraised")
  (return-type "none")
)

(define-method move_region
  (of-object "GdkWindow")
  (c-name "gdk_window_move_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method shape_combine_region
  (of-object "GdkWindow")
  (c-name "gdk_window_shape_combine_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "shape_region" (null-ok))
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)


;;; XXXX functions from GTK that extend GDK types.
(define-method finish
  (of-object "GdkDragContext")
  (c-name "gtk_drag_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success")
    '("gboolean" "del")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method get_source_widget
  (of-object "GdkDragContext")
  (c-name "gtk_drag_get_source_widget")
  (return-type "GtkWidget*")
)

(define-method set_icon_widget
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_pixmap
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixmap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_pixbuf
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_stock
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_default
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_default")
  (return-type "none")
)

(define-method set_icon_name
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h

(define-method get_colorspace
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_colorspace")
  (return-type "GdkColorspace")
)

(define-method get_n_channels
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_n_channels")
  (return-type "int")
)

(define-method get_has_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_has_alpha")
  (return-type "gboolean")
)

(define-method get_bits_per_sample
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_bits_per_sample")
  (return-type "int")
)

(define-method get_pixels
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_pixels")
  (return-type "guchar*")
)

(define-method get_width
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_height")
  (return-type "int")
)

(define-method get_rowstride
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_rowstride")
  (return-type "int")
)

(define-function pixbuf_new
  (is-constructor-of GdkPixbuf)
  (c-name "gdk_pixbuf_new")
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkColorspace" "colorspace")
    '("gboolean" "has_alpha")
    '("int" "bits_per_sample")
    '("int" "width")
    '("int" "height")
  )
)

(define-method copy
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_copy")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
)

(define-function pixbuf_new_from_file
  (c-name "gdk_pixbuf_new_from_file")
  (return-type "GdkPixbuf*")
  (unblock-threads #t)
  (caller-owns-return #t)
  (parameters
    '("const-char*" "filename")
    '("GError**" "error")
  )
)

(define-function pixbuf_new_from_file_at_size
  (c-name "gdk_pixbuf_new_from_file_at_size")
  (return-type "GdkPixbuf*")
  (unblock-threads #t)
  (caller-owns-return #t)
  (parameters
    '("const-char*" "filename")
    '("int" "width")
    '("int" "height")
    '("GError**" "error")
  )
)

(define-function pixbuf_new_from_data
  (c-name "gdk_pixbuf_new_from_data")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("const-guchar*" "data")
    '("GdkColorspace" "colorspace")
    '("gboolean" "has_alpha")
    '("int" "bits_per_sample")
    '("int" "width")
    '("int" "height")
    '("int" "rowstride")
    '("GdkPixbufDestroyNotify" "destroy_fn")
    '("gpointer" "destroy_fn_data")
  )
)

(define-function pixbuf_new_from_array
  (c-name "gdk_pixbuf_new_from_array")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("PyArrayObject*" "array")
    '("GdkColorspace" "colorspace")
    '("int" "bits_per_sample")
  )
)

(define-function pixbuf_new_from_xpm_data
  (c-name "gdk_pixbuf_new_from_xpm_data")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("const-char**" "data")
  )
)

(define-function pixbuf_new_from_inline
  (c-name "gdk_pixbuf_new_from_inline")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("gint" "data_length")
    '("const-guchar*" "data")
    '("gboolean" "copy_pixels")
    '("GError**" "error")
  )
)

(define-method subpixbuf
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_new_subpixbuf")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("int" "src_x")
    '("int" "src_y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method fill
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_fill")
  (parameters
    '("guint32" "pixel")
  )
)

(define-method save
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
    '("const-char*" "type")
    '("GError**" "error")
  )
  (varargs #t)
)

(define-method savev
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_savev")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
    '("const-char*" "type")
    '("char**" "option_keys")
    '("char**" "option_values")
    '("GError**" "error")
  )
)

(define-method save_to_callback
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_callback")
  ;; overridden
)

(define-method add_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_add_alpha")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("gboolean" "substitute_color")
    ;; Bug #586094: actually 'guchar' in function declaration, but
    ;; really means '8-bit integer'.
    '("guint8" "r")
    '("guint8" "g")
    '("guint8" "b")
  )
)

(define-method copy_area
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_copy_area")
  (return-type "none")
  (parameters
    '("int" "src_x")
    '("int" "src_y")
    '("int" "width")
    '("int" "height")
    '("GdkPixbuf*" "dest_pixbuf")
    '("int" "dest_x")
    '("int" "dest_y")
  )
)

(define-method saturate_and_pixelate
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_saturate_and_pixelate")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest")
    '("gfloat" "saturation")
    '("gboolean" "pixelate")
  )
)

(define-method scale
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_scale")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "dest_width")
    '("int" "dest_height")
    '("double" "offset_x")
    '("double" "offset_y")
    '("double" "scale_x")
    '("double" "scale_y")
    '("GdkInterpType" "interp_type")
  )
)

(define-method composite
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "dest_width")
    '("int" "dest_height")
    '("double" "offset_x")
    '("double" "offset_y")
    '("double" "scale_x")
    '("double" "scale_y")
    '("GdkInterpType" "interp_type")
    '("int" "overall_alpha")
  )
)

(define-method composite_color
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite_color")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest")
    '("int" "dest_x")
    '("int" "dest_y")
    '("int" "dest_width")
    '("int" "dest_height")
    '("double" "offset_x")
    '("double" "offset_y")
    '("double" "scale_x")
    '("double" "scale_y")
    '("GdkInterpType" "interp_type")
    '("int" "overall_alpha")
    '("int" "check_x")
    '("int" "check_y")
    '("int" "check_size")
    '("guint32" "color1")
    '("guint32" "color2")
  )
)

(define-method scale_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_scale_simple")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "dest_width")
    '("int" "dest_height")
    '("GdkInterpType" "interp_type")
  )
)

(define-method composite_color_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite_color_simple")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "dest_width")
    '("int" "dest_height")
    '("GdkInterpType" "interp_type")
    '("int" "overall_alpha")
    '("int" "check_size")
    '("guint32" "color1")
    '("guint32" "color2")
  )
)

;; From gdk-pixbuf-animation.h

(define-function pixbuf_animation_get_type
  (c-name "gdk_pixbuf_animation_get_type")
  (return-type "GType")
)

(define-function pixbuf_animation_new_from_file
  (is-constructor-of GdkPixbufAnimation)
  (c-name "gdk_pixbuf_animation_new_from_file")
  (return-type "GdkPixbufAnimation*")
  (parameters
    '("const-char*" "filename")
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_ref")
  (return-type "GdkPixbufAnimation*")
)

(define-method unref
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_unref")
  (return-type "none")
)

(define-method get_width
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_height")
  (return-type "int")
)

(define-method is_static_image
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_is_static_image")
  (return-type "gboolean")
)

(define-method get_static_image
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_static_image")
  (return-type "GdkPixbuf*")
)

(define-method get_iter
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_iter")
  (return-type "GdkPixbufAnimationIter*")
  (parameters
    '("const-GTimeVal*" "start_time")
  )
)

(ifdef GDK_PIXBUF_ENABLE_BACKEND

(define-method non_anim_new
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_non_anim_new")
  (return-type "GdkPixbufAnimation*")
)

(define-virtual is_static_image
  (of-object "GdkPixbufAnimation")
  (return-type "gboolean")
)

(define-virtual get_static_image
  (of-object "GdkPixbufAnimation")
  (return-type "GdkPixbuf*")
)

(define-virtual get_size
  (of-object "GdkPixbufAnimation")
  (return-type "none")
  (parameters
    '("int*" "width")
    '("int*" "height")
  )
)

(define-virtual get_iter
  (of-object "GdkPixbufAnimation")
  (return-type "GdkPixbufAnimationIter*")
  (parameters
    '("const-GTimeVal*" "start_time")
  )
)
)

(define-function pixbuf_animation_iter_get_type
  (c-name "gdk_pixbuf_animation_iter_get_type")
  (return-type "GType")
)

(define-method get_delay_time
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_get_delay_time")
  (return-type "int")
)

(define-method get_pixbuf
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method on_currently_loading_frame
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_on_currently_loading_frame")
  (return-type "gboolean")
)

(define-method advance
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_advance")
  (return-type "gboolean")
  (parameters
    '("const-GTimeVal*" "current_time")
  )
)

(ifdef GDK_PIXBUF_ENABLE_BACKEND

(define-virtual get_delay_time
  (of-object "GdkPixbufAnimationIter")
  (return-type "int")
)

(define-virtual get_pixbuf
  (of-object "GdkPixbufAnimationIter")
  (return-type "GdkPixbuf*")
)

(define-virtual on_currently_loading_frame
  (of-object "GdkPixbufAnimationIter")
  (return-type "gboolean")
)

(define-virtual advance
  (of-object "GdkPixbufAnimationIter")
  (return-type "gboolean")
  (parameters
    '("const-GTimeVal*" "current_time")
  )
)
)


;; From gdk-pixbuf-core.h

(define-function pixbuf_error_quark
  (c-name "gdk_pixbuf_error_quark")
  (return-type "GQuark")
)

(define-function pixbuf_get_type
  (c-name "gdk_pixbuf_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_ref")
  (return-type "GdkPixbuf*")
)

(define-method unref
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_unref")
  (return-type "none")
)

(define-function pixbuf_new_from_file_at_scale
  (c-name "gdk_pixbuf_new_from_file_at_scale")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-char*" "filename")
    '("int" "width")
    '("int" "height")
    '("gboolean" "preserve_aspect_ratio")
    '("GError**" "error")
  )
)

(define-method save_to_callbackv
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_callbackv")
  (return-type "gboolean")
  (parameters
    '("GdkPixbufSaveFunc" "save_func")
    '("gpointer" "user_data")
    '("const-char*" "type")
    '("char**" "option_keys")
    '("char**" "option_values")
    '("GError**" "error")
  )
)

(define-method save_to_buffer
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_buffer")
  (return-type "gboolean")
  (parameters
    '("gchar**" "buffer")
    '("gsize*" "buffer_size")
    '("const-char*" "type")
    '("GError**" "error")
  )
  (varargs #t)
)

(define-method save_to_bufferv
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_bufferv")
  (return-type "gboolean")
  (parameters
    '("gchar**" "buffer")
    '("gsize*" "buffer_size")
    '("const-char*" "type")
    '("char**" "option_keys")
    '("char**" "option_values")
    '("GError**" "error")
  )
)

(define-method apply_embedded_orientation
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_apply_embedded_orientation")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
)

(define-method get_option
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_option")
  (return-type "const-char*")
  (parameters
    '("const-char*" "key")
  )
)

;; From gdk-pixbuf-enum-types.h

(define-function pixbuf_alpha_mode_get_type
  (c-name "gdk_pixbuf_alpha_mode_get_type")
  (return-type "GType")
)

(define-function colorspace_get_type
  (c-name "gdk_colorspace_get_type")
  (return-type "GType")
)

(define-function pixbuf_error_get_type
  (c-name "gdk_pixbuf_error_get_type")
  (return-type "GType")
)

(define-function interp_type_get_type
  (c-name "gdk_interp_type_get_type")
  (return-type "GType")
)

(define-function pixbuf_rotation_get_type
  (c-name "gdk_pixbuf_rotation_get_type")
  (return-type "GType")
)



(define-function pixbuf_get_formats
  (c-name "gdk_pixbuf_get_formats")
  (return-type "GSList*")
)

(define-function pixbuf_get_file_info
  (c-name "gdk_pixbuf_get_file_info")
  (return-type "GdkPixbufFormat*")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
   )
)

(define-method get_name
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_name")
  (return-type "gchar*")
)

(define-method get_description
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_description")
  (return-type "gchar*")
)

(define-method get_mime_types
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_mime_types")
  (return-type "gchar**")
)

(define-method get_extensions
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_extensions")
  (return-type "gchar**")
)

(define-method is_writable
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_writable")
  (return-type "gboolean")
)

(define-method is_scalable
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_scalable")
  (return-type "gboolean")
)

(define-method is_disabled
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_disabled")
  (return-type "gboolean")
)

(define-method set_disabled
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_set_disabled")
  (return-type "none")
  (parameters
    '("gboolean" "disabled")
  )
)

(define-method get_license
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_license")
  (return-type "gchar*")
)

(ifdef GDK_PIXBUF_ENABLE_BACKEND

(define-method set_option
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_set_option")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)
)



;; From /opt/gnome/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h

(define-function pixbuf_loader_get_type
  (c-name "gdk_pixbuf_loader_get_type")
  (return-type "GType")
)

(define-function pixbuf_loader_new
  (deprecated "use gtk.gdk.PixbufLoader instead")
  (c-name "gdk_pixbuf_loader_new")
  (return-type "GdkPixbufLoader*")
)

(define-function pixbuf_loader_new_with_type
  (c-name "gdk_pixbuf_loader_new_with_type")
  (is-constructor-of GdkPixbufLoader)
  (return-type "GdkPixbufLoader*")
  (parameters
    '("const-char*" "image_type")
    '("GError**" "error")
  )
)

(define-function pixbuf_loader_new_with_mime_type
  (c-name "gdk_pixbuf_loader_new_with_mime_type")
  (return-type "GdkPixbufLoader*")
  (parameters
    '("const-char*" "mime_type")
    '("GError**" "error")
  )
  (caller-owns-return #t)
)

(define-method write
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_write")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "buf")
    '("gsize" "count")
    '("GError**" "error")
  )
)

(define-method get_pixbuf
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_animation
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_animation")
  (return-type "GdkPixbufAnimation*")
)

(define-method close
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_close")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_size
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_set_size")
  (return-type "none")
  (parameters
    '("int" "width")
    '("int" "height")
  )
)

(define-method get_format
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_format")
  (return-type "GdkPixbufFormat*")
)

(define-virtual size_prepared
  (of-object "GdkPixbufLoader")
  (return-type "none")
  (parameters
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual area_prepared
  (of-object "GdkPixbufLoader")
  (return-type "none")
)

(define-virtual area_updated
  (of-object "GdkPixbufLoader")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual closed
  (of-object "GdkPixbufLoader")
  (return-type "none")
)



;; From gdk-pixbuf-simple-anim.h
 
(define-function pixbuf_simple_anim_get_type
  (c-name "gdk_pixbuf_simple_anim_get_type")
  (return-type "GType")
)
 
(define-function pixbuf_simple_anim_iter_get_type
  (c-name "gdk_pixbuf_simple_anim_iter_get_type")
  (return-type "GType")
)
 
(define-function pixbuf_simple_anim_new
  (c-name "gdk_pixbuf_simple_anim_new")
  (is-constructor-of "GdkPixbufSimpleAnim")
  (return-type "GdkPixbufSimpleAnim*")
  (parameters
    '("gint" "width")
    '("gint" "height")
    '("gfloat" "rate")
  )
)
 
(define-method add_frame
  (of-object "GdkPixbufSimpleAnim")
  (c-name "gdk_pixbuf_simple_anim_add_frame")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)
 
 
 
;; From gdk-pixbuf-transform.h
 
(define-method flip
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_flip")
  (return-type "GdkPixbuf*")
  (parameters
    '("gboolean" "horizontal")
  )
  (caller-owns-return #t)
)

;; From gdk-pixdata.h

(define-method serialize
  (of-object "GdkPixdata")
  (c-name "gdk_pixdata_serialize")
  (return-type "guint8*")
  (parameters
    '("guint*" "stream_length_p")
  )
)

(define-method deserialize
  (of-object "GdkPixdata")
  (c-name "gdk_pixdata_deserialize")
  (return-type "gboolean")
  (parameters
    '("guint" "stream_length")
    '("const-guint8*" "stream")
    '("GError**" "error")
  )
)

(define-method from_pixbuf
  (of-object "GdkPixdata")
  (c-name "gdk_pixdata_from_pixbuf")
  (return-type "gpointer")
  (parameters
    '("const-GdkPixbuf*" "pixbuf")
    '("gboolean" "use_rle")
  )
)

(define-function pixbuf_from_pixdata
  (c-name "gdk_pixbuf_from_pixdata")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-GdkPixdata*" "pixdata")
    '("gboolean" "copy_pixels")
    '("GError**" "error")
  )
)

(define-method to_csource
  (of-object "GdkPixdata")
  (c-name "gdk_pixdata_to_csource")
  (return-type "GString*")
  (parameters
    '("const-gchar*" "name")
    '("GdkPixdataDumpType" "dump_type")
  )
)



;;

(define-method intersect
  (of-object "GdkRectangle")
  (c-name "gdk_rectangle_intersect")
  (return-type "gboolean")
  (parameters
    '("GdkRectangle*" "src1")
    '("GdkRectangle*" "src2")
    '("GdkRectangle*" "dest")
  )
)

(define-method union
  (of-object "GdkRectangle")
  (c-name "gdk_rectangle_union")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "src1")
    '("GdkRectangle*" "src2")
    '("GdkRectangle*" "dest")
  )
)

(define-function rectangle_new
  (c-name "gdk_rectangle_new")
  (is-constructor-of "GdkRectangle")
  (return-type "GdkRectangle")
)


(define-method get_clipbox
  (of-object "GdkRegion")
  (c-name "gdk_region_get_clipbox")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method empty
  (of-object "GdkRegion")
  (c-name "gdk_region_empty")
  (return-type "gboolean")
)


(define-method equal
  (of-object "GdkRegion")
  (c-name "gdk_region_equal")
  (return-type "gboolean")
  (parameters
    '("GdkRegion*" "other")
  )
)

(define-method point_in
  (of-object "GdkRegion")
  (c-name "gdk_region_point_in")
  (return-type "gboolean")
  (parameters
    '("int" "x")
    '("int" "y")
  )
)

(define-method rect_in
  (of-object "GdkRegion")
  (c-name "gdk_region_rect_in")
  (return-type "GdkOverlapType")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

;; From gdkenumtypes.h

(define-function cursor_type_get_type
  (c-name "gdk_cursor_type_get_type")
  (return-type "GType")
)

(define-function drag_action_get_type
  (c-name "gdk_drag_action_get_type")
  (return-type "GType")
)

(define-function drag_protocol_get_type
  (c-name "gdk_drag_protocol_get_type")
  (return-type "GType")
)

(define-function filter_return_get_type
  (c-name "gdk_filter_return_get_type")
  (return-type "GType")
)

(define-function event_type_get_type
  (c-name "gdk_event_type_get_type")
  (return-type "GType")
)

(define-function event_mask_get_type
  (c-name "gdk_event_mask_get_type")
  (return-type "GType")
)

(define-function visibility_state_get_type
  (c-name "gdk_visibility_state_get_type")
  (return-type "GType")
)

(define-function scroll_direction_get_type
  (c-name "gdk_scroll_direction_get_type")
  (return-type "GType")
)

(define-function notify_type_get_type
  (c-name "gdk_notify_type_get_type")
  (return-type "GType")
)

(define-function crossing_mode_get_type
  (c-name "gdk_crossing_mode_get_type")
  (return-type "GType")
)

(define-function property_state_get_type
  (c-name "gdk_property_state_get_type")
  (return-type "GType")
)

(define-function window_state_get_type
  (c-name "gdk_window_state_get_type")
  (return-type "GType")
)

(define-function setting_action_get_type
  (c-name "gdk_setting_action_get_type")
  (return-type "GType")
)

(define-function owner_change_get_type
  (c-name "gdk_owner_change_get_type")
  (return-type "GType")
)

(define-function font_type_get_type
  (c-name "gdk_font_type_get_type")
  (return-type "GType")
)

(define-function cap_style_get_type
  (c-name "gdk_cap_style_get_type")
  (return-type "GType")
)

(define-function fill_get_type
  (c-name "gdk_fill_get_type")
  (return-type "GType")
)

(define-function function_get_type
  (c-name "gdk_function_get_type")
  (return-type "GType")
)

(define-function join_style_get_type
  (c-name "gdk_join_style_get_type")
  (return-type "GType")
)

(define-function line_style_get_type
  (c-name "gdk_line_style_get_type")
  (return-type "GType")
)

(define-function subwindow_mode_get_type
  (c-name "gdk_subwindow_mode_get_type")
  (return-type "GType")
)

(define-function gc_values_mask_get_type
  (c-name "gdk_gc_values_mask_get_type")
  (return-type "GType")
)

(define-function image_type_get_type
  (c-name "gdk_image_type_get_type")
  (return-type "GType")
)

(define-function extension_mode_get_type
  (c-name "gdk_extension_mode_get_type")
  (return-type "GType")
)

(define-function input_source_get_type
  (c-name "gdk_input_source_get_type")
  (return-type "GType")
)

(define-function input_mode_get_type
  (c-name "gdk_input_mode_get_type")
  (return-type "GType")
)

(define-function axis_use_get_type
  (c-name "gdk_axis_use_get_type")
  (return-type "GType")
)

(define-function prop_mode_get_type
  (c-name "gdk_prop_mode_get_type")
  (return-type "GType")
)

(define-function fill_rule_get_type
  (c-name "gdk_fill_rule_get_type")
  (return-type "GType")
)

(define-function overlap_type_get_type
  (c-name "gdk_overlap_type_get_type")
  (return-type "GType")
)

(define-function rgb_dither_get_type
  (c-name "gdk_rgb_dither_get_type")
  (return-type "GType")
)

(define-function byte_order_get_type
  (c-name "gdk_byte_order_get_type")
  (return-type "GType")
)

(define-function modifier_type_get_type
  (c-name "gdk_modifier_type_get_type")
  (return-type "GType")
)

(define-function input_condition_get_type
  (c-name "gdk_input_condition_get_type")
  (return-type "GType")
)

(define-function status_get_type
  (c-name "gdk_status_get_type")
  (return-type "GType")
)

(define-function grab_status_get_type
  (c-name "gdk_grab_status_get_type")
  (return-type "GType")
)

(define-function visual_type_get_type
  (c-name "gdk_visual_type_get_type")
  (return-type "GType")
)

(define-function window_class_get_type
  (c-name "gdk_window_class_get_type")
  (return-type "GType")
)

(define-function window_type_get_type
  (c-name "gdk_window_type_get_type")
  (return-type "GType")
)

(define-function window_attributes_type_get_type
  (c-name "gdk_window_attributes_type_get_type")
  (return-type "GType")
)

(define-function window_hints_get_type
  (c-name "gdk_window_hints_get_type")
  (return-type "GType")
)

(define-function window_type_hint_get_type
  (c-name "gdk_window_type_hint_get_type")
  (return-type "GType")
)

(define-function wm_decoration_get_type
  (c-name "gdk_wm_decoration_get_type")
  (return-type "GType")
)

(define-function wm_function_get_type
  (c-name "gdk_wm_function_get_type")
  (return-type "GType")
)

(define-function gravity_get_type
  (c-name "gdk_gravity_get_type")
  (return-type "GType")
)

(define-function window_edge_get_type
  (c-name "gdk_window_edge_get_type")
  (return-type "GType")
)

;; From gdkregion.h

(define-function region_new
  (c-name "gdk_region_new")
  (is-constructor-of "GdkRegion")
  (return-type "GdkRegion*")
)

(define-function region_polygon
  (c-name "gdk_region_polygon")
  (return-type "GdkRegion*")
  (parameters
    '("GdkPoint*" "points")
    '("gint" "npoints")
    '("GdkFillRule" "fill_rule")
  )
)

(define-method copy
  (of-object "GdkRegion")
  (c-name "gdk_region_copy")
  (return-type "GdkRegion*")
)

(define-function region_rectangle
  (c-name "gdk_region_rectangle")
  (return-type "GdkRegion*")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method destroy
  (of-object "GdkRegion")
  (c-name "gdk_region_destroy")
  (return-type "none")
)

(define-method get_rectangles
  (of-object "GdkRegion")
  (c-name "gdk_region_get_rectangles")
  (return-type "none")
  (parameters
    '("GdkRectangle**" "rectangles")
    '("gint*" "n_rectangles")
  )
)

(define-method offset
  (of-object "GdkRegion")
  (c-name "gdk_region_offset")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method shrink
  (of-object "GdkRegion")
  (c-name "gdk_region_shrink")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method union_with_rect
  (of-object "GdkRegion")
  (c-name "gdk_region_union_with_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method intersect
  (of-object "GdkRegion")
  (c-name "gdk_region_intersect")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method union
  (of-object "GdkRegion")
  (c-name "gdk_region_union")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method subtract
  (of-object "GdkRegion")
  (c-name "gdk_region_subtract")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method xor
  (of-object "GdkRegion")
  (c-name "gdk_region_xor")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method spans_intersect_foreach
  (of-object "GdkRegion")
  (c-name "gdk_region_spans_intersect_foreach")
  (return-type "none")
  (parameters
    '("GdkSpan*" "spans")
    '("int" "n_spans")
    '("gboolean" "sorted")
    '("GdkSpanFunc" "function")
    '("gpointer" "data")
  )
)

;; From /opt/gnome-devel/include/gtk-2.0/gdk/gdkcairo.h

(define-method cairo_create
  (of-object "GdkDrawable")
  (c-name "gdk_cairo_create")
  (return-type "cairo_t*"))

(define-function cairo_set_source_color
  (c-name "gdk_cairo_set_source_color")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkColor*" "color")
  )
)

(define-function cairo_set_source_pixbuf
  (c-name "gdk_cairo_set_source_pixbuf")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkPixbuf*" "pixbuf")
    '("double" "pixbuf_x")
    '("double" "pixbuf_y")
  )
)

(define-function cairo_rectangle
  (c-name "gdk_cairo_rectangle")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkRectangle*" "rectangle")
  )
)

(define-function cairo_region
  (c-name "gdk_cairo_region")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkRegion*" "region")
  )
)


;; gdkx.h

(ifdef GDK_TARGET_X11

(define-method get_xdisplay
  (of-object "GdkDrawable")
  (c-name "gdk_x11_drawable_get_xdisplay")
  (return-type "Display*")
)

(define-method get_xid
  (of-object "GdkDrawable")
  (c-name "gdk_x11_drawable_get_xid")
  (return-type "XID")
)

(define-method get_xdisplay
  (of-object "GdkImage")
  (c-name "gdk_x11_image_get_xdisplay")
  (return-type "Display*")
)

(define-method get_ximage
  (of-object "GdkImage")
  (c-name "gdk_x11_image_get_ximage")
  (return-type "XImage*")
)

(define-method get_xdisplay
  (of-object "GdkColormap")
  (c-name "gdk_x11_colormap_get_xdisplay")
  (return-type "Display*")
)

(define-method get_xcolormap
  (of-object "GdkColormap")
  (c-name "gdk_x11_colormap_get_xcolormap")
  (return-type "Colormap")
)

(define-method get_xdisplay
  (of-object "GdkCursor")
  (c-name "gdk_x11_cursor_get_xdisplay")
  (return-type "Display*")
)

(define-method get_xcursor
  (of-object "GdkCursor")
  (c-name "gdk_x11_cursor_get_xcursor")
  (return-type "Cursor")
)

(define-method get_xdisplay
  (of-object "GdkDisplay")
  (c-name "gdk_x11_display_get_xdisplay")
  (return-type "Display*")
)

(define-method get_xvisual
  (of-object "GdkVisual")
  (c-name "gdk_x11_visual_get_xvisual")
  (return-type "Visual*")
)

(define-method get_xdisplay
  (of-object "GdkGC")
  (c-name "gdk_x11_gc_get_xdisplay")
  (return-type "Display*")
)

(define-method get_xgc
  (of-object "GdkGC")
  (c-name "gdk_x11_gc_get_xgc")
  (return-type "GC")
)

(define-method get_xscreen
  (of-object "GdkScreen")
  (c-name "gdk_x11_screen_get_xscreen")
  (return-type "Screen*")
)

(define-method get_screen_number
  (of-object "GdkScreen")
  (c-name "gdk_x11_screen_get_screen_number")
  (return-type "int")
)

(define-method set_user_time
  (of-object "GdkWindow")
  (c-name "gdk_x11_window_set_user_time")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method move_to_current_desktop
  (of-object "GdkWindow")
  (c-name "gdk_x11_window_move_to_current_desktop")
  (return-type "none")
)

(define-method get_window_manager_name
  (of-object "GdkScreen")
  (c-name "gdk_x11_screen_get_window_manager_name")
  (return-type "const-char*")
)

(define-function x11_get_default_root_xwindow
  (c-name "gdk_x11_get_default_root_xwindow")
  (return-type "Window")
)

(define-function x11_get_default_xdisplay
  (c-name "gdk_x11_get_default_xdisplay")
  (return-type "Display*")
)

(define-function x11_get_default_screen
  (c-name "gdk_x11_get_default_screen")
  (return-type "gint")
)

(define-method lookup_visual
  (of-object "GdkScreen")
  (c-name "gdk_x11_screen_lookup_visual")
  (return-type "GdkVisual*")
  (parameters
    '("VisualID" "xvisualid")
  )
)

(define-function gdkx_visual_get
  (c-name "gdkx_visual_get")
  (return-type "GdkVisual*")
  (parameters
    '("VisualID" "xvisualid")
  )
)

(define-function gdkx_colormap_get
  (c-name "gdkx_colormap_get")
  (return-type "GdkColormap*")
  (parameters
    '("Colormap" "xcolormap")
  )
)

(define-function x11_colormap_foreign_new
  (c-name "gdk_x11_colormap_foreign_new")
  (is-constructor-of "GdkX11ColormapForeign")
  (return-type "GdkColormap*")
  (parameters
    '("GdkVisual*" "visual")
    '("Colormap" "xcolormap")
  )
)

(define-function xid_table_lookup_for_display
  (c-name "gdk_xid_table_lookup_for_display")
  (return-type "gpointer")
  (parameters
    '("GdkDisplay*" "display")
    '("XID" "xid")
  )
)

(define-function x11_get_server_time
  (c-name "gdk_x11_get_server_time")
  (return-type "guint32")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method get_user_time
  (of-object "GdkDisplay")
  (c-name "gdk_x11_display_get_user_time")
  (return-type "guint32")
)

(define-method set_cursor_theme
  (of-object "GdkDisplay")
  (c-name "gdk_x11_display_set_cursor_theme")
  (return-type "none")
  (parameters
    '("const-gchar*" "theme")
    '("const-gint" "size")
  )
)

(define-method supports_net_wm_hint
  (of-object "GdkScreen")
  (c-name "gdk_x11_screen_supports_net_wm_hint")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "property")
  )
)

(define-function xid_table_lookup
  (c-name "gdk_xid_table_lookup")
  (return-type "gpointer")
  (parameters
    '("XID" "xid")
  )
)

(define-function net_wm_supports
  (c-name "gdk_net_wm_supports")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "property")
  )
)

(define-function x11_grab_server
  (c-name "gdk_x11_grab_server")
  (return-type "none")
)

(define-function x11_ungrab_server
  (c-name "gdk_x11_ungrab_server")
  (return-type "none")
)

(define-function x11_lookup_xdisplay
  (c-name "gdk_x11_lookup_xdisplay")
  (return-type "GdkDisplay*")
  (parameters
    '("Display*" "xdisplay")
  )
)

(define-function x11_atom_to_xatom_for_display
  (c-name "gdk_x11_atom_to_xatom_for_display")
  (return-type "Atom")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkAtom" "atom")
  )
)

(define-function x11_xatom_to_atom_for_display
  (c-name "gdk_x11_xatom_to_atom_for_display")
  (return-type "GdkAtom")
  (parameters
    '("GdkDisplay*" "display")
    '("Atom" "xatom")
  )
)

(define-function x11_get_xatom_by_name_for_display
  (c-name "gdk_x11_get_xatom_by_name_for_display")
  (return-type "Atom")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "atom_name")
  )
)

(define-function x11_get_xatom_name_for_display
  (c-name "gdk_x11_get_xatom_name_for_display")
  (return-type "const-gchar*")
  (parameters
    '("GdkDisplay*" "display")
    '("Atom" "xatom")
  )
)

(define-function x11_atom_to_xatom
  (c-name "gdk_x11_atom_to_xatom")
  (return-type "Atom")
  (parameters
    '("GdkAtom" "atom")
  )
)

(define-function x11_xatom_to_atom
  (c-name "gdk_x11_xatom_to_atom")
  (return-type "GdkAtom")
  (parameters
    '("Atom" "xatom")
  )
)

(define-function x11_get_xatom_by_name
  (c-name "gdk_x11_get_xatom_by_name")
  (return-type "Atom")
  (parameters
    '("const-gchar*" "atom_name")
  )
)

(define-function x11_get_xatom_name
  (c-name "gdk_x11_get_xatom_name")
  (return-type "const-gchar*")
  (parameters
    '("Atom" "xatom")
  )
)

(define-method grab
  (of-object "GdkDisplay")
  (c-name "gdk_x11_display_grab")
  (return-type "none")
)

(define-method ungrab
  (of-object "GdkDisplay")
  (c-name "gdk_x11_display_ungrab")
  (return-type "none")
)

(define-function x11_register_standard_event_type
  (c-name "gdk_x11_register_standard_event_type")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
    '("gint" "event_base")
    '("gint" "n_events")
  )
)

(define-method get_xfont
  (of-object "GdkFont")
  (c-name "gdk_x11_font_get_xfont")
  (return-type "gpointer")
)

(define-method x11_font_get_xdisplay
  (of-object "GdkFont")
  (c-name "gdk_x11_font_get_xdisplay")
  (return-type "Display*")
)

(define-method get_name
  (of-object "GdkFont")
  (c-name "gdk_x11_font_get_name")
  (return-type "const-char*")
)


) ; (ifdef GDK_TARGET_X11
;; -*- scheme -*-
; object definitions ...
(define-object AppLaunchContext
  (in-module "Gdk")
  (parent "GAppLaunchContext")
  (c-name "GdkAppLaunchContext")
  (gtype-id "GDK_TYPE_APP_LAUNCH_CONTEXT")
)

(define-object Colormap
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkColormap")
  (gtype-id "GDK_TYPE_COLORMAP")
)

(define-object Device
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkDevice")
  (gtype-id "GDK_TYPE_DEVICE")
  (fields
    '("gchar*" "name")
    '("GdkInputSource" "source")
    '("GdkInputMode" "mode")
    '("gboolean" "has_cursor")
    '("gint" "num_axes")
    '("GdkDeviceAxis*" "axes")
    '("gint" "num_keys")
    '("GdkDeviceKey*" "keys")
  )
)

(define-object Display
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkDisplay")
  (gtype-id "GDK_TYPE_DISPLAY")
)

(define-object DisplayManager
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkDisplayManager")
  (gtype-id "GDK_TYPE_DISPLAY_MANAGER")
)

(define-object DragContext
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkDragContext")
  (gtype-id "GDK_TYPE_DRAG_CONTEXT")
  (fields
    '("GdkDragProtocol" "protocol")
    '("gboolean" "is_source")
    '("GdkWindow*" "source_window")
    '("GdkWindow*" "dest_window")
    '("GList*" "targets")
    '("GdkDragAction" "actions")
    '("GdkDragAction" "suggested_action")
    '("GdkDragAction" "action")
    '("guint32" "start_time")
  )
)

(define-object Drawable
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkDrawable")
  (gtype-id "GDK_TYPE_DRAWABLE")
  (fields
    '("guint32" "xid")
    '("gulong*" "handle")
  )
)

(define-object Window
  (in-module "Gdk")
  (parent "GdkDrawable")
  (c-name "GdkWindow")
  (gtype-id "GDK_TYPE_WINDOW")
)

(define-object PangoRenderer
  (in-module "Gdk")
  (parent "PangoRenderer")
  (c-name "GdkPangoRenderer")
  (gtype-id "GDK_TYPE_PANGO_RENDERER")
)

(define-object Pixmap
  (in-module "Gdk")
  (parent "GdkDrawable")
  (c-name "GdkPixmap")
  (gtype-id "GDK_TYPE_PIXMAP")
)

(define-object GC
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkGC")
  (gtype-id "GDK_TYPE_GC")
)

(define-object Image
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkImage")
  (gtype-id "GDK_TYPE_IMAGE")
)

(define-object Keymap
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkKeymap")
  (gtype-id "GDK_TYPE_KEYMAP")
)

(define-object Pixbuf
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkPixbuf")
  (gtype-id "GDK_TYPE_PIXBUF")
  (fields
; XXXX this next one isn't a real field.  added for Python bindings
   '("guchar*" "pixel_array")
  )
)

(define-object PixbufAnimation
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkPixbufAnimation")
  (gtype-id "GDK_TYPE_PIXBUF_ANIMATION")
)

(define-object PixbufAnimationIter
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkPixbufAnimationIter")
  (gtype-id "GDK_TYPE_PIXBUF_ANIMATION_ITER")
)

(define-object PixbufLoader
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkPixbufLoader")
  (gtype-id "GDK_TYPE_PIXBUF_LOADER")
)

(define-object PixbufSimpleAnim
  (in-module "Gdk")
  (parent "GdkPixbufAnimation")
  (c-name "GdkPixbufSimpleAnim")
  (gtype-id "GDK_TYPE_PIXBUF_SIMPLE_ANIM")
)

(define-object PixbufSimpleAnimIter
  (in-module "Gdk")
  (parent "GdkPixbufAnimationIter")
  (c-name "GdkPixbufSimpleAnimIter")
  (gtype-id "GDK_TYPE_PIXBUF_SIMPLE_ANIM_ITER")
)


(define-object Screen
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkScreen")
  (gtype-id "GDK_TYPE_SCREEN")
)

(define-object Visual
  (in-module "Gdk")
  (parent "GObject")
  (c-name "GdkVisual")
  (gtype-id "GDK_TYPE_VISUAL")
  (fields
    '("GdkVisualType" "type")
    '("gint" "depth")
    '("GdkByteOrder" "byte_order")
    '("gint" "colormap_size")
    '("gint" "bits_per_rgb")
    '("guint32" "red_mask")
    '("gint" "red_shift")
    '("gint" "red_prec")
    '("guint32" "green_mask")
    '("gint" "green_shift")
    '("gint" "green_prec")
    '("guint32" "blue_mask")
    '("gint" "blue_shift")
    '("gint" "blue_prec")
  )
)


;; Boxed types ...

(define-boxed Event
  (in-module "Gdk")
  (c-name "GdkEvent")
  (gtype-id "GDK_TYPE_EVENT")
  (copy-func "gdk_event_copy")
  (release-func "gdk_event_free")
)

(define-boxed Font
  (in-module "Gdk")
  (c-name "GdkFont")
  (gtype-id "GDK_TYPE_FONT")
  (copy-func "gdk_font_ref")
  (release-func "gdk_font_unref")
  (fields
    '("GdkFontType" "type")
    '("gint" "ascent")
    '("gint" "descent")
  )
)

(define-boxed Color
  (in-module "Gdk")
  (c-name "GdkColor")
  (gtype-id "GDK_TYPE_COLOR")
  (copy-func "gdk_color_copy")
  (release-func "gdk_color_free")
  (fields
    '("guint32" "pixel")
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
    ;; Fake.  Only defined since codegen currently doesn't support
    ;; defining attributes in '.override' files.
    '("gfloat" "red_float")
    '("gfloat" "green_float")
    '("gfloat" "blue_float")
    '("gfloat" "hue")
    '("gfloat" "saturation")
    '("gfloat" "value")
  )
)

(define-boxed Cursor
  (in-module "Gdk")
  (c-name "GdkCursor")
  (gtype-id "GDK_TYPE_CURSOR")
  (copy-func "gdk_cursor_ref")
  (release-func "gdk_cursor_unref")
  (fields
    '("GdkCursorType" "type")
  )
)

(define-boxed Rectangle
  (in-module "Gdk")
  (c-name "GdkRectangle")
  (gtype-id "GDK_TYPE_RECTANGLE")
  (fields
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-boxed Region
  (in-module "Gdk")
  (c-name "GdkRegion")
  (gtype-id "PYGDK_TYPE_REGION")
)

;; Enumerations and flags ...


(define-object PixmapObject
  (in-module "Gdk")
  (parent "GdkDrawable")
  (c-name "GdkPixmapObject")
  (gtype-id "GDK_TYPE_PIXMAP_OBJECT")
)

(define-object WindowObject
  (in-module "Gdk")
  (parent "GdkDrawable")
  (c-name "GdkWindowObject")
  (gtype-id "GDK_TYPE_WINDOW_OBJECT")

)
;; -*- scheme -*-
;; THIS FILE IS GENERATED - DO NOT EDIT
(include "gdk-base.defs")
(include "gdk-2.10.defs")
(include "gdk-2.12.defs")
(include "gdk-2.14.defs")
(include "gdk-2.16.defs")
;; -*- scheme -*-
;; THIS FILE IS GENERATED - DO NOT EDIT
(include "gdk-base-types.defs")
;; -*- scheme -*-

(include "gtk-2.10-types.defs")

;; From gtkaboutdialog.h



;; From gtkaccelgroup.h



;; From gtkaccellabel.h



;; From gtkaccelmap.h



;; From gtkaccessible.h



;; From gtkactiongroup.h



;; From gtkaction.h

(define-method get_action
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_action")
  (return-type "GtkAction*")
)

(define-method get_accel_closure
  (of-object "GtkAction")
  (c-name "gtk_action_get_accel_closure")
  (return-type "GClosure*")
)



;; From gtkadjustment.h



;; From gtkalignment.h



;; From gtkarrow.h



;; From gtkaspectframe.h



;; From gtkassistant.h

(define-function assistant_get_type
  (c-name "gtk_assistant_get_type")
  (return-type "GType")
)

(define-function assistant_new
  (c-name "gtk_assistant_new")
  (is-constructor-of "GtkAssistant")
  (return-type "GtkWidget*")
)

(define-method get_current_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_current_page")
  (return-type "gint")
)

(define-method set_current_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_current_page")
  (return-type "none")
  (parameters
    '("gint" "page_num")
  )
)

(define-method get_n_pages
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_n_pages")
  (return-type "gint")
)

(define-method get_nth_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_nth_page")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "page_num")
  )
)

(define-method prepend_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_prepend_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method append_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_append_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method insert_page
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_insert_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "page")
    '("gint" "position")
  )
)

(define-method set_forward_page_func
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_forward_page_func")
  (return-type "none")
  (parameters
    '("GtkAssistantPageFunc" "page_func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_page_type
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_page_type")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
    '("GtkAssistantPageType" "type")
  )
)

(define-method get_page_type
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_page_type")
  (return-type "GtkAssistantPageType")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method set_page_title
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_page_title")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
    '("const-gchar*" "title")
  )
)

(define-method get_page_title
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_page_title")
  (return-type "const-gchar*")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method set_page_header_image
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_page_header_image")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
    '("GdkPixbuf*" "pixbuf" (null-ok) (default "NULL"))
  )
)

(define-method get_page_header_image
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_page_header_image")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method set_page_side_image
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_page_side_image")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
    '("GdkPixbuf*" "pixbuf" (null-ok) (default "NULL"))
  )
)

(define-method get_page_side_image
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_page_side_image")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method set_page_complete
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_set_page_complete")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
    '("gboolean" "complete")
  )
)

(define-method get_page_complete
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_get_page_complete")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-method add_action_widget
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_add_action_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method remove_action_widget
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_remove_action_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method update_buttons_state
  (of-object "GtkAssistant")
  (c-name "gtk_assistant_update_buttons_state")
  (return-type "none")
)

(define-virtual prepare
  (of-object "GtkAssistant")
  (return-type "none")
  (parameters
    '("GtkWidget*" "page")
  )
)

(define-virtual apply
  (of-object "GtkAssistant")
  (return-type "none")
)

(define-virtual close
  (of-object "GtkAssistant")
  (return-type "none")
)

(define-virtual cancel
  (of-object "GtkAssistant")
  (return-type "none")
)




;; From gtkbbox.h



;; From gtkbindings.h



;; From gtkbin.h



;; From gtkbox.h



;; From gtkbutton.h

(define-method set_image_position
  (of-object "GtkButton")
  (c-name "gtk_button_set_image_position")
  (return-type "none")
  (parameters
    '("GtkPositionType" "position")
  )
)

(define-method get_image_position
  (of-object "GtkButton")
  (c-name "gtk_button_get_image_position")
  (return-type "GtkPositionType")
)


;; From gtkcalendar.h



;; From gtkcelleditable.h



;; From gtkcelllayout.h



;; From gtkcellrendereraccel.h

(define-function cell_renderer_accel_get_type
  (c-name "gtk_cell_renderer_accel_get_type")
  (return-type "GType")
)

(define-function cell_renderer_accel_new
  (c-name "gtk_cell_renderer_accel_new")
  (is-constructor-of "GtkCellRendererAccel")
  (return-type "GtkCellRenderer*")
)

(define-virtual accel_edited
  (of-object "GtkCellRendererAccel")
  (return-type "none")
  (parameters
    '("const-gchar*" "path_string")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
    '("guint" "hardware_keycode")
  )
)

(define-virtual accel_cleared
  (of-object "GtkCellRendererAccel")
  (return-type "none")
  (parameters
    '("const-gchar*" "path_string")
  )
)



;; From gtkcellrenderercombo.h



;; From gtkcellrenderer.h



;; From gtkcellrendererpixbuf.h



;; From gtkcellrendererprogress.h



;; From gtkcellrendererspin.h

(define-function cell_renderer_spin_get_type
  (c-name "gtk_cell_renderer_spin_get_type")
  (return-type "GType")
)

(define-function cell_renderer_spin_new
  (c-name "gtk_cell_renderer_spin_new")
  (is-constructor-of "GtkCellRendererSpin")
  (return-type "GtkCellRenderer*")
)



;; From gtkcellrenderertext.h



;; From gtkcellrenderertoggle.h



;; From gtkcellview.h



;; From gtkcheckbutton.h



;; From gtkcheckmenuitem.h



;; From gtkclipboard.h

(define-method request_rich_text
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_rich_text")
  (return-type "none")
  (parameters
    '("GtkTextBuffer*" "buffer")
    '("GtkClipboardRichTextReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method wait_for_rich_text
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_rich_text")
  (return-type "guint8*")
  (parameters
    '("GtkTextBuffer*" "buffer")
    '("GdkAtom*" "format")
    '("gsize*" "length")
  )
)

(define-method wait_is_rich_text_available
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_is_rich_text_available")
  (return-type "gboolean")
  (parameters
    '("GtkTextBuffer*" "buffer")
  )
)



;; From gtkclist.h



;; From gtkcolorbutton.h



;; From gtkcolorseldialog.h



;; From gtkcolorsel.h



;; From gtkcomboboxentry.h



;; From gtkcombobox.h

(define-method get_title
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_title")
  (return-type "const-gchar*")
)

(define-method set_title
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)



;; From gtkcombo.h



;; From gtkcontainer.h



;; From gtkctree.h



;; From gtkcurve.h



;; From gtkdebug.h



;; From gtkdialog.h



;; From gtkdnd.h

(define-method drag_dest_set_track_motion
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set_track_motion")
  (return-type "none")
  (parameters
    '("gboolean" "track_motion")
  )
)

(define-method drag_dest_get_track_motion
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_get_track_motion")
  (return-type "gboolean")
)



;; From gtkdrawingarea.h



;; From gtkeditable.h



;; From gtkentrycompletion.h



;; From gtkentry.h

(define-method set_inner_border
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_inner_border")
  (return-type "none")
  (parameters
    '("const-GtkBorder*" "border" (null-ok))
  )
)

(define-method get_inner_border
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_inner_border")
  (return-type "const-GtkBorder*")
)



;; From gtkenums.h



;; From gtkeventbox.h



;; From gtkexpander.h



;; From gtkfilechooserbutton.h

(define-method get_focus_on_click
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_get_focus_on_click")
  (return-type "gboolean")
)

(define-method set_focus_on_click
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_set_focus_on_click")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_click")
  )
)



;; From gtkfilechooserdialog.h



;; From gtkfilechooser.h



;; From gtkfilechooserwidget.h



;; From gtkfilefilter.h



;; From gtkfilesel.h



;; From gtkfilesystem.h

(define-virtual get_info
  (of-object "GtkFileSystem")
  (return-type "GtkFileSystemHandle*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFileInfoType" "types")
    '("GtkFileSystemGetInfoCallback" "callback")
    '("gpointer" "data")
  )
)

(define-virtual cancel_operation
  (of-object "GtkFileSystem")
  (return-type "none")
)



;; From gtkfixed.h



;; From gtkfontbutton.h



;; From gtkfontsel.h



;; From gtkframe.h



;; From gtkgamma.h



;; From gtkgc.h



;; From gtk.h



;; From gtkhandlebox.h



;; From gtkhbbox.h



;; From gtkhbox.h



;; From gtkhpaned.h



;; From gtkhruler.h



;; From gtkhscale.h



;; From gtkhscrollbar.h



;; From gtkhseparator.h



;; From gtkiconfactory.h



;; From gtkicontheme.h



;; From gtkiconview.h



;; From gtkimage.h



;; From gtkimagemenuitem.h



;; From gtkimcontext.h



;; From gtkimcontextsimple.h



;; From gtkimmodule.h



;; From gtkimmulticontext.h



;; From gtkinputdialog.h



;; From gtkinvisible.h



;; From gtkitemfactory.h



;; From gtkitem.h



;; From gtklabel.h

(define-method set_line_wrap_mode
  (of-object "GtkLabel")
  (c-name "gtk_label_set_line_wrap_mode")
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap_mode")
  )
)

(define-method get_line_wrap_mode
  (of-object "GtkLabel")
  (c-name "gtk_label_get_line_wrap_mode")
  (return-type "PangoWrapMode")
)



;; From gtklayout.h



;; From gtklinkbutton.h

(define-function link_button_get_type
  (c-name "gtk_link_button_get_type")
  (return-type "GType")
)

(define-function link_button_new
  (c-name "gtk_link_button_new")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method get_uri
  (of-object "GtkLinkButton")
  (c-name "gtk_link_button_get_uri")
  (return-type "const-gchar*")
)

(define-method set_uri
  (of-object "GtkLinkButton")
  (c-name "gtk_link_button_set_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-function link_button_set_uri_hook
  (c-name "gtk_link_button_set_uri_hook")
  (return-type "GtkLinkButtonUriFunc")
  (parameters
    '("GtkLinkButtonUriFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)



;; From gtklist.h



;; From gtklistitem.h



;; From gtkliststore.h



;; From gtkmain.h



;; From gtkmarshal.h



;; From gtkmenubar.h



;; From gtkmenu.h



;; From gtkmenuitem.h



;; From gtkmenushell.h



;; From gtkmenutoolbutton.h



;; From gtkmessagedialog.h

(define-method set_image
  (of-object "GtkMessageDialog")
  (c-name "gtk_message_dialog_set_image")
  (return-type "none")
  (parameters
    '("GtkWidget*" "image")
  )
)


;; From gtkmisc.h



;; From gtkmodules.h



;; From gtknotebook.h

(define-function notebook_set_window_creation_hook
  (c-name "gtk_notebook_set_window_creation_hook")
  (return-type "none")
  (parameters
    '("GtkNotebookWindowCreationFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_group_id
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_group_id")
  (return-type "none")
  (parameters
    '("gint" "group_id")
  )
)

(define-method get_group_id
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_group_id")
  (return-type "gint")
)

(define-method get_tab_reorderable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_tab_reorderable")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_tab_reorderable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_reorderable")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "reorderable")
  )
)

(define-method get_tab_detachable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_tab_detachable")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_tab_detachable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_detachable")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "detachable")
  )
)

(ifdef HAVE_GTK_2_12
(define-virtual reorder_tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (parameters
    '("GtkDirectionType" "direction")
    '("gboolean" "move_to_last")
  )
))
(ifndef HAVE_GTK_2_12
(define-virtual reorder_tab
  (of-object "GtkNotebook")
  (return-type "none")
  (parameters
    '("GtkDirectionType" "direction")
    '("gboolean" "move_to_last")
  )
))


(define-virtual insert_page
  (of-object "GtkNotebook")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label")
    '("GtkWidget*" "menu_label")
    '("gint" "position")
  )
)



;; From gtkobject.h



;; From gtkoldeditable.h



;; From gtkoptionmenu.h



;; From gtkpagesetup.h

(define-function page_setup_get_type
  (c-name "gtk_page_setup_get_type")
  (return-type "GType")
)

(define-function page_setup_new
  (c-name "gtk_page_setup_new")
  (is-constructor-of "GtkPageSetup")
  (return-type "GtkPageSetup*")
)

(define-method copy
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_copy")
  (return-type "GtkPageSetup*")
)

(define-method get_orientation
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_orientation")
  (return-type "GtkPageOrientation")
)

(define-method set_orientation
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_orientation")
  (return-type "none")
  (parameters
    '("GtkPageOrientation" "orientation")
  )
)

(define-method get_paper_size
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_paper_size")
  (return-type "GtkPaperSize*")
)

(define-method set_paper_size
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_paper_size")
  (return-type "none")
  (parameters
    '("GtkPaperSize*" "size")
  )
)

(define-method get_top_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_top_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_top_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_top_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_bottom_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_bottom_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_bottom_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_bottom_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_left_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_left_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_left_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_left_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_right_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_right_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_right_margin
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_right_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method set_paper_size_and_default_margins
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_set_paper_size_and_default_margins")
  (return-type "none")
  (parameters
    '("GtkPaperSize*" "size")
  )
)

(define-method get_paper_width
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_paper_width")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_paper_height
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_paper_height")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_page_width
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_page_width")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_page_height
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_get_page_height")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)



;; From gtkpaned.h



;; From gtkpapersize.h

(define-function paper_size_get_type
  (c-name "gtk_paper_size_get_type")
  (return-type "GType")
)

(define-function paper_size_new
  (c-name "gtk_paper_size_new")
  (is-constructor-of "GtkPaperSize")
  (return-type "GtkPaperSize*")
  (parameters
    '("const-gchar*" "name" (null-ok) (default "NULL"))
  )
)

(define-function paper_size_new_from_ppd
  (c-name "gtk_paper_size_new_from_ppd")
  (return-type "GtkPaperSize*")
  (parameters
    '("const-gchar*" "ppd_name")
    '("const-gchar*" "ppd_display_name")
    '("gdouble" "width")
    '("gdouble" "height")
  )
)

(define-function paper_size_new_custom
  (c-name "gtk_paper_size_new_custom")
  (return-type "GtkPaperSize*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "display_name")
    '("gdouble" "width")
    '("gdouble" "height")
    '("GtkUnit" "unit")
  )
)

(define-method copy
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_copy")
  (return-type "GtkPaperSize*")
)

(define-method free
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_free")
  (return-type "none")
)

(define-method is_equal
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_is_equal")
  (return-type "gboolean")
  (parameters
    '("GtkPaperSize*" "size2")
  )
)

(define-method get_name
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_name")
  (return-type "const-gchar*")
)

(define-method get_display_name
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_display_name")
  (return-type "const-gchar*")
)

(define-method get_ppd_name
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_ppd_name")
  (return-type "const-gchar*")
)

(define-method get_width
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_width")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_height
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_height")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method is_custom
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_is_custom")
  (return-type "gboolean")
)

(define-method set_size
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_set_size")
  (return-type "none")
  (parameters
    '("gdouble" "width")
    '("gdouble" "height")
    '("GtkUnit" "unit")
  )
)

(define-method get_default_top_margin
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_default_top_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_default_bottom_margin
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_default_bottom_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_default_left_margin
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_default_left_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method get_default_right_margin
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_get_default_right_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-function paper_size_get_default
  (c-name "gtk_paper_size_get_default")
  (return-type "const-gchar*")
)



;; From gtkpixmap.h



;; From gtkplug.h



;; From gtkpreview.h



;; From gtkprintcontext.h

(define-function print_context_get_type
  (c-name "gtk_print_context_get_type")
  (return-type "GType")
)

(define-method get_cairo_context
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_cairo_context")
  (return-type "cairo_t*")
)

(define-method get_page_setup
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_page_setup")
  (return-type "GtkPageSetup*")
)

(define-method get_width
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_width")
  (return-type "gdouble")
)

(define-method get_height
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_height")
  (return-type "gdouble")
)

(define-method get_dpi_x
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_dpi_x")
  (return-type "gdouble")
)

(define-method get_dpi_y
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_dpi_y")
  (return-type "gdouble")
)

(define-method get_pango_fontmap
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_get_pango_fontmap")
  (return-type "PangoFontMap*")
)

(define-method create_pango_context
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_create_pango_context")
  (return-type "PangoContext*")
)

(define-method create_pango_layout
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_create_pango_layout")
  (return-type "PangoLayout*")
)

(define-method set_cairo_context
  (of-object "GtkPrintContext")
  (c-name "gtk_print_context_set_cairo_context")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("double" "dpi_x")
    '("double" "dpi_y")
  )
)



;; From gtkprintoperation.h

(define-function print_error_quark
  (c-name "gtk_print_error_quark")
  (return-type "GQuark")
)

(define-function print_operation_get_type
  (c-name "gtk_print_operation_get_type")
  (return-type "GType")
)

(define-function print_operation_new
  (c-name "gtk_print_operation_new")
  (is-constructor-of "GtkPrintOperation")
  (return-type "GtkPrintOperation*")
)

(define-method set_default_page_setup
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_default_page_setup")
  (return-type "none")
  (parameters
    '("GtkPageSetup*" "default_page_setup" (null-ok) (default "NULL"))
  )
)

(define-method get_default_page_setup
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_get_default_page_setup")
  (return-type "GtkPageSetup*")
)

(define-method set_print_settings
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_print_settings")
  (return-type "none")
  (parameters
    '("GtkPrintSettings*" "print_settings" (null-ok) (default "NULL"))
  )
)

(define-method get_print_settings
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_get_print_settings")
  (return-type "GtkPrintSettings*")
)

(define-method set_job_name
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_job_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "job_name")
  )
)

(define-method set_n_pages
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_n_pages")
  (return-type "none")
  (parameters
    '("gint" "n_pages")
  )
)

(define-method set_current_page
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_current_page")
  (return-type "none")
  (parameters
    '("gint" "current_page")
  )
)

(define-method set_use_full_page
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_use_full_page")
  (return-type "none")
  (parameters
    '("gboolean" "full_page")
  )
)

(define-method set_unit
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_unit")
  (return-type "none")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_export_filename
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_export_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method set_track_print_status
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_track_print_status")
  (return-type "none")
  (parameters
    '("gboolean" "track_status")
  )
)

(define-method set_show_progress
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_show_progress")
  (return-type "none")
  (parameters
    '("gboolean" "show_progress")
  )
)

(define-method set_allow_async
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_allow_async")
  (return-type "none")
  (parameters
    '("gboolean" "allow_async")
  )
)

(define-method set_custom_tab_label
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_custom_tab_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method run
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_run")
  (return-type "GtkPrintOperationResult")
  (parameters
    '("GtkPrintOperationAction" "action")
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
    '("GError**" "error")
  )
)

(define-method get_error
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_get_error")
  (return-type "none")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_status
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_get_status")
  (return-type "GtkPrintStatus")
)

(define-method get_status_string
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_get_status_string")
  (return-type "const-gchar*")
)

(define-method is_finished
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_is_finished")
  (return-type "gboolean")
)

(define-method cancel
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_cancel")
  (return-type "none")
)

(define-function print_run_page_setup_dialog
  (c-name "gtk_print_run_page_setup_dialog")
  (return-type "GtkPageSetup*")
  (parameters
    '("GtkWindow*" "parent" (null-ok))
    '("GtkPageSetup*" "page_setup" (null-ok))
    '("GtkPrintSettings*" "settings")
  )
)

(define-function print_run_page_setup_dialog_async
  (c-name "gtk_print_run_page_setup_dialog_async")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
    '("GtkPageSetup*" "page_setup")
    '("GtkPrintSettings*" "settings")
    '("GtkPageSetupDoneFunc" "done_cb")
    '("gpointer" "data")
  )
)

(define-virtual done
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkPrintOperationResult" "result")
  )
)

(define-virtual begin_print
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
  )
)

(define-virtual paginate
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (parameters
    '("GtkPrintContext*" "context")
  )
)

(define-virtual request_page_setup
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
    '("gint" "page_nr")
    '("GtkPageSetup*" "setup")
  )
)

(define-virtual draw_page
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
    '("gint" "page_nr")
  )
)

(define-virtual end_print
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
  )
)

(define-virtual status_changed
  (of-object "GtkPrintOperation")
  (return-type "none")
)

(define-virtual create_custom_widget
  (of-object "GtkPrintOperation")
  (return-type "GtkWidget*")
)

(define-virtual custom_widget_apply
  (of-object "GtkPrintOperation")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-virtual preview
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (parameters
    '("GtkPrintOperationPreview*" "preview")
    '("GtkPrintContext*" "context")
    '("GtkWindow*" "parent")
  )
)



;; From gtkprintoperationpreview.h

(define-function print_operation_preview_get_type
  (c-name "gtk_print_operation_preview_get_type")
  (return-type "GType")
)

(define-method render_page
  (of-object "GtkPrintOperationPreview")
  (c-name "gtk_print_operation_preview_render_page")
  (return-type "none")
  (parameters
    '("gint" "page_nr")
  )
)

(define-method end_preview
  (of-object "GtkPrintOperationPreview")
  (c-name "gtk_print_operation_preview_end_preview")
  (return-type "none")
)

(define-method is_selected
  (of-object "GtkPrintOperationPreview")
  (c-name "gtk_print_operation_preview_is_selected")
  (return-type "gboolean")
  (parameters
    '("gint" "page_nr")
  )
)

(define-virtual ready
  (of-object "GtkPrintOperationPreview")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
  )
)
(define-virtual got_page_size
  (of-object "GtkPrintOperationPreview")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
    '("GtkPageSetup*" "page_setup")
  )
)
(define-virtual render_page
  (of-object "GtkPrintOperationPreview")
  (return-type "none")
  (parameters
    '("gint" "page_nr")
  )
)
(define-virtual is_selected
  (of-object "GtkPrintOperationPreview")
  (return-type "gboolean")
  (parameters
    '("gint" "page_nr")
  )
)
(define-virtual end_preview
  (of-object "GtkPrintOperationPreview")
  (return-type "none")
)


;; From gtkprintsettings.h

(define-function print_settings_get_type
  (c-name "gtk_print_settings_get_type")
  (return-type "GType")
)

(define-function print_settings_new
  (c-name "gtk_print_settings_new")
  (is-constructor-of "GtkPrintSettings")
  (return-type "GtkPrintSettings*")
)

(define-method copy
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_copy")
  (return-type "GtkPrintSettings*")
)

(define-method has_key
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_has_key")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value" (null-ok))
  )
)

(define-method unset
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_unset")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method foreach
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_foreach")
  (return-type "none")
  (parameters
    '("GtkPrintSettingsFunc" "func")
    '("gpointer" "user_data" (null-ok) (default "NULL"))
  )
)

(define-method get_bool
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_bool")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_bool
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_bool")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gboolean" "value")
  )
)

(define-method get_double
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_double")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_double_with_default
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_double_with_default")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "key")
    '("gdouble" "def")
  )
)

(define-method set_double
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_double")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gdouble" "value")
  )
)

(define-method get_length
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_length")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "key")
    '("GtkUnit" "unit")
  )
)

(define-method set_length
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_length")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gdouble" "value")
    '("GtkUnit" "unit")
  )
)

(define-method get_int
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_int")
  (return-type "gint")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_int_with_default
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_int_with_default")
  (return-type "gint")
  (parameters
    '("const-gchar*" "key")
    '("gint" "def")
  )
)

(define-method set_int
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_int")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gint" "value")
  )
)

(define-method get_printer
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_printer")
  (return-type "const-gchar*")
)

(define-method set_printer
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_printer")
  (return-type "none")
  (parameters
    '("const-gchar*" "printer")
  )
)

(define-method get_orientation
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_orientation")
  (return-type "GtkPageOrientation")
)

(define-method set_orientation
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_orientation")
  (return-type "none")
  (parameters
    '("GtkPageOrientation" "orientation")
  )
)

(define-method get_paper_size
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_paper_size")
  (return-type "GtkPaperSize*")
)

(define-method set_paper_size
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_paper_size")
  (return-type "none")
  (parameters
    '("GtkPaperSize*" "paper_size")
  )
)

(define-method get_paper_width
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_paper_width")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_paper_width
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_paper_width")
  (return-type "none")
  (parameters
    '("gdouble" "width")
    '("GtkUnit" "unit")
  )
)

(define-method get_paper_height
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_paper_height")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_paper_height
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_paper_height")
  (return-type "none")
  (parameters
    '("gdouble" "height")
    '("GtkUnit" "unit")
  )
)

(define-method get_use_color
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_use_color")
  (return-type "gboolean")
)

(define-method set_use_color
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_use_color")
  (return-type "none")
  (parameters
    '("gboolean" "use_color")
  )
)

(define-method get_collate
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_collate")
  (return-type "gboolean")
)

(define-method set_collate
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_collate")
  (return-type "none")
  (parameters
    '("gboolean" "collate")
  )
)

(define-method get_reverse
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_reverse")
  (return-type "gboolean")
)

(define-method set_reverse
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_reverse")
  (return-type "none")
  (parameters
    '("gboolean" "reverse")
  )
)

(define-method get_duplex
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_duplex")
  (return-type "GtkPrintDuplex")
)

(define-method set_duplex
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_duplex")
  (return-type "none")
  (parameters
    '("GtkPrintDuplex" "duplex")
  )
)

(define-method get_quality
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_quality")
  (return-type "GtkPrintQuality")
)

(define-method set_quality
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_quality")
  (return-type "none")
  (parameters
    '("GtkPrintQuality" "quality")
  )
)

(define-method get_n_copies
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_n_copies")
  (return-type "gint")
)

(define-method set_n_copies
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_n_copies")
  (return-type "none")
  (parameters
    '("gint" "num_copies")
  )
)

(define-method get_number_up
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_number_up")
  (return-type "gint")
)

(define-method set_number_up
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_number_up")
  (return-type "none")
  (parameters
    '("gint" "number_up")
  )
)

(define-method get_resolution
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_resolution")
  (return-type "gint")
)

(define-method set_resolution
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_resolution")
  (return-type "none")
  (parameters
    '("gint" "resolution")
  )
)

(define-method get_scale
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_scale")
  (return-type "gdouble")
)

(define-method set_scale
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_scale")
  (return-type "none")
  (parameters
    '("gdouble" "scale")
  )
)

(define-method get_print_pages
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_print_pages")
  (return-type "GtkPrintPages")
)

(define-method set_print_pages
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_print_pages")
  (return-type "none")
  (parameters
    '("GtkPrintPages" "pages")
  )
)

(define-method get_page_ranges
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_page_ranges")
  (return-type "GtkPageRange*")
  (parameters
    '("gint*" "num_ranges")
  )
)

(define-method set_page_ranges
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_page_ranges")
  (return-type "none")
  (parameters
    '("GtkPageRange*" "page_ranges")
    '("gint" "num_ranges")
  )
)

(define-method get_page_set
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_page_set")
  (return-type "GtkPageSet")
)

(define-method set_page_set
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_page_set")
  (return-type "none")
  (parameters
    '("GtkPageSet" "page_set")
  )
)

(define-method get_default_source
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_default_source")
  (return-type "const-gchar*")
)

(define-method set_default_source
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_default_source")
  (return-type "none")
  (parameters
    '("const-gchar*" "default_source")
  )
)

(define-method get_media_type
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_media_type")
  (return-type "const-gchar*")
)

(define-method set_media_type
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_media_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "media_type")
  )
)

(define-method get_dither
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_dither")
  (return-type "const-gchar*")
)

(define-method set_dither
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_dither")
  (return-type "none")
  (parameters
    '("const-gchar*" "dither")
  )
)

(define-method get_finishings
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_finishings")
  (return-type "const-gchar*")
)

(define-method set_finishings
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_finishings")
  (return-type "none")
  (parameters
    '("const-gchar*" "finishings")
  )
)

(define-method get_output_bin
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_output_bin")
  (return-type "const-gchar*")
)

(define-method set_output_bin
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_output_bin")
  (return-type "none")
  (parameters
    '("const-gchar*" "output_bin")
  )
)



;; From gtkprivate.h



;; From gtkprogressbar.h



;; From gtkprogress.h



;; From gtkradioaction.h

(define-method set_current_value
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_set_current_value")
  (return-type "none")
  (parameters
    '("gint" "current_value")
  )
)



;; From gtkradiobutton.h



;; From gtkradiomenuitem.h



;; From gtkradiotoolbutton.h



;; From gtkrange.h

(define-method set_lower_stepper_sensitivity
  (of-object "GtkRange")
  (c-name "gtk_range_set_lower_stepper_sensitivity")
  (return-type "none")
  (parameters
    '("GtkSensitivityType" "sensitivity")
  )
)

(define-method get_lower_stepper_sensitivity
  (of-object "GtkRange")
  (c-name "gtk_range_get_lower_stepper_sensitivity")
  (return-type "GtkSensitivityType")
)

(define-method set_upper_stepper_sensitivity
  (of-object "GtkRange")
  (c-name "gtk_range_set_upper_stepper_sensitivity")
  (return-type "none")
  (parameters
    '("GtkSensitivityType" "sensitivity")
  )
)

(define-method get_upper_stepper_sensitivity
  (of-object "GtkRange")
  (c-name "gtk_range_get_upper_stepper_sensitivity")
  (return-type "GtkSensitivityType")
)



;; From gtkrc.h



;; From gtkrecentchooserdialog.h

(define-function recent_chooser_dialog_get_type
  (c-name "gtk_recent_chooser_dialog_get_type")
  (return-type "GType")
)

(define-function recent_chooser_dialog_new
  (c-name "gtk_recent_chooser_dialog_new")
  (is-constructor-of "GtkRecentChooserDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
    '("GtkWindow*" "parent")
    '("const-gchar*" "first_button_text")
  )
  (varargs #t)
)

(define-function recent_chooser_dialog_new_for_manager
  (c-name "gtk_recent_chooser_dialog_new_for_manager")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
    '("GtkWindow*" "parent")
    '("GtkRecentManager*" "manager")
    '("const-gchar*" "first_button_text")
  )
  (varargs #t)
)



;; From gtkrecentchooser.h

(define-function recent_chooser_error_quark
  (c-name "gtk_recent_chooser_error_quark")
  (return-type "GQuark")
)

(define-function recent_chooser_get_type
  (c-name "gtk_recent_chooser_get_type")
  (return-type "GType")
)

(define-method set_show_private
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_show_private")
  (return-type "none")
  (parameters
    '("gboolean" "show_private")
  )
)

(define-method get_show_private
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_show_private")
  (return-type "gboolean")
)

(define-method set_show_not_found
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_show_not_found")
  (return-type "none")
  (parameters
    '("gboolean" "show_not_found")
  )
)

(define-method get_show_not_found
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_show_not_found")
  (return-type "gboolean")
)

(define-method set_select_multiple
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_select_multiple")
  (return-type "none")
  (parameters
    '("gboolean" "select_multiple")
  )
)

(define-method get_select_multiple
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_select_multiple")
  (return-type "gboolean")
)

(define-method set_limit
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_limit")
  (return-type "none")
  (parameters
    '("gint" "limit")
  )
)

(define-method get_limit
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_limit")
  (return-type "gint")
)

(define-method set_local_only
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_local_only")
  (return-type "none")
  (parameters
    '("gboolean" "local_only")
  )
)

(define-method get_local_only
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_local_only")
  (return-type "gboolean")
)

(define-method set_show_tips
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_show_tips")
  (return-type "none")
  (parameters
    '("gboolean" "show_tips")
  )
)

(define-method get_show_tips
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_show_tips")
  (return-type "gboolean")
)

(define-method set_show_numbers
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_show_numbers")
  (return-type "none")
  (parameters
    '("gboolean" "show_numbers")
  )
)

(define-method get_show_numbers
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_show_numbers")
  (return-type "gboolean")
)

(define-method set_show_icons
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_show_icons")
  (return-type "none")
  (parameters
    '("gboolean" "show_icons")
  )
)

(define-method get_show_icons
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_show_icons")
  (return-type "gboolean")
)

(define-method set_sort_type
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_sort_type")
  (return-type "none")
  (parameters
    '("GtkRecentSortType" "sort_type")
  )
)

(define-method get_sort_type
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_sort_type")
  (return-type "GtkRecentSortType")
)

(define-method set_sort_func
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_sort_func")
  (return-type "none")
  (parameters
    '("GtkRecentSortFunc" "sort_func")
    '("gpointer" "sort_data")
    '("GDestroyNotify" "data_destroy")
  )
)

(define-method set_current_uri
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_current_uri")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method get_current_uri
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_current_uri")
  (return-type "gchar*")
)

(define-method get_current_item
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_current_item")
  (return-type "GtkRecentInfo*")
)

(define-method select_uri
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_select_uri")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method unselect_uri
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_unselect_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method select_all
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_select_all")
  (return-type "none")
)

(define-method unselect_all
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_unselect_all")
  (return-type "none")
)

(define-method get_items
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_items")
  (return-type "GList*")
)

(define-method get_uris
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_uris")
  (return-type "gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method add_filter
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_add_filter")
  (return-type "none")
  (parameters
    '("GtkRecentFilter*" "filter")
  )
)

(define-method remove_filter
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_remove_filter")
  (return-type "none")
  (parameters
    '("GtkRecentFilter*" "filter")
  )
)

(define-method list_filters
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_list_filters")
  (return-type "GSList*")
)

(define-method set_filter
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_set_filter")
  (return-type "none")
  (parameters
    '("GtkRecentFilter*" "filter")
  )
)

(define-method get_filter
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_filter")
  (return-type "GtkRecentFilter*")
)

(define-virtual set_current_uri
  (of-object "GtkRecentChooser")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)
(define-virtual get_current_uri
  (of-object "GtkRecentChooser")
  (return-type "gchar*")
)
(define-virtual select_uri
  (of-object "GtkRecentChooser")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)
(define-virtual unselect_uri
  (of-object "GtkRecentChooser")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)
(define-virtual select_all
  (of-object "GtkRecentChooser")
  (return-type "none")
)
(define-virtual unselect_all
  (of-object "GtkRecentChooser")
  (return-type "none")
)
(define-virtual get_items
  (of-object "GtkRecentChooser")
  (return-type "GList*")
)
(define-virtual get_recent_manager
  (of-object "GtkRecentChooser")
  (return-type "GtkRecentManager*")
)
(define-virtual add_filter
  (of-object "GtkRecentChooser")
  (return-type "none")
  (parameters
    '("GtkRecentFilter*" "filter")
  )
)
(define-virtual remove_filter
  (of-object "GtkRecentChooser")
  (return-type "none")
  (parameters
    '("GtkRecentFilter*" "filter")
  )
)
(define-virtual list_filters
  (of-object "GtkRecentChooser")
  (return-type "GSList*")
)
(define-virtual set_sort_func
  (of-object "GtkRecentChooser")
  (return-type "none")
  (parameters
    '("GtkRecentSortFunc" "sort_func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)
(define-virtual item_activated
  (of-object "GtkRecentChooser")
  (return-type "none")
)
(define-virtual selection_changed
  (of-object "GtkRecentChooser")
  (return-type "none")
)


;; From gtkrecentchoosermenu.h

(define-function recent_chooser_menu_get_type
  (c-name "gtk_recent_chooser_menu_get_type")
  (return-type "GType")
)

(define-function recent_chooser_menu_new
  (c-name "gtk_recent_chooser_menu_new")
  (return-type "GtkWidget*")
)

(define-method get_show_numbers
  (of-object "GtkRecentChooserMenu")
  (c-name "gtk_recent_chooser_menu_get_show_numbers")
  (return-type "gboolean")
)

(define-method set_show_numbers
  (of-object "GtkRecentChooserMenu")
  (c-name "gtk_recent_chooser_menu_set_show_numbers")
  (return-type "none")
  (parameters
    '("gboolean" "show_numbers")
  )
)



;; From gtkrecentchooserwidget.h

(define-function recent_chooser_widget_get_type
  (c-name "gtk_recent_chooser_widget_get_type")
  (return-type "GType")
)

(define-function recent_chooser_widget_new
  (c-name "gtk_recent_chooser_widget_new")
  (return-type "GtkWidget*")
)



;; From gtkrecentfilter.h

(define-function recent_filter_get_type
  (c-name "gtk_recent_filter_get_type")
  (return-type "GType")
)

(define-function recent_filter_new
  (c-name "gtk_recent_filter_new")
  (is-constructor-of "GtkRecentFilter")
  (return-type "GtkRecentFilter*")
)

(define-method set_name
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_get_name")
  (return-type "const-gchar*")
)

(define-method add_mime_type
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_mime_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-method add_pattern
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_pattern")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
)

(define-method add_pixbuf_formats
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_pixbuf_formats")
  (return-type "none")
)

(define-method add_application
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_application")
  (return-type "none")
  (parameters
    '("const-gchar*" "application")
  )
)

(define-method add_group
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_group")
  (return-type "none")
  (parameters
    '("const-gchar*" "group")
  )
)

(define-method add_age
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_age")
  (return-type "none")
  (parameters
    '("gint" "days")
  )
)

(define-method add_custom
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_add_custom")
  (return-type "none")
  (parameters
    '("GtkRecentFilterFlags" "needed")
    '("GtkRecentFilterFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "data_destroy")
  )
)

(define-method get_needed
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_get_needed")
  (return-type "GtkRecentFilterFlags")
)

(define-method filter
  (of-object "GtkRecentFilter")
  (c-name "gtk_recent_filter_filter")
  (return-type "gboolean")
  (parameters
    '("const-GtkRecentFilterInfo*" "filter_info")
  )
)



;; From gtkrecentmanager.h

(define-function recent_manager_error_quark
  (c-name "gtk_recent_manager_error_quark")
  (return-type "GQuark")
)

(define-function recent_manager_get_type
  (c-name "gtk_recent_manager_get_type")
  (return-type "GType")
)

(define-function recent_manager_new
  (c-name "gtk_recent_manager_new")
  (is-constructor-of "GtkRecentManager")
  (return-type "GtkRecentManager*")
)

(define-function recent_manager_get_default
  (c-name "gtk_recent_manager_get_default")
  (return-type "GtkRecentManager*")
)

(define-function recent_manager_get_for_screen
  (c-name "gtk_recent_manager_get_for_screen")
  (return-type "GtkRecentManager*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_screen
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method add_item
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_add_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method add_full
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_add_full")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-GtkRecentData*" "recent_data")
  )
)

(define-method remove_item
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_remove_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method lookup_item
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_lookup_item")
  (return-type "GtkRecentInfo*")
  (parameters
    '("const-gchar*" "uri")
    '("GError**" "error")
  )
)

(define-method has_item
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_has_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method move_item
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_move_item")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "new_uri")
    '("GError**" "error")
  )
)

(define-method set_limit
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_set_limit")
  (return-type "none")
  (parameters
    '("gint" "limit")
  )
)

(define-method get_limit
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_get_limit")
  (return-type "gint")
)

(define-method get_items
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_get_items")
  (return-type "GList*")
)

(define-method purge_items
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_purge_items")
  (return-type "gint")
  (parameters
    '("GError**" "error")
  )
)

(define-function recent_info_get_type
  (c-name "gtk_recent_info_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_ref")
  (return-type "GtkRecentInfo*")
)

(define-method unref
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_unref")
  (return-type "none")
)

(define-method get_uri
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_uri")
  (return-type "const-gchar*")
)

(define-method get_display_name
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_display_name")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_description")
  (return-type "const-gchar*")
)

(define-method get_mime_type
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_mime_type")
  (return-type "const-gchar*")
)

(define-method get_added
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_added")
  (return-type "time_t")
)

(define-method get_modified
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_modified")
  (return-type "time_t")
)

(define-method get_visited
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_visited")
  (return-type "time_t")
)

(define-method get_private_hint
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_private_hint")
  (return-type "gboolean")
)

(define-method get_application_info
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_application_info")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "app_name")
    '("gchar**" "app_exec")
    '("guint*" "count")
    '("time_t*" "time_")
  )
)

(define-method get_applications
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_applications")
  (return-type "gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method last_application
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_last_application")
  (return-type "gchar*")
)

(define-method has_application
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_has_application")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "app_name")
  )
)

(define-method get_groups
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_groups")
  (return-type "gchar**")
  (parameters
    '("gsize*" "length")
  )
)

(define-method has_group
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_has_group")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "group_name")
  )
)

(define-method get_icon
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("gint" "size")
  )
)

(define-method get_short_name
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_short_name")
  (return-type "gchar*")
)

(define-method get_uri_display
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_uri_display")
  (return-type "gchar*")
)

(define-method get_age
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_get_age")
  (return-type "gint")
)

(define-method is_local
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_is_local")
  (return-type "gboolean")
)

(define-method exists
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_exists")
  (return-type "gboolean")
)

(define-method match
  (of-object "GtkRecentInfo")
  (c-name "gtk_recent_info_match")
  (return-type "gboolean")
  (parameters
    '("GtkRecentInfo*" "info_b")
  )
)

(define-virtual changed
  (of-object "GtkRecentManager")
  (return-type "none")
)



;; From gtkruler.h



;; From gtkscale.h



;; From gtkscrollbar.h



;; From gtkscrolledwindow.h

(define-method unset_placement
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_unset_placement")
  (return-type "none")
)



;; From gtkselection.h

(define-function target_list_add_rich_text_targets
  (c-name "gtk_target_list_add_rich_text_targets")
  (return-type "none")
  (parameters
    '("guint" "info")
    '("gboolean" "deserializable")
    '("GtkTextBuffer*" "buffer")
  )
)

(define-function target_table_new_from_list
  (c-name "gtk_target_table_new_from_list")
  (return-type "GtkTargetEntry*")
  (parameters
    '("GtkTargetList*" "list")
    '("gint*" "n_targets")
  )
)

(define-function target_table_free
  (c-name "gtk_target_table_free")
  (return-type "none")
  (parameters
    '("GtkTargetEntry*" "targets")
    '("gint" "n_targets")
  )
)

(define-method targets_include_rich_text
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_targets_include_rich_text")
  (return-type "gboolean")
  (parameters
    '("GtkTextBuffer*" "buffer")
  )
)

(define-method targets_include_uri
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_targets_include_uri")
  (return-type "gboolean")
)

(define-function targets_include_text
  (c-name "gtk_targets_include_text")
  (return-type "gboolean")
  (parameters
    '("GdkAtom*" "targets")
    '("gint" "n_targets")
  )
)

(define-function targets_include_rich_text
  (c-name "gtk_targets_include_rich_text")
  (return-type "gboolean")
  (parameters
    '("GdkAtom*" "targets")
    '("gint" "n_targets")
    '("GtkTextBuffer*" "buffer")
  )
)

(define-function targets_include_image
  (c-name "gtk_targets_include_image")
  (return-type "gboolean")
  (parameters
    '("GdkAtom*" "targets")
    '("gint" "n_targets")
    '("gboolean" "writable")
  )
)

(define-function targets_include_uri
  (c-name "gtk_targets_include_uri")
  (return-type "gboolean")
  (parameters
    '("GdkAtom*" "targets")
    '("gint" "n_targets")
  )
)

(define-function target_list_get_type
  (c-name "gtk_target_list_get_type")
  (return-type "GType")
)



;; From gtkseparator.h



;; From gtkseparatormenuitem.h



;; From gtkseparatortoolitem.h



;; From gtksettings.h



;; From gtksignal.h



;; From gtksizegroup.h

(define-method get_widgets
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_get_widgets")
  (return-type "GSList*")
)



;; From gtksocket.h



;; From gtkspinbutton.h

(define-virtual wrapped
  (of-object "GtkSpinButton")
  (return-type "none")
)



;; From gtkstatusbar.h



;; From gtkstatusicon.h

(define-function status_icon_get_type
  (c-name "gtk_status_icon_get_type")
  (return-type "GType")
)

(define-function status_icon_new
  (c-name "gtk_status_icon_new")
  (is-constructor-of "GtkStatusIcon")
  (return-type "GtkStatusIcon*")
)

(define-function status_icon_new_from_pixbuf
  (c-name "gtk_status_icon_new_from_pixbuf")
  (return-type "GtkStatusIcon*")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-function status_icon_new_from_file
  (c-name "gtk_status_icon_new_from_file")
  (return-type "GtkStatusIcon*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function status_icon_new_from_stock
  (c-name "gtk_status_icon_new_from_stock")
  (return-type "GtkStatusIcon*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-function status_icon_new_from_icon_name
  (c-name "gtk_status_icon_new_from_icon_name")
  (return-type "GtkStatusIcon*")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-method set_from_pixbuf
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_from_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method set_from_file
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_from_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method set_from_stock
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_from_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-method set_from_icon_name
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_from_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-method get_storage_type
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_storage_type")
  (return-type "GtkImageType")
)

(define-method get_pixbuf
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_stock
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_stock")
  (return-type "const-gchar*")
)

(define-method get_icon_name
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_icon_name")
  (return-type "const-gchar*")
)

(define-method get_size
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_size")
  (return-type "gint")
)

(define-method set_tooltip
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_tooltip")
  (return-type "none")
  (parameters
    '("const-gchar*" "tooltip_text" (null-ok))
  )
)

(define-method set_visible
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_visible")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_visible
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_visible")
  (return-type "gboolean")
)

(define-method set_blinking
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_blinking")
  (return-type "none")
  (parameters
    '("gboolean" "blinking")
  )
)

(define-method get_blinking
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_blinking")
  (return-type "gboolean")
)

(define-method is_embedded
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_is_embedded")
  (return-type "gboolean")
)

(define-function status_icon_position_menu
  (c-name "gtk_status_icon_position_menu")
  (return-type "none")
  (parameters
    '("GtkMenu*" "menu")
    '("gint*" "x")
    '("gint*" "y")
    '("gboolean*" "push_in")
    '("gpointer" "user_data")
  )
)

(define-method get_geometry
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_geometry")
  (return-type "gboolean")
  (parameters
    '("GdkScreen**" "screen")
    '("GdkRectangle*" "area")
    '("GtkOrientation*" "orientation")
  )
)

(define-virtual activate
  (of-object "GtkStatusIcon")
  (return-type "none")
)

(define-virtual popup_menu
  (of-object "GtkStatusIcon")
  (return-type "none")
  (parameters
    '("guint" "button")
    '("guint32" "activate_time")
  )
)

(define-virtual size_changed
  (of-object "GtkStatusIcon")
  (return-type "gboolean")
  (parameters
    '("gint" "size")
  )
)



;; From gtkstock.h



;; From gtkstyle.h

(define-method lookup_color
  (of-object "GtkStyle")
  (c-name "gtk_style_lookup_color")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "color_name")
    '("GdkColor*" "color")
  )
)



;; From gtktable.h



;; From gtktearoffmenuitem.h



;; From gtktextbuffer.h

(define-method get_has_selection
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_has_selection")
  (return-type "gboolean")
)

(define-method get_copy_target_list
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_copy_target_list")
  (return-type "GtkTargetList*")
)

(define-method get_paste_target_list
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_paste_target_list")
  (return-type "GtkTargetList*")
)



;; From gtktextbufferrichtext.h

(define-method register_serialize_format
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_register_serialize_format")
  (return-type "GdkAtom")
  (parameters
    '("const-gchar*" "mime_type")
    '("GtkTextBufferSerializeFunc" "function")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_destroy")
  )
)

(define-method register_serialize_tagset
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_register_serialize_tagset")
  (return-type "GdkAtom")
  (parameters
    '("const-gchar*" "tagset_name" (null-ok) (default "NULL"))
  )
)

(define-method register_deserialize_format
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_register_deserialize_format")
  (return-type "GdkAtom")
  (parameters
    '("const-gchar*" "mime_type")
    '("GtkTextBufferDeserializeFunc" "function")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_destroy")
  )
)

(define-method register_deserialize_tagset
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_register_deserialize_tagset")
  (return-type "GdkAtom")
  (parameters
    '("const-gchar*" "tagset_name" (null-ok) (default "NULL"))
  )
)

(define-method unregister_serialize_format
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_unregister_serialize_format")
  (return-type "none")
  (parameters
    '("GdkAtom" "format")
  )
)

(define-method unregister_deserialize_format
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_unregister_deserialize_format")
  (return-type "none")
  (parameters
    '("GdkAtom" "format")
  )
)

(define-method deserialize_set_can_create_tags
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_deserialize_set_can_create_tags")
  (return-type "none")
  (parameters
    '("GdkAtom" "format")
    '("gboolean" "can_create_tags")
  )
)

(define-method deserialize_get_can_create_tags
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_deserialize_get_can_create_tags")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "format")
  )
)

(define-method get_serialize_formats
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_serialize_formats")
  (return-type "GdkAtom*")
  (parameters
    '("gint*" "n_formats")
  )
)

(define-method get_deserialize_formats
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_deserialize_formats")
  (return-type "GdkAtom*")
  (parameters
    '("gint*" "n_formats")
  )
)

(define-method serialize
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_serialize")
  (return-type "guint8*")
  (parameters
    '("GtkTextBuffer*" "content_buffer")
    '("GdkAtom" "format")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gsize*" "length")
  )
)

(define-method deserialize
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_deserialize")
  (return-type "gboolean")
  (parameters
    '("GtkTextBuffer*" "content_buffer")
    '("GdkAtom" "format")
    '("GtkTextIter*" "iter")
    '("const-guint8*" "data")
    '("gsize" "length")
    '("GError**" "error")
  )
)



;; From gtktextchild.h



;; From gtktextdisplay.h



;; From gtktext.h



;; From gtktextiter.h



;; From gtktextlayout.h



;; From gtktextmark.h



;; From gtktexttag.h



;; From gtktexttagtable.h



;; From gtktextview.h



;; From gtktipsquery.h



;; From gtktoggleaction.h



;; From gtktogglebutton.h



;; From gtktoggletoolbutton.h



;; From gtktoolbar.h



;; From gtktoolbutton.h



;; From gtktoolitem.h



;; From gtktooltips.h



;; From gtktreednd.h



;; From gtktree.h



;; From gtktreeitem.h



;; From gtktreemodelfilter.h



;; From gtktreemodel.h



;; From gtktreemodelsort.h



;; From gtktreeselection.h



;; From gtktreesortable.h



;; From gtktreestore.h

(define-method insert_with_values
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_insert_with_values")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("gint" "position")
  )
  (varargs #t)
)

(define-method insert_with_valuesv
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_insert_with_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("gint" "position")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)



;; From gtktreeviewcolumn.h



;; From gtktreeview.h

(define-method get_headers_clickable
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_headers_clickable")
  (return-type "gboolean")
)

(define-method get_search_entry
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_search_entry")
  (return-type "GtkEntry*")
)

(define-method set_search_entry
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_search_entry")
  (return-type "none")
  (parameters
    '("GtkEntry*" "entry" (null-ok) (default "NULL"))
  )
)

(define-method get_search_position_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_search_position_func")
  (return-type "GtkTreeViewSearchPositionFunc")
)

(define-method set_search_position_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_search_position_func")
  (return-type "none")
  (parameters
    '("GtkTreeViewSearchPositionFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_rubber_banding
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_rubber_banding")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_rubber_banding
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_rubber_banding")
  (return-type "gboolean")
)

(define-method get_grid_lines
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_grid_lines")
  (return-type "GtkTreeViewGridLines")
)

(define-method set_grid_lines
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_grid_lines")
  (return-type "none")
  (parameters
    '("GtkTreeViewGridLines" "grid_lines")
  )
)

(define-method get_enable_tree_lines
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_enable_tree_lines")
  (return-type "gboolean")
)

(define-method set_enable_tree_lines
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_enable_tree_lines")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)



;; From gtktypebuiltins.h

(define-function assistant_page_type_get_type
  (c-name "gtk_assistant_page_type_get_type")
  (return-type "GType")
)

(define-function cell_renderer_accel_mode_get_type
  (c-name "gtk_cell_renderer_accel_mode_get_type")
  (return-type "GType")
)

(define-function sensitivity_type_get_type
  (c-name "gtk_sensitivity_type_get_type")
  (return-type "GType")
)

(define-function print_pages_get_type
  (c-name "gtk_print_pages_get_type")
  (return-type "GType")
)

(define-function page_set_get_type
  (c-name "gtk_page_set_get_type")
  (return-type "GType")
)

(define-function page_orientation_get_type
  (c-name "gtk_page_orientation_get_type")
  (return-type "GType")
)

(define-function print_quality_get_type
  (c-name "gtk_print_quality_get_type")
  (return-type "GType")
)

(define-function print_duplex_get_type
  (c-name "gtk_print_duplex_get_type")
  (return-type "GType")
)

(define-function unit_get_type
  (c-name "gtk_unit_get_type")
  (return-type "GType")
)

(define-function tree_view_grid_lines_get_type
  (c-name "gtk_tree_view_grid_lines_get_type")
  (return-type "GType")
)

(define-function print_operation_action_get_type
  (c-name "gtk_print_operation_action_get_type")
  (return-type "GType")
)

(define-function recent_sort_type_get_type
  (c-name "gtk_recent_sort_type_get_type")
  (return-type "GType")
)

(define-function recent_chooser_error_get_type
  (c-name "gtk_recent_chooser_error_get_type")
  (return-type "GType")
)

(define-function recent_filter_flags_get_type
  (c-name "gtk_recent_filter_flags_get_type")
  (return-type "GType")
)

(define-function recent_manager_error_get_type
  (c-name "gtk_recent_manager_error_get_type")
  (return-type "GType")
)

(define-function text_buffer_target_info_get_type
  (c-name "gtk_text_buffer_target_info_get_type")
  (return-type "GType")
)



;; From gtktypeutils.h



;; From gtkuimanager.h



;; From gtkvbbox.h



;; From gtkvbox.h



;; From gtkversion.h



;; From gtkviewport.h



;; From gtkvpaned.h



;; From gtkvruler.h



;; From gtkvscale.h



;; From gtkvscrollbar.h



;; From gtkvseparator.h



;; From gtkwidget.h

(define-method is_composited
  (of-object "GtkWidget")
  (c-name "gtk_widget_is_composited")
  (return-type "gboolean")
)

(define-method input_shape_combine_mask
  (of-object "GtkWidget")
  (c-name "gtk_widget_input_shape_combine_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "shape_mask" (null-ok))
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-virtual composited_changed
  (of-object "GtkWidget")
  (return-type "none")
)



;; From gtkwindow.h

(define-method set_deletable
  (of-object "GtkWindow")
  (c-name "gtk_window_set_deletable")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_deletable
  (of-object "GtkWindow")
  (c-name "gtk_window_get_deletable")
  (return-type "gboolean")
)

(define-method get_group
  (of-object "GtkWindow")
  (c-name "gtk_window_get_group")
  (return-type "GtkWindowGroup*")
)


;; -*- scheme -*-
; boxed definitions ...

(define-boxed PaperSize
  (in-module "Gtk")
  (c-name "GtkPaperSize")
  (gtype-id "GTK_TYPE_PAPER_SIZE")
)

(define-boxed RecentInfo
  (in-module "Gtk")
  (c-name "GtkRecentInfo")
  (gtype-id "GTK_TYPE_RECENT_INFO")
)

(define-boxed TargetList
  (in-module "Gtk")
  (c-name "GtkTargetList")
  (gtype-id "GTK_TYPE_TARGET_LIST")
)

; interface definitions ...

(define-interface PrintOperationPreview
  (in-module "Gtk")
  (c-name "GtkPrintOperationPreview")
  (gtype-id "GTK_TYPE_PRINT_OPERATION_PREVIEW")
  (prerequisite "GObject")
)

(define-interface RecentChooser
  (in-module "Gtk")
  (c-name "GtkRecentChooser")
  (gtype-id "GTK_TYPE_RECENT_CHOOSER")
  (prerequisite "GtkObject")
)

; object definitions ...

(define-object Assistant
  (in-module "Gtk")
  (parent "GtkWindow")
  (c-name "GtkAssistant")
  (gtype-id "GTK_TYPE_ASSISTANT")
)

(define-object CellRendererAccel
  (in-module "Gtk")
  (parent "GtkCellRendererText")
  (c-name "GtkCellRendererAccel")
  (gtype-id "GTK_TYPE_CELL_RENDERER_ACCEL")
)

(define-object CellRendererSpin
  (in-module "Gtk")
  (parent "GtkCellRendererText")
  (c-name "GtkCellRendererSpin")
  (gtype-id "GTK_TYPE_CELL_RENDERER_SPIN")
)

(define-object LinkButton
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkLinkButton")
  (gtype-id "GTK_TYPE_LINK_BUTTON")
)

(define-object PageSetup
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkPageSetup")
  (gtype-id "GTK_TYPE_PAGE_SETUP")
)

(define-object PrintContext
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkPrintContext")
  (gtype-id "GTK_TYPE_PRINT_CONTEXT")
)

(define-object PrintOperation
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkPrintOperation")
  (gtype-id "GTK_TYPE_PRINT_OPERATION")
  (implements "GtkPrintOperationPreview")
)

(define-object PrintSettings
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkPrintSettings")
  (gtype-id "GTK_TYPE_PRINT_SETTINGS")
)

(define-object RecentChooserDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkRecentChooserDialog")
  (gtype-id "GTK_TYPE_RECENT_CHOOSER_DIALOG")
  (implements "GtkRecentChooser")
)

(define-object RecentChooserMenu
  (in-module "Gtk")
  (parent "GtkMenu")
  (c-name "GtkRecentChooserMenu")
  (gtype-id "GTK_TYPE_RECENT_CHOOSER_MENU")
  (implements "GtkRecentChooser")
)

(define-object RecentChooserWidget
  (in-module "Gtk")
  (parent "GtkVBox")
  (c-name "GtkRecentChooserWidget")
  (gtype-id "GTK_TYPE_RECENT_CHOOSER_WIDGET")
  (implements "GtkRecentChooser")
)

(define-object RecentFilter
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkRecentFilter")
  (gtype-id "GTK_TYPE_RECENT_FILTER")
)

(define-object RecentManager
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkRecentManager")
  (gtype-id "GTK_TYPE_RECENT_MANAGER")
)

(define-object StatusIcon
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkStatusIcon")
  (gtype-id "GTK_TYPE_STATUS_ICON")
)

; pointer definitions ...

;; -*- scheme -*-

(include "gtk-2.12-types.defs")

;; From gtkbuildable.h

(define-function gtk_buildable_get_type
  (c-name "gtk_buildable_get_type")
  (return-type "GType")
)

(define-method set_name
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_get_name")
  (return-type "const-gchar*")
)

(define-method add_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_add_child")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "type" (null-ok))
  )
)

(define-method set_buildable_property
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_set_buildable_property")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-method construct_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_construct_child")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
  )
)

(define-method custom_tag_start
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_tag_start")
  (return-type "gboolean")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("GMarkupParser*" "parser")
    '("gpointer*" "data")
  )
)

(define-method custom_tag_end
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_tag_end")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer*" "data")
  )
)

(define-method custom_finished
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_finished")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer" "data")
  )
)

(define-method parser_finished
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_parser_finished")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
  )
)

(define-method get_internal_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_get_internal_child")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "childname")
  )
)

(define-virtual set_name
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual get_name
  (of-object "GtkBuildable")
  (return-type "constgchar*")
)

(define-virtual add_child
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "type")
  )
)

(define-virtual set_buildable_property
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-virtual construct_child
  (of-object "GtkBuildable")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
  )
)

(define-virtual custom_tag_start
  (of-object "GtkBuildable")
  (return-type "gboolean")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("GMarkupParser*" "parser")
    '("gpointer*" "data")
  )
)

(define-virtual custom_tag_end
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer*" "data")
  )
)

(define-virtual custom_finished
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer" "data")
  )
)

(define-virtual parser_finished
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
  )
)

(define-virtual get_internal_child
  (of-object "GtkBuildable")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "childname")
  )
)



;; From gtkbuilder.h

(define-function builder_error_quark
  (c-name "gtk_builder_error_quark")
  (return-type "GQuark")
)

(define-function gtk_builder_get_type
  (c-name "gtk_builder_get_type")
  (return-type "GType")
)

(define-function gtk_builder_new
  (c-name "gtk_builder_new")
  (is-constructor-of "GtkBuilder")
  (return-type "GtkBuilder*")
)

(define-method add_from_file
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method add_from_string
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_from_string")
  (return-type "guint")
  (parameters
    '("const-gchar*" "buffer")
    ; Note: this is preserved for backward compatibility, but dropped
    ; from documentation as confusing.  Length must be in _bytes in
    ; UTF-8 representation_.  See also bug #475263 for similar
    ; confusing design mistake in gtk.glade.xml_new_from_buffer().
    '("gsize" "length" (default "-1"))
    '("GError**" "error")
  )
)

(define-method get_object
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_object")
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_objects
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_objects")
  (return-type "GSList*")
)

(define-method connect_signals
  (of-object "GtkBuilder")
  (c-name "gtk_builder_connect_signals")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method connect_signals_full
  (of-object "GtkBuilder")
  (c-name "gtk_builder_connect_signals_full")
  (return-type "none")
  (parameters
    '("GtkBuilderConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method set_translation_domain
  (of-object "GtkBuilder")
  (c-name "gtk_builder_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain" (null-ok))
  )
)

(define-method get_translation_domain
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_translation_domain")
  (return-type "const-gchar*")
)

(define-method get_type_from_name
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_type_from_name")
  (return-type "GType")
  (parameters
    '("const-char*" "type_name")
  )
)

(define-method value_from_string
  (of-object "GtkBuilder")
  (c-name "gtk_builder_value_from_string")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
    '("const-gchar*" "string")
    '("GValue*" "value")
    '("GError**" "error")
  )
)

(define-method value_from_string_type
  (of-object "GtkBuilder")
  (c-name "gtk_builder_value_from_string_type")
  (return-type "gboolean")
  (parameters
    '("GType" "type")
    '("const-gchar*" "string")
    '("GValue*" "value")
    '("GError**" "error")
  )
)

(define-virtual get_type_from_name
  (of-object "GtkBuilder")
  (return-type "GType")
  (parameters
    '("const-char*" "type_name")
  )
)



;; From gtkaboutdialog.h

(define-method get_program_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_program_name")
  (return-type "const-gchar*")
)

(define-method set_program_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_program_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From gtkaction.h

(define-method create_menu
  (of-object "GtkAction")
  (c-name "gtk_action_create_menu")
  (return-type "GtkWidget*")
)



;; From gtkcelllayout.h

(define-method get_cells
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_get_cells")
  (return-type "GList*")
)



;; From gtkentrycompletion.h

(define-method get_completion_prefix
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_completion_prefix")
  (return-type "const-gchar*")
)

(define-method set_inline_selection
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_inline_selection")
  (return-type "none")
  (parameters
    '("gboolean" "inline_selection")
  )
)

(define-method get_inline_selection
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_inline_selection")
  (return-type "gboolean")
)



;; From gtkentry.h

(define-method set_cursor_hadjustment
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_cursor_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method get_cursor_hadjustment
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_cursor_hadjustment")
  (return-type "GtkAdjustment*")
)



;; From gtkicontheme.h

(define-method choose_icon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_choose_icon")
  (return-type "GtkIconInfo*")
  (parameters
    '("const-gchar*[]" "icon_names")
    '("gint" "size")
    '("GtkIconLookupFlags" "flags")
  )
)

(define-method list_contexts
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_list_contexts")
  (return-type "GList*")
)



;; From gtkiconview.h

(define-method convert_widget_to_bin_window_coords
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_convert_widget_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method set_tooltip_item
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_item")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
  )
)

(define-method set_tooltip_cell
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_cell")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
    '("GtkCellRenderer*" "cell" (null-ok))
  )
)

(define-method get_tooltip_context
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_tooltip_context")
  (return-type "gboolean")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gboolean" "keyboard_tip")
    '("GtkTreeModel**" "model")
    '("GtkTreePath**" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_tooltip_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_tooltip_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_tooltip_column")
  (return-type "gint")
)



;; From gtkliststore.h

(define-method set_valuesv
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)



;; From gtkmenutoolbutton.h

(define-method set_arrow_tooltip_text
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_arrow_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_arrow_tooltip_markup
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_arrow_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup")
  )
)



;; From gtknotebook.h

(define-method set_group
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_group")
  (return-type "none")
  (parameters
    '("gpointer" "group")
  )
)

(define-method get_group
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_group")
  (return-type "gpointer")
)



;; From gtkpagesetup.h

(define-function page_setup_new_from_file
  (c-name "gtk_page_setup_new_from_file")
  (return-type "GtkPageSetup*")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-function page_setup_new_from_key_file
  (c-name "gtk_page_setup_new_from_key_file")
  (return-type "GtkPageSetup*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_to_file")
  (return-type "gboolean")
  (parameters
    '("const-char*" "file_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkpapersize.h

(define-function paper_size_get_paper_sizes
  (c-name "gtk_paper_size_get_paper_sizes")
  (return-type "GList*")
  (parameters
    '("gboolean" "include_custom")
  )
)

(define-function paper_size_new_from_key_file
  (c-name "gtk_paper_size_new_from_key_file")
  (return-type "GtkPaperSize*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkprintsettings.h

(define-function print_settings_new_from_file
  (c-name "gtk_print_settings_new_from_file")
  (return-type "GtkPrintSettings*")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-method to_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_to_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-function print_settings_new_from_key_file
  (c-name "gtk_print_settings_new_from_key_file")
  (return-type "GtkPrintSettings*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkrange.h

(define-method set_show_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_show_fill_level")
  (return-type "none")
  (parameters
    '("gboolean" "show_fill_level")
  )
)

(define-method get_show_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_show_fill_level")
  (return-type "gboolean")
)

(define-method set_restrict_to_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_restrict_to_fill_level")
  (return-type "none")
  (parameters
    '("gboolean" "restrict_to_fill_level")
  )
)

(define-method get_restrict_to_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_restrict_to_fill_level")
  (return-type "gboolean")
)

(define-method set_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_fill_level")
  (return-type "none")
  (parameters
    '("gdouble" "fill_level")
  )
)

(define-method get_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_fill_level")
  (return-type "gdouble")
)



;; From gtkrc.h

(define-function rc_parse_color_full
  (c-name "gtk_rc_parse_color_full")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
    '("GtkRcStyle*" "style")
    '("GdkColor*" "color")
  )
)



;; From gtkrecentaction.h

(define-function gtk_recent_action_get_type
  (c-name "gtk_recent_action_get_type")
  (return-type "GType")
)

(define-function gtk_recent_action_new
  (c-name "gtk_recent_action_new")
  (is-constructor-of "GtkRecentAction")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "label" (null-ok))
    '("const-gchar*" "tooltip" (null-ok))
    '("const-gchar*" "stock_id" (null-ok))
  )
)

(define-function recent_action_new_for_manager
  (c-name "gtk_recent_action_new_for_manager")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "label" (null-ok))
    '("const-gchar*" "tooltip" (null-ok))
    '("const-gchar*" "stock_id" (null-ok))
    '("GtkRecentManager*" "manager" (null-ok))
  )
)

(define-method get_show_numbers
  (of-object "GtkRecentAction")
  (c-name "gtk_recent_action_get_show_numbers")
  (return-type "gboolean")
)

(define-method set_show_numbers
  (of-object "GtkRecentAction")
  (c-name "gtk_recent_action_set_show_numbers")
  (return-type "none")
  (parameters
    '("gboolean" "show_numbers")
  )
)



;; From gtkscalebutton.h

(define-function gtk_scale_button_get_type
  (c-name "gtk_scale_button_get_type")
  (return-type "GType")
)

(define-function gtk_scale_button_new
  (c-name "gtk_scale_button_new")
  (is-constructor-of "GtkScaleButton")
  (return-type "GtkWidget*")
  (parameters
    '("GtkIconSize" "size")
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")
    '("const-gchar**" "icons")
  )
)

(define-method set_icons
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_icons")
  (return-type "none")
  (parameters
    '("const-gchar**" "icons")
  )
)

(define-method get_value
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_value")
  (return-type "gdouble")
)

(define-method set_value
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
)

(define-method get_adjustment
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_adjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_adjustment
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)



;; From gtkstatusicon.h

(define-method set_screen
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_screen")
  (return-type "GdkScreen*")
)



;; From gtktextbuffer.h

(define-method add_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_add_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
    '("const-GtkTextIter*" "where")
  )
)



;; From gtktextmark.h


;; From gtktooltip.h

(define-function gtk_tooltip_get_type
  (c-name "gtk_tooltip_get_type")
  (return-type "GType")
)

(define-method set_markup
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)

(define-method set_text
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method set_icon
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_icon")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method set_icon_from_stock
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_icon_from_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id" (null-ok))
    '("GtkIconSize" "size")
  )
)

(define-method set_custom
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_custom")
  (return-type "none")
  (parameters
    '("GtkWidget*" "custom_widget")
  )
)

(define-method set_tip_area
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_tip_area")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-function tooltip_trigger_tooltip_query
  (c-name "gtk_tooltip_trigger_tooltip_query")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)



;; From gtktoolitem.h

(define-method set_tooltip_text
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method set_tooltip_markup
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)



;; From gtktreestore.h

(define-method set_valuesv
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)



;; From gtktreeviewcolumn.h

(define-method get_tree_view
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_tree_view")
  (return-type "GtkWidget*")
)



;; From gtktreeview.h

(define-method convert_widget_to_tree_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_widget_to_tree_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "tx")
    '("gint*" "ty")
  )
)

(define-method convert_tree_to_widget_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_tree_to_widget_coords")
  (return-type "none")
  (parameters
    '("gint" "tx")
    '("gint" "ty")
    '("gint*" "wx")
    '("gint*" "wy")
  )
)

(define-method convert_widget_to_bin_window_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_widget_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method convert_bin_window_to_widget_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_bin_window_to_widget_coords")
  (return-type "none")
  (parameters
    '("gint" "bx")
    '("gint" "by")
    '("gint*" "wx")
    '("gint*" "wy")
  )
)

(define-method convert_tree_to_bin_window_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_tree_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "tx")
    '("gint" "ty")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method convert_bin_window_to_tree_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_bin_window_to_tree_coords")
  (return-type "none")
  (parameters
    '("gint" "bx")
    '("gint" "by")
    '("gint*" "tx")
    '("gint*" "ty")
  )
)

(define-method set_show_expanders
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_show_expanders")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_show_expanders
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_show_expanders")
  (return-type "gboolean")
)

(define-method set_level_indentation
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_level_indentation")
  (return-type "none")
  (parameters
    '("gint" "indentation")
  )
)

(define-method get_level_indentation
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_level_indentation")
  (return-type "gint")
)

(define-method is_rubber_banding_active
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_is_rubber_banding_active")
  (return-type "gboolean")
)

(define-method get_tooltip_context
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_tooltip_context")
  (return-type "gboolean")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gboolean" "keyboard_tip")
    '("GtkTreeModel**" "model")
    '("GtkTreePath**" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_tooltip_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_tooltip_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_tooltip_column")
  (return-type "gint")
)

(define-method set_tooltip_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_row")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
  )
)

(define-method set_tooltip_cell
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_cell")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path" (null-ok))
    '("GtkTreeViewColumn*" "column" (null-ok))
    '("GtkCellRenderer*" "cell" (null-ok))
  )
)

;; From gtkvolumebutton.h

(define-function gtk_volume_button_get_type
  (c-name "gtk_volume_button_get_type")
  (return-type "GType")
)

(define-function gtk_volume_button_new
  (c-name "gtk_volume_button_new")
  (is-constructor-of "GtkVolumeButton")
  (return-type "GtkWidget*")
)



;; From gtkwidget.h

(define-method keynav_failed
  (of-object "GtkWidget")
  (c-name "gtk_widget_keynav_failed")
  (return-type "gboolean")
  (parameters
    '("GtkDirectionType" "direction")
  )
)

(define-method error_bell
  (of-object "GtkWidget")
  (c-name "gtk_widget_error_bell")
  (return-type "none")
)

(define-method set_tooltip_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_window")
  (return-type "none")
  (parameters
    '("GtkWindow*" "custom_window" (null-ok))
  )
)

(define-method get_tooltip_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_window")
  (return-type "GtkWindow*")
)

(define-method trigger_tooltip_query
  (of-object "GtkWidget")
  (c-name "gtk_widget_trigger_tooltip_query")
  (return-type "none")
)

(define-method set_tooltip_text
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method get_tooltip_text
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_text")
  (return-type "gchar*")
)

(define-method set_tooltip_markup
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)

(define-method get_tooltip_markup
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_markup")
  (return-type "gchar*")
)

(define-method modify_cursor
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_cursor")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "primary" (null-ok))
    '("const-GdkColor*" "secondary" (null-ok))
  )
)

(define-method set_has_tooltip
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_has_tooltip")
  (return-type "none")
  (parameters
    '("gboolean" "has_tooltip")
  )
)

(define-method get_has_tooltip
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_has_tooltip")
  (return-type "gboolean")
)



;; From gtkwindow.h

(define-method set_opacity
  (of-object "GtkWindow")
  (c-name "gtk_window_set_opacity")
  (return-type "none")
  (parameters
    '("gdouble" "opacity")
  )
)

(define-method get_opacity
  (of-object "GtkWindow")
  (c-name "gtk_window_get_opacity")
  (return-type "gdouble")
)

(define-method set_startup_id
  (of-object "GtkWindow")
  (c-name "gtk_window_set_startup_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)
;; -*- scheme -*-
; object definitions ...
(define-interface Buildable
  (in-module "Gtk")
  (c-name "GtkBuildable")
  (gtype-id "GTK_TYPE_BUILDABLE")
)

(define-object Builder
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkBuilder")
  (gtype-id "GTK_TYPE_BUILDER")
)

(define-object RecentAction
  (in-module "Gtk")
  (parent "GtkAction")
  (c-name "GtkRecentAction")
  (gtype-id "GTK_TYPE_RECENT_ACTION")
)

(define-object ScaleButton
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkScaleButton")
  (gtype-id "GTK_TYPE_SCALE_BUTTON")
)

(define-object Tooltip
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTooltip")
  (gtype-id "GTK_TYPE_TOOLTIP")
)

(define-object VolumeButton
  (in-module "Gtk")
  (parent "GtkScaleButton")
  (c-name "GtkVolumeButton")
  (gtype-id "GTK_TYPE_VOLUME_BUTTON")
)


;; Enumerations and flags ...


;; -*- scheme -*-

(include "gtk-2.14-types.defs")

;; From gtkaccelgroup.h

(define-method get_is_locked
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_get_is_locked")
  (return-type "gboolean")
)

(define-method get_modifier_mask
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_get_modifier_mask")
  (return-type "GdkModifierType")
)



;; From gtkadjustment.h

(define-method get_lower
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_lower")
  (return-type "gdouble")
)

(define-method set_lower
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_lower")
  (return-type "none")
  (parameters
    '("gdouble" "lower")
  )
)

(define-method get_upper
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_upper")
  (return-type "gdouble")
)

(define-method set_upper
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_upper")
  (return-type "none")
  (parameters
    '("gdouble" "upper")
  )
)

(define-method get_step_increment
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_step_increment")
  (return-type "gdouble")
)

(define-method set_step_increment
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_step_increment")
  (return-type "none")
  (parameters
    '("gdouble" "step_increment")
  )
)

(define-method get_page_increment
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_page_increment")
  (return-type "gdouble")
)

(define-method set_page_increment
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_page_increment")
  (return-type "none")
  (parameters
    '("gdouble" "page_increment")
  )
)

(define-method get_page_size
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_page_size")
  (return-type "gdouble")
)

(define-method set_page_size
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_page_size")
  (return-type "none")
  (parameters
    '("gdouble" "page_size")
  )
)

(define-method configure
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_configure")
  (return-type "none")
  (parameters
    '("gdouble" "value")
    '("gdouble" "lower")
    '("gdouble" "upper")
    '("gdouble" "step_increment")
    '("gdouble" "page_increment")
    '("gdouble" "page_size")
  )
)



;; From gtkbuilder.h

(define-method add_objects_from_file
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_objects_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("gchar**" "object_ids")
    '("GError**" "error")
  )
)

(define-method add_objects_from_string
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_objects_from_string")
  (return-type "guint")
  (parameters
    '("const-gchar*" "buffer")
    '("gsize" "length")
    '("gchar**" "object_ids")
    '("GError**" "error")
  )
)



;; From gtkcalendar.h

(define-method set_detail_func
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_set_detail_func")
  (return-type "none")
  (parameters
    '("GtkCalendarDetailFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_detail_width_chars
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_set_detail_width_chars")
  (return-type "none")
  (parameters
    '("gint" "chars")
  )
)

(define-method set_detail_height_rows
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_set_detail_height_rows")
  (return-type "none")
  (parameters
    '("gint" "rows")
  )
)

(define-method get_detail_width_chars
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_get_detail_width_chars")
  (return-type "gint")
)

(define-method get_detail_height_rows
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_get_detail_height_rows")
  (return-type "gint")
)



;; From gtkclipboard.h

(define-method wait_is_uris_available
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_is_uris_available")
  (return-type "gboolean")
)

(define-method wait_for_uris
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_uris")
  (return-type "gchar**")
)

(define-method request_uris
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_uris")
  (return-type "none")
  (parameters
    '("GtkClipboardURIReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)



;; From gtkcolorseldialog.h

(define-method get_color_selection
  (of-object "GtkColorSelectionDialog")
  (c-name "gtk_color_selection_dialog_get_color_selection")
  (return-type "GtkWidget*")
)

;; From gtkcombobox.h

(define-method set_button_sensitivity
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_button_sensitivity")
  (return-type "none")
  (parameters
    '("GtkSensitivityType" "sensitivity")
  )
)

(define-method get_button_sensitivity
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_button_sensitivity")
  (return-type "GtkSensitivityType")
)



;; From gtkcontainer.h

(define-method get_focus_child
  (of-object "GtkContainer")
  (c-name "gtk_container_get_focus_child")
  (return-type "GtkWidget*")
)



;; From gtkdialog.h

(define-method get_action_area
  (of-object "GtkDialog")
  (c-name "gtk_dialog_get_action_area")
  (return-type "GtkWidget*")
)

(define-method get_content_area
  (of-object "GtkDialog")
  (c-name "gtk_dialog_get_content_area")
  (return-type "GtkWidget*")
)



;; From gtkentry.h

(define-method set_overwrite_mode
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_overwrite_mode")
  (return-type "none")
  (parameters
    '("gboolean" "overwrite")
  )
)

(define-method get_overwrite_mode
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_overwrite_mode")
  (return-type "gboolean")
)

(define-method get_text_length
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_text_length")
  (return-type "guint16")
)



;; From gtkfilechooser.h

(define-method get_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_file")
  (return-type "GFile*")
)

(define-method set_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_file")
  (return-type "gboolean")
  (parameters
    '("GFile*" "file")
    '("GError**" "error")
  )
)

(define-method select_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_select_file")
  (return-type "gboolean")
  (parameters
    '("GFile*" "file")
    '("GError**" "error")
  )
)

(define-method unselect_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_unselect_file")
  (return-type "none")
  (parameters
    '("GFile*" "file")
  )
)

(define-method get_files
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_files")
  (return-type "GSList*")
)

(define-method set_current_folder_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_current_folder_file")
  (return-type "gboolean")
  (parameters
    '("GFile*" "file")
    '("GError**" "error")
  )
)

(define-method get_current_folder_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_current_folder_file")
  (return-type "GFile*")
)

(define-method get_preview_file
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_preview_file")
  (return-type "GFile*")
)



;; From gtkfontsel.h

(define-method get_ok_button
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_ok_button")
  (return-type "GtkWidget*")
)

(define-method get_apply_button
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_apply_button")
  (return-type "GtkWidget*")
  (deprecated "don't use this method")
)

(define-method get_cancel_button
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_cancel_button")
  (return-type "GtkWidget*")
)

(define-method get_family_list
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_family_list")
  (return-type "GtkWidget*")
)

(define-method get_face_list
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_face_list")
  (return-type "GtkWidget*")
)

(define-method get_size_entry
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_size_entry")
  (return-type "GtkWidget*")
)

(define-method get_size_list
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_size_list")
  (return-type "GtkWidget*")
)
(define-method get_preview_entry
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_preview_entry")
  (return-type "GtkWidget*")
)

(define-method get_family
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_family")
  (return-type "PangoFontFamily*")
)

(define-method get_face
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_face")
  (return-type "PangoFontFace*")
)

(define-method get_size
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_size")
  (return-type "gint")
)



;; From gtkhandlebox.h

(define-method get_child_detached
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_get_child_detached")
  (return-type "gboolean")
)



;; From gtkicontheme.h

(define-function icon_info_new_for_pixbuf
  (c-name "gtk_icon_info_new_for_pixbuf")
  (return-type "GtkIconInfo*")
  (parameters
    '("GtkIconTheme*" "icon_theme")
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method lookup_by_gicon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_lookup_by_gicon")
  (return-type "GtkIconInfo*")
  (parameters
    '("GIcon*" "icon")
    '("gint" "size")
    '("GtkIconLookupFlags" "flags")
  )
)



;; From gtkimage.h

(define-method set_from_gicon
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_gicon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
    '("GtkIconSize" "size")
  )
)

(define-function image_new_from_gicon
  (c-name "gtk_image_new_from_gicon")
  (return-type "GtkWidget*")
  (parameters
    '("GIcon*" "icon")
    '("GtkIconSize" "size")
  )
)

(define-method get_gicon
  (of-object "GtkImage")
  (c-name "gtk_image_get_gicon")
  (return-type "none")
  (parameters
    '("GIcon**" "gicon")
    '("GtkIconSize*" "size")
  )
)



;; From gtklayout.h

(define-method get_bin_window
  (of-object "GtkLayout")
  (c-name "gtk_layout_get_bin_window")
  (return-type "GdkWindow*")
)



;; From gtkmenu.h

(define-method get_accel_path
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_accel_path")
  (return-type "const-gchar*")
)

(define-method get_monitor
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_monitor")
  (return-type "gint")
)



;; From gtkmenuitem.h

(define-method get_accel_path
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_get_accel_path")
  (return-type "const-gchar*")
)



;; From gtkmessagedialog.h

(define-method get_image
  (of-object "GtkMessageDialog")
  (c-name "gtk_message_dialog_get_image")
  (return-type "GtkWidget*")
)



;; From gtkmountoperation.h

(define-function gtk_mount_operation_get_type
  (c-name "gtk_mount_operation_get_type")
  (return-type "GType")
)

(define-method is_showing
  (of-object "GtkMountOperation")
  (c-name "gtk_mount_operation_is_showing")
  (return-type "gboolean")
)

(define-method set_parent
  (of-object "GtkMountOperation")
  (c-name "gtk_mount_operation_set_parent")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
  )
)

(define-method get_parent
  (of-object "GtkMountOperation")
  (c-name "gtk_mount_operation_get_parent")
  (return-type "GtkWindow*")
)

(define-method set_screen
  (of-object "GtkMountOperation")
  (c-name "gtk_mount_operation_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GtkMountOperation")
  (c-name "gtk_mount_operation_get_screen")
  (return-type "GdkScreen*")
)



;; From gtkplug.h

(define-method get_embedded
  (of-object "GtkPlug")
  (c-name "gtk_plug_get_embedded")
  (return-type "gboolean")
)

(define-method get_socket_window
  (of-object "GtkPlug")
  (c-name "gtk_plug_get_socket_window")
  (return-type "GdkWindow*")
)



;; From gtkpagesetup.h

(define-method load_key_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_load_key_file")
  (return-type "gboolean")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method load_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_load_file")
  (return-type "gboolean")
  (parameters
    '("const-char*" "file_name")
    '("GError**" "error")
  )
)



;; From gtkprintsettings.h

(define-method load_key_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_load_key_file")
  (return-type "gboolean")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method load_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_load_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-method get_number_up_layout
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_number_up_layout")
  (return-type "GtkNumberUpLayout")
)

(define-method set_number_up_layout
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_number_up_layout")
  (return-type "none")
  (parameters
    '("GtkNumberUpLayout" "number_up_layout")
  )
)



;; From gtkscalebutton.h

(define-method get_orientation
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_orientation")
  (return-type "GtkOrientation")
)

(define-method set_orientation
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_orientation")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)

(define-method get_plus_button
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_plus_button")
  (return-type "GtkWidget*")
)

(define-method get_minus_button
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_minus_button")
  (return-type "GtkWidget*")
)

(define-method get_popup
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_popup")
  (return-type "GtkWidget*")
)



;; From gtkselection.h

(define-method get_target
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_target")
  (return-type "GdkAtom")
)

(define-method get_data_type
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_data_type")
  (return-type "GdkAtom")
)

(define-method get_format
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_format")
  (return-type "gint")
)

;(define-method get_data
;  (of-object "GtkSelectionData")
;  (c-name "gtk_selection_data_get_data")
;  (return-type "const-guchar*")
;)

(define-method get_length
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_length")
  (return-type "gint")
)


(define-method get_display
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_display")
  (return-type "GdkDisplay*")
)



;; From gtkshow.h

(define-function show_uri
  (c-name "gtk_show_uri")
  (return-type "gboolean")
  (parameters
    '("GdkScreen*" "screen" (null-ok))
    '("const-gchar*" "uri")
    '("guint32" "timestamp")
    '("GError**" "error")
  )
)



;; From gtksocket.h

(define-method get_plug_window
  (of-object "GtkSocket")
  (c-name "gtk_socket_get_plug_window")
  (return-type "GdkWindow*")
)



;; From gtkstatusicon.h

(define-function status_icon_new_from_gicon
  (c-name "gtk_status_icon_new_from_gicon")
  (return-type "GtkStatusIcon*")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-method get_x11_window_id
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_x11_window_id")
  (return-type "guint32")
)

(define-method get_gicon
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_gicon")
  (return-type "GIcon*")
)

(define-method set_from_gicon
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_from_gicon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)



;; From gtktooltip.h

(define-method set_icon_from_icon_name
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_icon_from_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name" (null-ok))
    '("GtkIconSize" "size")
  )
)



;; From gtktoolitem.h

(define-method toolbar_reconfigured
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_toolbar_reconfigured")
  (return-type "none")
)



;; From gtktoolshell.h

(define-method get_icon_size
  (of-object "GtkToolShell")
  (c-name "gtk_tool_shell_get_icon_size")
  (return-type "GtkIconSize")
)

(define-method get_orientation
  (of-object "GtkToolShell")
  (c-name "gtk_tool_shell_get_orientation")
  (return-type "GtkOrientation")
)

(define-method get_style
  (of-object "GtkToolShell")
  (c-name "gtk_tool_shell_get_style")
  (return-type "GtkToolbarStyle")
)

(define-method get_relief_style
  (of-object "GtkToolShell")
  (c-name "gtk_tool_shell_get_relief_style")
  (return-type "GtkReliefStyle")
)

(define-method rebuild_menu
  (of-object "GtkToolShell")
  (c-name "gtk_tool_shell_rebuild_menu")
  (return-type "none")
)

(define-virtual get_icon_size
  (of-object "GtkToolShell")
  (return-type "GtkIconSize")
)

(define-virtual get_orientation
  (of-object "GtkToolShell")
  (return-type "GtkOrientation")
)

(define-virtual get_style
  (of-object "GtkToolShell")
  (return-type "GtkToolbarStyle")
)

(define-virtual get_relief_style
  (of-object "GtkToolShell")
  (return-type "GtkReliefStyle")
)

(define-virtual rebuild_menu
  (of-object "GtkToolShell")
  (return-type "none")
)



;; From gtktreeselection.h

(define-method get_select_function
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_select_function")
  (return-type "GtkTreeSelectionFunc")
)



;; From gtkwidget.h

(define-method get_snapshot
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_snapshot")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkRectangle*" "clip_rect" (null-ok) (default "NULL"))
  )
)

(define-method get_allocation
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_allocation")
  (return-type "GtkAllocation")
)

(define-method get_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_window")
  (return-type "GdkWindow*")
)



;; From gtkwindow.h

(define-method get_default_widget
  (of-object "GtkWindow")
  (c-name "gtk_window_get_default_widget")
  (return-type "GtkWidget*")
)

(define-method list_windows
  (of-object "GtkWindowGroup")
  (c-name "gtk_window_group_list_windows")
  (return-type "GList*")
)
;; -*- scheme -*-
; object definitions ...
(define-object MountOperation
  (in-module "Gtk")
  (parent "GMountOperation")
  (c-name "GtkMountOperation")
  (gtype-id "GTK_TYPE_MOUNT_OPERATION")
)

(define-interface ToolShell
  (in-module "Gtk")
  (c-name "GtkToolShell")
  (gtype-id "GTK_TYPE_TOOL_SHELL")
)



;; -*- scheme -*-

(include "gtk-2.16-types.defs")

;; From gtkaction.h

(define-method block_activate
  (of-object "GtkAction")
  (c-name "gtk_action_block_activate")
  (return-type "none")
)

(define-method unblock_activate
  (of-object "GtkAction")
  (c-name "gtk_action_unblock_activate")
  (return-type "none")
)

(define-method set_gicon
  (of-object "GtkAction")
  (c-name "gtk_action_set_gicon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-method get_gicon
  (of-object "GtkAction")
  (c-name "gtk_action_get_gicon")
  (return-type "GIcon*")
)


(define-method set_icon_name
  (of-object "GtkAction")
  (c-name "gtk_action_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-method get_icon_name
  (of-object "GtkAction")
  (c-name "gtk_action_get_icon_name")
  (return-type "const-gchar*")
)

(define-method set_visible_horizontal
  (of-object "GtkAction")
  (c-name "gtk_action_set_visible_horizontal")
  (return-type "none")
  (parameters
    '("gboolean" "visible_horizontal")
  )
)

(define-method get_visible_horizontal
  (of-object "GtkAction")
  (c-name "gtk_action_get_visible_horizontal")
  (return-type "gboolean")
)

(define-method set_visible_vertical
  (of-object "GtkAction")
  (c-name "gtk_action_set_visible_vertical")
  (return-type "none")
  (parameters
    '("gboolean" "visible_vertical")
  )
)

(define-method get_visible_vertical
  (of-object "GtkAction")
  (c-name "gtk_action_get_visible_vertical")
  (return-type "gboolean")
)

(define-method set_is_important
  (of-object "GtkAction")
  (c-name "gtk_action_set_is_important")
  (return-type "none")
  (parameters
    '("gboolean" "is_important")
  )
)

(define-method get_is_important
  (of-object "GtkAction")
  (c-name "gtk_action_get_is_important")
  (return-type "gboolean")
)


(define-method set_label
  (of-object "GtkAction")
  (c-name "gtk_action_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method get_label
  (of-object "GtkAction")
  (c-name "gtk_action_get_label")
  (return-type "const-gchar*")
)

(define-method set_short_label
  (of-object "GtkAction")
  (c-name "gtk_action_set_short_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "short_label")
  )
)

(define-method get_short_label
  (of-object "GtkAction")
  (c-name "gtk_action_get_short_label")
  (return-type "const-gchar*")
)

(define-method set_tooltip
  (of-object "GtkAction")
  (c-name "gtk_action_set_tooltip")
  (return-type "none")
  (parameters
    '("const-gchar*" "tooltip")
  )
)

(define-method get_tooltip
  (of-object "GtkAction")
  (c-name "gtk_action_get_tooltip")
  (return-type "const-gchar*")
)

(define-method set_stock_id
  (of-object "GtkAction")
  (c-name "gtk_action_set_stock_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-method get_stock_id
  (of-object "GtkAction")
  (c-name "gtk_action_get_stock_id")
  (return-type "const-gchar*")
)



;; From gtkactivatable.h

(define-function gtk_activatable_get_type
  (c-name "gtk_activatable_get_type")
  (return-type "GType")
)

(define-method sync_action_properties
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_sync_action_properties")
  (return-type "none")
  (parameters
    '("GtkAction*" "action" (null-ok) (default "NULL"))
  )
)

(define-method set_related_action
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_set_related_action")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)

(define-method get_related_action
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_get_related_action")
  (return-type "GtkAction*")
)

(define-method set_use_action_appearance
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_set_use_action_appearance")
  (return-type "none")
  (parameters
    '("gboolean" "use_appearance")
  )
)

(define-method get_use_action_appearance
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_get_use_action_appearance")
  (return-type "gboolean")
)

(define-method do_set_related_action
  (of-object "GtkActivatable")
  (c-name "gtk_activatable_do_set_related_action")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)

(define-virtual update
  (of-object "GtkActivatable")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
    '("const-gchar*" "property_name")
  )
)

(define-virtual sync_action_properties
  (of-object "GtkActivatable")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)


;; From gtkcellview.h

(define-method get_model
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_get_model")
  (return-type "GtkTreeModel*")
)



;; From gtkentry.h

(define-method set_progress_fraction
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_progress_fraction")
  (return-type "none")
  (parameters
    '("gdouble" "fraction")
  )
)

(define-method get_progress_fraction
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_progress_fraction")
  (return-type "gdouble")
)

(define-method set_progress_pulse_step
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_progress_pulse_step")
  (return-type "none")
  (parameters
    '("gdouble" "fraction")
  )
)

(define-method get_progress_pulse_step
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_progress_pulse_step")
  (return-type "gdouble")
)

(define-method progress_pulse
  (of-object "GtkEntry")
  (c-name "gtk_entry_progress_pulse")
  (return-type "none")
)

(define-method set_icon_from_pixbuf
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_from_pixbuf")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method set_icon_from_stock
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_from_stock")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("const-gchar*" "stock_id" (null-ok))
  )
)

(define-method set_icon_from_icon_name
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_from_icon_name")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("const-gchar*" "icon_name" (null-ok))
  )
)

(define-method set_icon_from_gicon
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_from_gicon")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("GIcon*" "icon" (null-ok))
  )
)

(define-method get_icon_storage_type
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_storage_type")
  (return-type "GtkImageType")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method get_icon_pixbuf
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_pixbuf")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method get_icon_stock
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_stock")
  (return-type "const-gchar*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method get_icon_name
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_name")
  (return-type "const-gchar*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method get_icon_gicon
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_gicon")
  (return-type "GIcon*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method set_icon_activatable
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_activatable")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("gboolean" "activatable")
  )
)

(define-method get_icon_activatable
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_activatable")
  (return-type "gboolean")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method set_icon_sensitive
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_sensitive")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("gboolean" "sensitive")
  )
)

(define-method get_icon_sensitive
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_sensitive")
  (return-type "gboolean")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method get_icon_at_pos
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_at_pos")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_icon_tooltip_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_tooltip_text")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("const-gchar*" "tooltip" (null-ok))
  )
)

(define-method get_icon_tooltip_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_tooltip_text")
  (return-type "gchar*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method set_icon_tooltip_markup
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_icon_tooltip_markup")
  (return-type "none")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
    '("const-gchar*" "tooltip" (null-ok))
  )
)

(define-method get_icon_tooltip_markup
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_icon_tooltip_markup")
  (return-type "gchar*")
  (parameters
    '("GtkEntryIconPosition" "icon_pos")
  )
)

(define-method unset_invisible_char
  (of-object "GtkEntry")
  (c-name "gtk_entry_unset_invisible_char")
  (return-type "none")
)



;; From gtkimagemenuitem.h

(define-method set_always_show_image
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_set_always_show_image")
  (return-type "none")
  (parameters
    '("gboolean" "always_show")
  )
)

(define-method get_always_show_image
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_get_always_show_image")
  (return-type "gboolean")
)

(define-method set_use_stock
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_set_use_stock")
  (return-type "none")
  (parameters
    '("gboolean" "use_stock")
  )
)

(define-method get_use_stock
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_get_use_stock")
  (return-type "gboolean")
)

(define-method set_accel_group
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_set_accel_group")
  (return-type "none")
  (parameters
    '("GtkAccelGroup*" "accel_group")
  )
)



;; From gtkimmulticontext.h

(define-method get_context_id
  (of-object "GtkIMMulticontext")
  (c-name "gtk_im_multicontext_get_context_id")
  (return-type "const-char*")
)

(define-method set_context_id
  (of-object "GtkIMMulticontext")
  (c-name "gtk_im_multicontext_set_context_id")
  (return-type "none")
  (parameters
    '("const-char*" "context_id")
  )
)



;; From gtkmenuitem.h

(define-method set_label
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method get_label
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_get_label")
  (return-type "const-gchar*")
)

(define-method set_use_underline
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_set_use_underline")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_underline
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_get_use_underline")
  (return-type "gboolean")
)



;; From gtkorientable.h

(define-function gtk_orientable_get_type
  (c-name "gtk_orientable_get_type")
  (return-type "GType")
)

(define-method set_orientation
  (of-object "GtkOrientable")
  (c-name "gtk_orientable_set_orientation")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "GtkOrientable")
  (c-name "gtk_orientable_get_orientation")
  (return-type "GtkOrientation")
)



;; From gtkprintoperation.h

(define-method draw_page_finish
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_draw_page_finish")
  (return-type "none")
)

(define-method set_defer_drawing
  (of-object "GtkPrintOperation")
  (c-name "gtk_print_operation_set_defer_drawing")
  (return-type "none")
)



;; From gtkprintsettings.h

(define-method get_resolution_x
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_resolution_x")
  (return-type "gint")
)

(define-method get_resolution_y
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_resolution_y")
  (return-type "gint")
)

(define-method set_resolution_xy
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_resolution_xy")
  (return-type "none")
  (parameters
    '("gint" "resolution_x")
    '("gint" "resolution_y")
  )
)

(define-method get_printer_lpi
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_get_printer_lpi")
  (return-type "gdouble")
)

(define-method set_printer_lpi
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_set_printer_lpi")
  (return-type "none")
  (parameters
    '("gdouble" "lpi")
  )
)



;; From gtkscale.h

(define-method add_mark
  (of-object "GtkScale")
  (c-name "gtk_scale_add_mark")
  (return-type "none")
  (parameters
    '("gdouble" "value")
    '("GtkPositionType" "position")
    '("const-gchar*" "markup" (null-ok))
  )
)

(define-method clear_marks
  (of-object "GtkScale")
  (c-name "gtk_scale_clear_marks")
  (return-type "none")
)



;; From gtkselection.h

(define-method get_selection
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_selection")
  (return-type "GdkAtom")
)



;; From gtkstatusicon.h

(define-method get_has_tooltip
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_has_tooltip")
  (return-type "gboolean")
)

(define-method get_tooltip_text
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_tooltip_text")
  (return-type "gchar*")
)

(define-method get_tooltip_markup
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_tooltip_markup")
  (return-type "gchar*")
)

(define-method set_has_tooltip
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_has_tooltip")
  (return-type "none")
  (parameters
    '("gboolean" "has_tooltip")
  )
)

(define-method set_tooltip_text
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_tooltip_markup
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)



;; From gtkstyle.h

(define-method get_style_property
  (of-object "GtkStyle")
  (c-name "gtk_style_get_style_property")
  (return-type "none")
  (parameters
    '("GType" "widget_type")
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method get_valist
  (of-object "GtkStyle")
  (c-name "gtk_style_get_valist")
  (return-type "none")
  (parameters
    '("GType" "widget_type")
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-method get
  (of-object "GtkStyle")
  (c-name "gtk_style_get")
  (return-type "none")
  (parameters
    '("GType" "widget_type")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)



;; From gtkwindow.h

(define-function gtk_window_get_default_icon_name
  (c-name "gtk_window_get_default_icon_name")
  (return-type "const-gchar*")
)
;; -*- scheme -*-
; object definitions ...

(define-interface Activatable
  (in-module "Gtk")
  (c-name "GtkActivatable")
  (gtype-id "GTK_TYPE_ACTIVATABLE")
)

(define-interface Orientable
  (in-module "Gtk")
  (c-name "GtkOrientable")
  (gtype-id "GTK_TYPE_ORIENTABLE")
)



;; -*- scheme -*-

(include "gtk-extrafuncs.defs")
(include "gtk-base-types.defs")

;; From /opt/gtk2/include/gtk-2.0/gtk/gtk.h

;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkaboutdialog.h

(define-function gtk_about_dialog_get_type
  (c-name "gtk_about_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_about_dialog_new
  (c-name "gtk_about_dialog_new")
  (is-constructor-of "GtkAboutDialog")
  (return-type "GtkWidget*")
)

(define-method get_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_name")
  (return-type "const-gchar*")
)

(define-method set_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name" (null-ok))
  )
)

(define-method get_version
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_version")
  (return-type "const-gchar*")
)

(define-method set_version
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_version")
  (return-type "none")
  (parameters
    '("const-gchar*" "version" (null-ok))
  )
)

(define-method get_copyright
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_copyright")
  (return-type "const-gchar*")
)

(define-method set_copyright
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_copyright")
  (return-type "none")
  (parameters
    '("const-gchar*" "copyright" (null-ok))
  )
)

(define-method get_comments
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_comments")
  (return-type "const-gchar*")
)

(define-method set_comments
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_comments")
  (return-type "none")
  (parameters
    '("const-gchar*" "comments" (null-ok))
  )
)

(define-method get_license
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_license")
  (return-type "const-gchar*")
)

(define-method set_license
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_license")
  (return-type "none")
  (parameters
    '("const-gchar*" "license" (null-ok))
  )
)

(define-method get_wrap_license
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_wrap_license")
  (return-type "gboolean")
)

(define-method set_wrap_license
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_wrap_license")
  (return-type "none")
  (parameters
    '("gboolean" "wrap_license")
  )
)

(define-method get_website
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_website")
  (return-type "const-gchar*")
)

(define-method set_website
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_website")
  (return-type "none")
  (parameters
    '("const-gchar*" "website" (null-ok))
  )
)

(define-method get_website_label
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_website_label")
  (return-type "const-gchar*")
)

(define-method set_website_label
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_website_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "website_label" (null-ok))
  )
)

(define-method get_authors
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_authors")
  (return-type "gchar**")
)

(define-method set_authors
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_authors")
  (return-type "none")
  (parameters
    '("gchar**" "authors")
  )
)

(define-method get_documenters
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_documenters")
  (return-type "gchar**")
)

(define-method set_documenters
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_documenters")
  (return-type "none")
  (parameters
    '("gchar**" "documenters")
  )
)

(define-method get_artists
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_artists")
  (return-type "gchar**")
)

(define-method set_artists
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_artists")
  (return-type "none")
  (parameters
    '("gchar**" "artists")
  )
)

(define-method get_translator_credits
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_translator_credits")
  (return-type "const-gchar*")
)

(define-method set_translator_credits
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_translator_credits")
  (return-type "none")
  (parameters
    '("const-gchar*" "translator_credits" (null-ok))
  )
)

(define-method get_logo
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_logo")
  (return-type "GdkPixbuf*")
)

(define-method set_logo
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_logo")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "logo" (null-ok))
  )
)

(define-method get_logo_icon_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_logo_icon_name")
  (return-type "const-gchar*")
)

(define-method set_logo_icon_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_logo_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name" (null-ok))
  )
)

(define-function about_dialog_set_email_hook
  (c-name "gtk_about_dialog_set_email_hook")
  (return-type "GtkAboutDialogActivateLinkFunc")
  (parameters
    '("GtkAboutDialogActivateLinkFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-function about_dialog_set_url_hook
  (c-name "gtk_about_dialog_set_url_hook")
  (return-type "GtkAboutDialogActivateLinkFunc")
  (parameters
    '("GtkAboutDialogActivateLinkFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-function show_about_dialog
  (c-name "gtk_show_about_dialog")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaccelgroup.h

(define-function gtk_accel_group_get_type
  (c-name "gtk_accel_group_get_type")
  (return-type "GType")
)

(define-function gtk_accel_group_new
  (c-name "gtk_accel_group_new")
  (is-constructor-of "GtkAccelGroup")
  (return-type "GtkAccelGroup*")
)

(define-method lock
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_lock")
  (return-type "none")
)

(define-method unlock
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_unlock")
  (return-type "none")
)

(define-method connect
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_connect")
  (return-type "none")
  (parameters
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
    '("GtkAccelFlags" "accel_flags")
    '("GClosure*" "closure")
  )
)

(define-method connect_by_path
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_connect_by_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path")
    '("GClosure*" "closure")
  )
)

(define-method disconnect
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_disconnect")
  (return-type "gboolean")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-method disconnect_key
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_disconnect_key")
  (return-type "gboolean")
  (parameters
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
  )
)

(define-method activate
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_activate")
  (return-type "gboolean")
  (parameters
    '("GQuark" "accel_quark")
    '("GObject*" "acceleratable")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
  )
)

(define-function accel_groups_activate
  (c-name "gtk_accel_groups_activate")
  (return-type "gboolean")
  (parameters
    '("GObject*" "object")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
  )
)

(define-function accel_groups_from_object
  (c-name "gtk_accel_groups_from_object")
  (return-type "GSList*")
  (parameters
    '("GObject*" "object")
  )
)

(define-method find
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_find")
  (return-type "GtkAccelKey*")
   (parameters
    '("gboolean" "(*find_func")
   )
 )

(define-function accel_group_from_accel_closure
  (c-name "gtk_accel_group_from_accel_closure")
  (return-type "GtkAccelGroup*")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-virtual accel_changed
  (of-object "GtkAccelGroup")
  (return-type "none")
  (parameters
    '("guint" "keyval")
    '("GdkModifierType" "modifier")
    '("GClosure*" "accel_closure")
  )
)

(define-function accelerator_valid
  (c-name "gtk_accelerator_valid")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-function accelerator_parse
  (c-name "gtk_accelerator_parse")
  (return-type "none")
  (parameters
    '("const-gchar*" "accelerator")
    '("guint*" "accelerator_key")
    '("GdkModifierType*" "accelerator_mods")
  )
)

(define-function accelerator_name
  (c-name "gtk_accelerator_name")
  (return-type "gchar*")
  (parameters
    '("guint" "accelerator_key")
    '("GdkModifierType" "accelerator_mods")
  )
)

(define-function accelerator_set_default_mod_mask
  (c-name "gtk_accelerator_set_default_mod_mask")
  (return-type "none")
  (parameters
    '("GdkModifierType" "default_mod_mask")
  )
)

(define-function accelerator_get_default_mod_mask
  (c-name "gtk_accelerator_get_default_mod_mask")
  (return-type "GdkModifierType")
)

(define-method query
  (of-object "GtkAccelGroup")
  (c-name "gtk_accel_group_query")
  (return-type "GtkAccelGroupEntry*")
  (parameters
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
    '("guint*" "n_entries")
  )
)

(define-function accelerator_get_label
  (c-name "gtk_accelerator_get_label")
  (return-type "gchar*")
  (parameters
    '("guint" "accelerator_key")
    '("GdkModifierType" "accelerator_mods")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaccellabel.h

(define-function gtk_accel_label_get_type
  (c-name "gtk_accel_label_get_type")
  (return-type "GType")
)

(define-method accelerator_width
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_accelerator_width")
  (deprecated "use AtkAccelLabel.get_accel_width")
  (return-type "guint")
  (deprecated "use GtkAccelLabel.get_accel_width")
)

(define-method get_accel_widget
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_get_accel_widget")
  (return-type "GtkWidget*")
)

(define-method get_accel_width
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_get_accel_width")
  (return-type "guint")
)

(define-method set_accel_widget
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_set_accel_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "accel_widget")
  )
)

(define-method set_accel_closure
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_set_accel_closure")
  (return-type "none")
  (parameters
    '("GClosure*" "accel_closure")
  )
)

(define-method refetch
  (of-object "GtkAccelLabel")
  (c-name "gtk_accel_label_refetch")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaccelmap.h

(define-function accel_map_add_entry
  (c-name "gtk_accel_map_add_entry")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
  )
)

(define-function accel_map_lookup_entry
  (c-name "gtk_accel_map_lookup_entry")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "accel_path")
    '("GtkAccelKey*" "key")
  )
)

(define-function accel_map_change_entry
  (c-name "gtk_accel_map_change_entry")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "accel_path")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
    '("gboolean" "replace")
  )
)

(define-function accel_map_load
  (c-name "gtk_accel_map_load")
  (return-type "none")
  (parameters
    '("const-gchar*" "file_name")
  )
)

(define-function accel_map_save
  (c-name "gtk_accel_map_save")
  (return-type "none")
  (parameters
    '("const-gchar*" "file_name")
  )
)

(define-function accel_map_foreach
  (c-name "gtk_accel_map_foreach")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("GtkAccelMapForeach" "foreach_func")
  )
)

(define-function accel_map_load_fd
  (c-name "gtk_accel_map_load_fd")
  (return-type "none")
  (parameters
    '("gint" "fd")
  )
)

(define-function accel_map_load_scanner
  (c-name "gtk_accel_map_load_scanner")
  (return-type "none")
  (parameters
    '("GScanner*" "scanner")
  )
)

(define-function accel_map_save_fd
  (c-name "gtk_accel_map_save_fd")
  (return-type "none")
  (parameters
    '("gint" "fd")
  )
)

(define-function accel_map_lock_path
  (c-name "gtk_accel_map_lock_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path")
  )
)

(define-function accel_map_unlock_path
  (c-name "gtk_accel_map_unlock_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path")
  )
)

(define-function accel_map_add_filter
  (c-name "gtk_accel_map_add_filter")
  (return-type "none")
  (parameters
    '("const-gchar*" "filter_pattern")
  )
)

(define-function accel_map_foreach_unfiltered
  (c-name "gtk_accel_map_foreach_unfiltered")
  (return-type "none")
  (parameters
    '("gpointer" "data")
    '("GtkAccelMapForeach" "foreach_func")
  )
)

(define-function accel_map_get_type
  (c-name "gtk_accel_map_get_type")
  (return-type "GType")
)

(define-function accel_map_get
  (c-name "gtk_accel_map_get")
  (return-type "GtkAccelMap*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaccessible.h

(define-function gtk_accessible_get_type
  (c-name "gtk_accessible_get_type")
  (return-type "GType")
)

(define-method connect_widget_destroyed
  (of-object "GtkAccessible")
  (c-name "gtk_accessible_connect_widget_destroyed")
  (return-type "none")
)

(define-virtual connect_widget_destroyed
  (of-object "GtkAccessible")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaction.h

(define-function gtk_action_get_type
  (c-name "gtk_action_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GtkAction")
  (c-name "gtk_action_get_name")
  (return-type "const-gchar*")
)

(define-method is_sensitive
  (of-object "GtkAction")
  (c-name "gtk_action_is_sensitive")
  (return-type "gboolean")
)

(define-method get_sensitive
  (of-object "GtkAction")
  (c-name "gtk_action_get_sensitive")
  (return-type "gboolean")
)

(define-method is_visible
  (of-object "GtkAction")
  (c-name "gtk_action_is_visible")
  (return-type "gboolean")
)

(define-method get_visible
  (of-object "GtkAction")
  (c-name "gtk_action_get_visible")
  (return-type "gboolean")
)

(define-method activate
  (of-object "GtkAction")
  (c-name "gtk_action_activate")
  (return-type "none")
)

(define-method create_icon
  (of-object "GtkAction")
  (c-name "gtk_action_create_icon")
  (return-type "GtkWidget*")
  (parameters
    '("GtkIconSize" "icon_size")
  )
)

(define-method create_menu_item
  (of-object "GtkAction")
  (c-name "gtk_action_create_menu_item")
  (return-type "GtkWidget*")
)

(define-method create_tool_item
  (of-object "GtkAction")
  (c-name "gtk_action_create_tool_item")
  (return-type "GtkWidget*")
)

(define-method connect_proxy
  (of-object "GtkAction")
  (c-name "gtk_action_connect_proxy")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)

(define-method disconnect_proxy
  (of-object "GtkAction")
  (c-name "gtk_action_disconnect_proxy")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)

(define-method get_proxies
  (of-object "GtkAction")
  (c-name "gtk_action_get_proxies")
  (return-type "GSList*")
)

(define-method connect_accelerator
  (of-object "GtkAction")
  (c-name "gtk_action_connect_accelerator")
  (return-type "none")
)

(define-method disconnect_accelerator
  (of-object "GtkAction")
  (c-name "gtk_action_disconnect_accelerator")
  (return-type "none")
)

(define-method get_accel_path
  (of-object "GtkAction")
  (c-name "gtk_action_get_accel_path")
  (return-type "const-gchar*")
)

(define-method block_activate_from
  (of-object "GtkAction")
  (c-name "gtk_action_block_activate_from")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)

(define-method unblock_activate_from
  (of-object "GtkAction")
  (c-name "gtk_action_unblock_activate_from")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)

(define-method set_accel_path
  (of-object "GtkAction")
  (c-name "gtk_action_set_accel_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path") ;; NULL not okay
  )
)

(define-method set_accel_group
  (of-object "GtkAction")
  (c-name "gtk_action_set_accel_group")
  (return-type "none")
  (parameters
    '("GtkAccelGroup*" "accel_group" (null-ok))
  )
)

(define-method set_sensitive
  (of-object "GtkAction")
  (c-name "gtk_action_set_sensitive")
  (return-type "none")
  (parameters
    '("gboolean" "sensitive")
  )
)

(define-method set_visible
  (of-object "GtkAction")
  (c-name "gtk_action_set_visible")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-virtual activate
  (of-object "GtkAction")
  (return-type "none")
)
(define-virtual connect_proxy
  (of-object "GtkAction")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)
(define-virtual create_menu_item
  (of-object "GtkAction")
  (return-type "GtkWidget*")
)
(define-virtual create_tool_item
  (of-object "GtkAction")
  (return-type "GtkWidget*")
)
(define-virtual disconnect_proxy
  (of-object "GtkAction")
  (return-type "none")
  (parameters
    '("GtkWidget*" "proxy")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkactiongroup.h

(define-function gtk_action_group_get_type
  (c-name "gtk_action_group_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_get_name")
  (return-type "const-gchar*")
)

(define-method get_sensitive
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_get_sensitive")
  (return-type "gboolean")
)

(define-method set_sensitive
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_set_sensitive")
  (return-type "none")
  (parameters
    '("gboolean" "sensitive")
  )
)

(define-method get_visible
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_get_visible")
  (return-type "gboolean")
)

(define-method set_visible
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_set_visible")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_action
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_get_action")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method list_actions
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_list_actions")
  (return-type "GList*")
)

(define-method add_action
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_action")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)

(define-method add_action_with_accel
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_action_with_accel")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
    '("const-gchar*" "accelerator" (null-ok))
  )
)

(define-method remove_action
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_remove_action")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)

(define-method add_actions
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_actions")
  (return-type "none")
  (parameters
    '("GtkActionEntry*" "entries")
    '("guint" "n_entries")
    '("gpointer" "user_data")
  )
)

(define-method add_toggle_actions
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_toggle_actions")
  (return-type "none")
  (parameters
    '("GtkToggleActionEntry*" "entries")
    '("guint" "n_entries")
    '("gpointer" "user_data")
  )
)

(define-method add_radio_actions
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_radio_actions")
  (return-type "none")
  (parameters
    '("GtkRadioActionEntry*" "entries")
    '("guint" "n_entries")
    '("gint" "value")
    '("GCallback" "on_change")
    '("gpointer" "user_data")
  )
)

(define-method add_actions_full
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_actions_full")
  (return-type "none")
  (parameters
    '("GtkActionEntry*" "entries")
    '("guint" "n_entries")
    '("gpointer" "user_data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method add_toggle_actions_full
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_toggle_actions_full")
  (return-type "none")
  (parameters
    '("GtkToggleActionEntry*" "entries")
    '("guint" "n_entries")
    '("gpointer" "user_data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method add_radio_actions_full
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_add_radio_actions_full")
  (return-type "none")
  (parameters
    '("GtkRadioActionEntry*" "entries")
    '("guint" "n_entries")
    '("gint" "value")
    '("GCallback" "on_change")
    '("gpointer" "user_data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_translate_func
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_set_translate_func")
  (return-type "none")
  (parameters
    '("GtkTranslateFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "notify")
  )
)

(define-method set_translation_domain
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
  )
)

(define-method translate_string
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_translate_string")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-virtual get_action
  (of-object "GtkActionGroup")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "action_name")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkadjustment.h

(define-function gtk_adjustment_get_type
  (c-name "gtk_adjustment_get_type")
  (return-type "GType")
)

(define-method changed
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_changed")
  (return-type "none")
)

(define-method value_changed
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_value_changed")
  (return-type "none")
)

(define-method clamp_page
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_clamp_page")
  (return-type "none")
  (parameters
    '("gdouble" "lower")
    '("gdouble" "upper")
  )
)

(define-method get_value
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_get_value")
  (return-type "gdouble")
)

(define-method set_value
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
)

(define-virtual changed
  (of-object "GtkAdjustment")
  (return-type "none")
)
(define-virtual value_changed
  (of-object "GtkAdjustment")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkalignment.h

(define-function gtk_alignment_get_type
  (c-name "gtk_alignment_get_type")
  (return-type "GType")
)

(define-method set
  (of-object "GtkAlignment")
  (c-name "gtk_alignment_set")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
    '("gfloat" "yalign")
    '("gfloat" "xscale")
    '("gfloat" "yscale")
  )
)

(define-method set_padding
  (of-object "GtkAlignment")
  (c-name "gtk_alignment_set_padding")
  (return-type "none")
  (parameters
    '("guint" "padding_top")
    '("guint" "padding_bottom")
    '("guint" "padding_left")
    '("guint" "padding_right")
  )
)

(define-method get_padding
  (of-object "GtkAlignment")
  (c-name "gtk_alignment_get_padding")
  (return-type "none")
  (parameters
    '("guint*" "padding_top")
    '("guint*" "padding_bottom")
    '("guint*" "padding_left")
    '("guint*" "padding_right")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkarrow.h

(define-function gtk_arrow_get_type
  (c-name "gtk_arrow_get_type")
  (return-type "GType")
)

(define-method set
  (of-object "GtkArrow")
  (c-name "gtk_arrow_set")
  (return-type "none")
  (parameters
    '("GtkArrowType" "arrow_type")
    '("GtkShadowType" "shadow_type")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkaspectframe.h

(define-function gtk_aspect_frame_get_type
  (c-name "gtk_aspect_frame_get_type")
  (return-type "GType")
)

(define-method set
  (of-object "GtkAspectFrame")
  (c-name "gtk_aspect_frame_set")
  (return-type "none")
  (parameters
    '("gfloat" "xalign" (default "0.0"))
    '("gfloat" "yalign" (default "0.0"))
    '("gfloat" "ratio" (default "1.0"))
    '("gboolean" "obey_child" (default "1"))
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkbbox.h

(define-function gtk_button_box_get_type
  (c-name "gtk_button_box_get_type")
  (return-type "GType")
)

(define-method get_layout
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_get_layout")
  (return-type "GtkButtonBoxStyle")
)

(define-method set_layout
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_set_layout")
  (return-type "none")
  (parameters
    '("GtkButtonBoxStyle" "layout_style")
  )
)

(define-method get_child_secondary
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_get_child_secondary")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_child_secondary
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_set_child_secondary")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "is_secondary")
  )
)

(define-method set_child_size
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_set_child_size")
  (return-type "none")
  (parameters
    '("gint" "min_width")
    '("gint" "min_height")
  )
  (deprecated "don't use this")
)

(define-method set_child_ipadding
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_set_child_ipadding")
  (return-type "none")
  (parameters
    '("gint" "ipad_x")
    '("gint" "ipad_y")
  )
  (deprecated "don't use this")
)

(define-method get_child_size
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_get_child_size")
  (return-type "none")
  (parameters
    '("gint*" "min_width")
    '("gint*" "min_height")
  )
  (deprecated "don't use this")
)

(define-method get_child_ipadding
  (of-object "GtkButtonBox")
  (c-name "gtk_button_box_get_child_ipadding")
  (return-type "none")
  (parameters
    '("gint*" "ipad_x")
    '("gint*" "ipad_y")
  )
  (deprecated "don't use this")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkbin.h

(define-function gtk_bin_get_type
  (c-name "gtk_bin_get_type")
  (return-type "GType")
)

(define-method get_child
  (of-object "GtkBin")
  (c-name "gtk_bin_get_child")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkbindings.h

(define-function gtk_binding_set_new
  (c-name "gtk_binding_set_new")
  (return-type "GtkBindingSet*")
  (parameters
    '("const-gchar*" "set_name")
  )
  (deprecated "use binding_set_new")
)

(define-function binding_set_new
  (c-name "gtk_binding_set_new")
  (is-constructor-of "GtkBindingSet")
  (return-type "GtkBindingSet*")
  (parameters
    '("const-gchar*" "set_name")
  )
)

(define-function gtk_binding_set_by_class
  (c-name "gtk_binding_set_by_class")
  (return-type "GtkBindingSet*")
  (parameters
    '("gpointer" "object_class")
  )
  (deprecated "use binding_set_by_class")
)

(define-function binding_set_by_class
  (c-name "gtk_binding_set_by_class")
  (return-type "GtkBindingSet*")
  (parameters
    '("gpointer" "object_class")
  )
)

(define-function gtk_binding_set_find
  (c-name "gtk_binding_set_find")
  (return-type "GtkBindingSet*")
  (parameters
    '("const-gchar*" "set_name")
  )
  (deprecated "use binding_set_find")
)

(define-function binding_set_find
  (c-name "gtk_binding_set_find")
  (is-constructor-of "GtkBindingSet")
  (return-type "GtkBindingSet*")
  (parameters
    '("const-gchar*" "set_name")
  )
)

(define-function bindings_activate
  (c-name "gtk_bindings_activate")
  (return-type "gboolean")
  (parameters
    '("GtkObject*" "object")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-function bindings_activate_event
  (c-name "gtk_bindings_activate_event")
  (return-type "gboolean")
  (parameters
    '("GtkObject*" "object")
    '("GdkEventKey*" "event")
  )
)

(define-method activate
  (of-object "GtkBindingSet")
  (c-name "gtk_binding_set_activate")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
    '("GtkObject*" "object")
  )
)

(define-function binding_entry_clear
  (c-name "gtk_binding_entry_clear")
  (return-type "none")
  (parameters
    '("GtkBindingSet*" "binding_set")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-function binding_entry_add_signal
  (c-name "gtk_binding_entry_add_signal")
  (return-type "none")
  (parameters
    '("GtkBindingSet*" "binding_set")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
    '("const-gchar*" "signal_name")
    '("guint" "n_args")
  )
  (varargs #t)
)

(define-method add_path
  (of-object "GtkBindingSet")
  (c-name "gtk_binding_set_add_path")
  (return-type "none")
  (parameters
    '("GtkPathType" "path_type")
    '("const-gchar*" "path_pattern")
    '("GtkPathPriorityType" "priority")
  )
)

(define-function binding_entry_remove
  (c-name "gtk_binding_entry_remove")
  (return-type "none")
  (parameters
    '("GtkBindingSet*" "binding_set")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-function binding_entry_add_signall
  (c-name "gtk_binding_entry_add_signall")
  (return-type "none")
  (parameters
    '("GtkBindingSet*" "binding_set")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
    '("const-gchar*" "signal_name")
    '("GSList*" "binding_args")
  )
)

(define-function binding_parse_binding
  (c-name "gtk_binding_parse_binding")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkbox.h

(define-function gtk_box_get_type
  (c-name "gtk_box_get_type")
  (return-type "GType")
)

(define-method pack_start
  (of-object "GtkBox")
  (c-name "gtk_box_pack_start")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand" (default "TRUE"))
    '("gboolean" "fill" (default "TRUE"))
    '("guint" "padding" (default "0"))
  )
)

(define-method pack_end
  (of-object "GtkBox")
  (c-name "gtk_box_pack_end")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand" (default "TRUE"))
    '("gboolean" "fill" (default "TRUE"))
    '("guint" "padding" (default "0"))
  )
)

(define-method pack_start_defaults
  (of-object "GtkBox")
  (c-name "gtk_box_pack_start_defaults")
  (deprecated "use pack_start instead")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method pack_end_defaults
  (of-object "GtkBox")
  (c-name "gtk_box_pack_end_defaults")
  (deprecated "use pack_end instead")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method set_homogeneous
  (of-object "GtkBox")
  (c-name "gtk_box_set_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "GtkBox")
  (c-name "gtk_box_get_homogeneous")
  (return-type "gboolean")
)

(define-method set_spacing
  (of-object "GtkBox")
  (c-name "gtk_box_set_spacing")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
)

(define-method get_spacing
  (of-object "GtkBox")
  (c-name "gtk_box_get_spacing")
  (return-type "gint")
)

(define-method reorder_child
  (of-object "GtkBox")
  (c-name "gtk_box_reorder_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "position")
  )
)

(define-method query_child_packing
  (of-object "GtkBox")
  (c-name "gtk_box_query_child_packing")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean*" "expand")
    '("gboolean*" "fill")
    '("guint*" "padding")
    '("GtkPackType*" "pack_type")
  )
)

(define-method set_child_packing
  (of-object "GtkBox")
  (c-name "gtk_box_set_child_packing")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand")
    '("gboolean" "fill")
    '("guint" "padding")
    '("GtkPackType" "pack_type")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkbutton.h

(define-function gtk_button_get_type
  (c-name "gtk_button_get_type")
  (return-type "GType")
)

(define-function gtk_button_new
  (c-name "gtk_button_new")
  (is-constructor-of "GtkButton")
  (return-type "GtkWidget*")
)

(define-function gtk_button_new_with_label
  (c-name "gtk_button_new_with_label")
  (is-constructor-of "GtkButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_button_new_from_stock
  (c-name "gtk_button_new_from_stock")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-function gtk_button_new_with_mnemonic
  (c-name "gtk_button_new_with_mnemonic")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method pressed
  (of-object "GtkButton")
  (c-name "gtk_button_pressed")
  (return-type "none")
)

(define-method released
  (of-object "GtkButton")
  (c-name "gtk_button_released")
  (return-type "none")
)

(define-method clicked
  (of-object "GtkButton")
  (c-name "gtk_button_clicked")
  (return-type "none")
)

(define-method enter
  (of-object "GtkButton")
  (c-name "gtk_button_enter")
  (return-type "none")
)

(define-method leave
  (of-object "GtkButton")
  (c-name "gtk_button_leave")
  (return-type "none")
)

(define-method set_relief
  (of-object "GtkButton")
  (c-name "gtk_button_set_relief")
  (return-type "none")
  (parameters
    '("GtkReliefStyle" "newstyle")
  )
)

(define-method get_relief
  (of-object "GtkButton")
  (c-name "gtk_button_get_relief")
  (return-type "GtkReliefStyle")
)

(define-method set_label
  (of-object "GtkButton")
  (c-name "gtk_button_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method get_label
  (of-object "GtkButton")
  (c-name "gtk_button_get_label")
  (return-type "const-gchar*")
)

(define-method set_use_underline
  (of-object "GtkButton")
  (c-name "gtk_button_set_use_underline")
  (return-type "none")
  (parameters
    '("gboolean" "use_underline")
  )
)

(define-method get_use_underline
  (of-object "GtkButton")
  (c-name "gtk_button_get_use_underline")
  (return-type "gboolean")
)

(define-method set_use_stock
  (of-object "GtkButton")
  (c-name "gtk_button_set_use_stock")
  (return-type "none")
  (parameters
    '("gboolean" "use_stock")
  )
)

(define-method get_use_stock
  (of-object "GtkButton")
  (c-name "gtk_button_get_use_stock")
  (return-type "gboolean")
)

(define-method set_focus_on_click
  (of-object "GtkButton")
  (c-name "gtk_button_set_focus_on_click")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_click")
  )
)

(define-method get_focus_on_click
  (of-object "GtkButton")
  (c-name "gtk_button_get_focus_on_click")
  (return-type "gboolean")
)

(define-method set_alignment
  (of-object "GtkButton")
  (c-name "gtk_button_set_alignment")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
    '("gfloat" "yalign")
  )
)

(define-method get_alignment
  (of-object "GtkButton")
  (c-name "gtk_button_get_alignment")
  (return-type "none")
  (parameters
    '("gfloat*" "xalign")
    '("gfloat*" "yalign")
  )
)

(define-method set_image
  (of-object "GtkButton")
  (c-name "gtk_button_set_image")
  (return-type "none")
  (parameters
    '("GtkWidget*" "image")
  )
)

(define-method get_image
  (of-object "GtkButton")
  (c-name "gtk_button_get_image")
  (return-type "GtkWidget*")
)

(define-virtual pressed
  (of-object "GtkButton")
  (return-type "none")
)
(define-virtual released
  (of-object "GtkButton")
  (return-type "none")
)
(define-virtual clicked
  (of-object "GtkButton")
  (return-type "none")
)
(define-virtual enter
  (of-object "GtkButton")
  (return-type "none")
)
(define-virtual leave
  (of-object "GtkButton")
  (return-type "none")
)
(define-virtual activate
  (of-object "GtkButton")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcalendar.h

(define-function gtk_calendar_get_type
  (c-name "gtk_calendar_get_type")
  (return-type "GType")
)

(define-function gtk_calendar_new
  (c-name "gtk_calendar_new")
  (is-constructor-of "GtkCalendar")
  (return-type "GtkWidget*")
)

(define-method select_month
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_select_month")
  (return-type "gboolean")
  (parameters
    '("guint" "month")
    '("guint" "year")
  )
)

(define-method select_day
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_select_day")
  (return-type "none")
  (parameters
    '("guint" "day")
  )
)

(define-method mark_day
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_mark_day")
  (return-type "gboolean")
  (parameters
    '("guint" "day")
  )
)

(define-method unmark_day
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_unmark_day")
  (return-type "gboolean")
  (parameters
    '("guint" "day")
  )
)

(define-method clear_marks
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_clear_marks")
  (return-type "none")
)

(define-method set_display_options
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_set_display_options")
  (return-type "none")
  (parameters
    '("GtkCalendarDisplayOptions" "flags")
  )
)

(define-method get_display_options
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_get_display_options")
  (return-type "GtkCalendarDisplayOptions")
)

(define-method display_options
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_display_options")
  (return-type "none")
  (parameters
    '("GtkCalendarDisplayOptions" "flags")
  )
)

(define-method get_date
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_get_date")
  (return-type "none")
  (parameters
    '("guint*" "year")
    '("guint*" "month")
    '("guint*" "day")
  )
)

(define-method freeze
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_freeze")
  (return-type "none")
)

(define-method thaw
  (of-object "GtkCalendar")
  (c-name "gtk_calendar_thaw")
  (return-type "none")
)

(define-virtual month_changed
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual day_selected
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual day_selected_double_click
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual prev_month
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual next_month
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual prev_year
  (of-object "GtkCalendar")
  (return-type "none")
)
(define-virtual next_year
  (of-object "GtkCalendar")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcelleditable.h

(define-function gtk_cell_editable_get_type
  (c-name "gtk_cell_editable_get_type")
  (return-type "GType")
)

(define-method start_editing
  (of-object "GtkCellEditable")
  (c-name "gtk_cell_editable_start_editing")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method editing_done
  (of-object "GtkCellEditable")
  (c-name "gtk_cell_editable_editing_done")
  (return-type "none")
)

(define-method remove_widget
  (of-object "GtkCellEditable")
  (c-name "gtk_cell_editable_remove_widget")
  (return-type "none")
)

(define-virtual editing_done
  (of-object "GtkCellEditable")
  (return-type "none")
)
(define-virtual remove_widget
  (of-object "GtkCellEditable")
  (return-type "none")
)
(define-virtual start_editing
  (of-object "GtkCellEditable")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcelllayout.h

(define-function gtk_cell_layout_get_type
  (c-name "gtk_cell_layout_get_type")
  (return-type "GType")
)

(define-method pack_start
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_pack_start")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand" (default "TRUE"))
  )
)

(define-method pack_end
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_pack_end")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand" (default "TRUE"))
  )
)

(define-method clear
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_clear")
  (return-type "none")
)

(define-method set_attributes
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_set_attributes")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
  )
  (varargs #t)
)

(define-method add_attribute
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_add_attribute")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("const-gchar*" "attribute")
    '("gint" "column")
  )
)

(define-method set_cell_data_func
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_set_cell_data_func")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("GtkCellLayoutDataFunc" "func")
    '("gpointer" "func_data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method clear_attributes
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_clear_attributes")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
  )
)

(define-method reorder
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_reorder")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gint" "position")
  )
)

(define-virtual pack_start
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand")
  )
)
(define-virtual pack_end
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand")
  )
)
(define-virtual clear
  (of-object "GtkCellLayout")
  (return-type "none")
)
(define-virtual add_attribute
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("const-gchar*" "attribute")
    '("gint" "column")
  )
)
(define-virtual set_cell_data_func
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("GtkCellLayoutDataFunc" "func")
    '("gpointer" "func_data")
    '("GDestroyNotify" "destroy")
  )
)
(define-virtual clear_attributes
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
  )
)
(define-virtual reorder
  (of-object "GtkCellLayout")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gint" "position")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrenderer.h

(define-function gtk_cell_renderer_get_type
  (c-name "gtk_cell_renderer_get_type")
  (return-type "GType")
)

(define-method get_size
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_get_size")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GdkRectangle*" "cell_area")
    '("gint*" "x_offset")
    '("gint*" "y_offset")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method render
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_render")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkWidget*" "widget")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GdkRectangle*" "expose_area")
    '("GtkCellRendererState" "flags")
  )
)

(define-method activate
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_activate")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
    '("GtkWidget*" "widget")
    '("const-gchar*" "path")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GtkCellRendererState" "flags")
  )
)

(define-method start_editing
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_start_editing")
  (return-type "GtkCellEditable*")
  (parameters
    '("GdkEvent*" "event")
    '("GtkWidget*" "widget")
    '("const-gchar*" "path")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GtkCellRendererState" "flags")
  )
)

(define-method set_fixed_size
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_set_fixed_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_fixed_size
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_get_fixed_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method editing_canceled
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_editing_canceled")
  (return-type "none")
)

(define-method stop_editing
  (of-object "GtkCellRenderer")
  (c-name "gtk_cell_renderer_stop_editing")
  (return-type "none")
  (parameters
    '("gboolean" "canceled")
  )
)

(define-virtual get_size
  (of-object "GtkCellRenderer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GdkRectangle*" "cell_area")
    '("gint*" "x_offset")
    '("gint*" "y_offset")
    '("gint*" "width")
    '("gint*" "height")
  )
)
(define-virtual render
  (of-object "GtkCellRenderer")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "window")
    '("GtkWidget*" "widget")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GdkRectangle*" "expose_area")
    '("GtkCellRendererState" "flags")
  )
)
(define-virtual activate
  (of-object "GtkCellRenderer")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
    '("GtkWidget*" "widget")
    '("const-gchar*" "path")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GtkCellRendererState" "flags")
  )
)
(define-virtual editing_canceled
  (of-object "GtkCellRenderer")
  (return-type "none")
)
(define-virtual editing_started
  (of-object "GtkCellRenderer")
  (return-type "none")
  (parameters
    '("GtkCellEditable*" "editable")
    '("const-gchar*" "path")
  )
)
(define-virtual start_editing
  (of-object "GtkCellRenderer")
  (return-type "GtkCellEditable*" (optional))
  (parameters
    '("GdkEvent*" "event")
    '("GtkWidget*" "widget")
    '("const-gchar*" "path")
    '("GdkRectangle*" "background_area")
    '("GdkRectangle*" "cell_area")
    '("GtkCellRendererState" "flags")
   )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrenderercombo.h

(define-function gtk_cell_renderer_combo_get_type
  (c-name "gtk_cell_renderer_combo_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_combo_new
  (c-name "gtk_cell_renderer_combo_new")
  (is-constructor-of "GtkCellRendererCombo")
  (return-type "GtkCellRenderer*")
)

 

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h

(define-function gtk_cell_renderer_pixbuf_get_type
  (c-name "gtk_cell_renderer_pixbuf_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_pixbuf_new
  (c-name "gtk_cell_renderer_pixbuf_new")
  (is-constructor-of "GtkCellRendererPixbuf")
  (return-type "GtkCellRenderer*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrendererprogress.h

(define-function gtk_cell_renderer_progress_get_type
  (c-name "gtk_cell_renderer_progress_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_progress_new
  (c-name "gtk_cell_renderer_progress_new")
  (is-constructor-of "GtkCellRendererProgress")
  (return-type "GtkCellRenderer*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrenderertext.h

(define-function gtk_cell_renderer_text_get_type
  (c-name "gtk_cell_renderer_text_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_text_new
  (c-name "gtk_cell_renderer_text_new")
  (is-constructor-of "GtkCellRendererText")
  (return-type "GtkCellRenderer*")
)

(define-method set_fixed_height_from_font
  (of-object "GtkCellRendererText")
  (c-name "gtk_cell_renderer_text_set_fixed_height_from_font")
  (return-type "none")
  (parameters
    '("gint" "number_of_rows")
  )
)

(define-virtual edited
  (of-object "GtkCellRendererText")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
    '("const-gchar*" "new_text")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcellrenderertoggle.h

(define-function gtk_cell_renderer_toggle_get_type
  (c-name "gtk_cell_renderer_toggle_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_toggle_new
  (c-name "gtk_cell_renderer_toggle_new")
  (is-constructor-of "GtkCellRendererToggle")
  (return-type "GtkCellRenderer*")
)

(define-method get_radio
  (of-object "GtkCellRendererToggle")
  (c-name "gtk_cell_renderer_toggle_get_radio")
  (return-type "gboolean")
)

(define-method set_radio
  (of-object "GtkCellRendererToggle")
  (c-name "gtk_cell_renderer_toggle_set_radio")
  (return-type "none")
  (parameters
    '("gboolean" "radio")
  )
)

(define-method get_active
  (of-object "GtkCellRendererToggle")
  (c-name "gtk_cell_renderer_toggle_get_active")
  (return-type "gboolean")
)

(define-method set_active
  (of-object "GtkCellRendererToggle")
  (c-name "gtk_cell_renderer_toggle_set_active")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-virtual toggled
  (of-object "GtkCellRendererToggle")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)


;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkcellview.h

(define-function gtk_cell_view_get_type
  (c-name "gtk_cell_view_get_type")
  (return-type "GType")
)

(define-function gtk_cell_view_new
  (c-name "gtk_cell_view_new")
  (is-constructor-of "GtkCellView")
  (return-type "GtkWidget*")
)

(define-function cell_view_new_with_text
  (c-name "gtk_cell_view_new_with_text")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "text")
  )
  (caller-owns-return #t)
)

(define-function cell_view_new_with_markup
  (c-name "gtk_cell_view_new_with_markup")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "markup")
  )
  (caller-owns-return #t)
)

(define-function cell_view_new_with_pixbuf
  (c-name "gtk_cell_view_new_with_pixbuf")
  (return-type "GtkWidget*")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
  (caller-owns-return #t)
)

(define-method set_model
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "model" (null-ok))
  )
)

(define-method set_displayed_row
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_set_displayed_row")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path" (null-ok))
  )
)

(define-method get_displayed_row
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_get_displayed_row")
  (return-type "GtkTreePath*")
)

(define-method get_size_of_row
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_get_size_of_row")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkRequisition*" "requisition")
  )
)

(define-method set_background_color
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_set_background_color")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "color" (null-ok))
  )
)

(define-method get_cell_renderers
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_get_cell_renderers")
  (return-type "GList*")
)

;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkclipboard.h


(define-method wait_is_target_available
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_is_target_available")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "target")
  )
)

(define-method set_can_store
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_set_can_store")
  (return-type "none")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
  )
)

(define-method store
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_store")
  (return-type "none")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcheckbutton.h

(define-function gtk_check_button_get_type
  (c-name "gtk_check_button_get_type")
  (return-type "GType")
)

(define-function gtk_check_button_new
  (c-name "gtk_check_button_new")
  (is-constructor-of "GtkCheckButton")
  (return-type "GtkWidget*")
)

(define-function gtk_check_button_new_with_label
  (c-name "gtk_check_button_new_with_label")
  (is-constructor-of "GtkCheckButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_check_button_new_with_mnemonic
  (c-name "gtk_check_button_new_with_mnemonic")
  (is-constructor-of "GtkCheckButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-virtual draw_indicator
  (of-object "GtkCheckButton")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcheckmenuitem.h

(define-function gtk_check_menu_item_get_type
  (c-name "gtk_check_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_check_menu_item_new
  (c-name "gtk_check_menu_item_new")
  (is-constructor-of "GtkCheckMenuItem")
  (return-type "GtkWidget*")
)

(define-function gtk_check_menu_item_new_with_label
  (c-name "gtk_check_menu_item_new_with_label")
  (is-constructor-of "GtkCheckMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_check_menu_item_new_with_mnemonic
  (c-name "gtk_check_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkCheckMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method set_active
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_set_active")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
)

(define-method get_active
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_get_active")
  (return-type "gboolean")
)

(define-method toggled
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_toggled")
  (return-type "none")
)

(define-method set_inconsistent
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_set_inconsistent")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_inconsistent
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_get_inconsistent")
  (return-type "gboolean")
)

(define-method set_draw_as_radio
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_set_draw_as_radio")
  (return-type "none")
  (parameters
    '("gboolean" "draw_as_radio")
  )
)

(define-method get_draw_as_radio
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_get_draw_as_radio")
  (return-type "gboolean")
)

(define-method set_show_toggle
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_set_show_toggle")
  (return-type "none")
  (parameters
    '("gboolean" "always")
  )
  (deprecated "don't use this method")
)

(define-method set_state
  (of-object "GtkCheckMenuItem")
  (c-name "gtk_check_menu_item_set_state")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
  (deprecated "use GtkCheckMenuItem.set_active")
)

(define-virtual toggled
  (of-object "GtkCheckMenuItem")
  (return-type "none")
)
(define-virtual draw_indicator
  (of-object "GtkCheckMenuItem")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkclipboard.h

(define-function gtk_clipboard_get_type
  (c-name "gtk_clipboard_get_type")
  (return-type "GType")
)

(define-function clipboard_get_for_display
  (c-name "gtk_clipboard_get_for_display")
  (is-constructor-of "GtkClipboard")
  (caller-owns-return nil)
  (return-type "GtkClipboard*")
  (parameters
    '("GdkDisplay*" "display" (default "gdk_display_get_default()"))
    '("GdkAtom" "selection" (default "GDK_SELECTION_CLIPBOARD"))
  )
)

(define-function clipboard_get
  (c-name "gtk_clipboard_get")
  (return-type "GtkClipboard*")
  (parameters
    '("GdkAtom" "selection" (default "GDK_SELECTION_CLIPBOARD"))
  )
)

(define-method get_display
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_get_display")
  (return-type "GdkDisplay*")
)

(define-method set_with_data
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_set_with_data")
  (return-type "gboolean")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("guint" "n_targets")
    '("GtkClipboardGetFunc" "get_func")
    '("GtkClipboardClearFunc" "clear_func")
    '("gpointer" "user_data")
  )
)

(define-method set_with_owner
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_set_with_owner")
  (return-type "gboolean")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("guint" "n_targets")
    '("GtkClipboardGetFunc" "get_func")
    '("GtkClipboardClearFunc" "clear_func")
    '("GObject*" "owner")
  )
)

(define-method get_owner
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_get_owner")
  (return-type "GObject*")
)

(define-method clear
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_clear")
  (return-type "none")
)

(define-method set_text
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len" (default "-1"))
  )
)

(define-method request_contents
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_contents")
  (return-type "none")
  (parameters
    '("GdkAtom" "target")
    '("GtkClipboardReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method request_text
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_text")
  (return-type "none")
  (parameters
    '("GtkClipboardTextReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method request_targets
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_targets")
  (return-type "none")
  (parameters
    '("GtkClipboardTargetsReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method wait_for_contents
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_contents")
  (return-type "GtkSelectionData*")
  (parameters
    '("GdkAtom" "target")
  )
)

(define-method wait_for_text
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_text")
  (return-type "gchar*")
)

(define-method wait_is_text_available
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_is_text_available")
  (return-type "gboolean")
)

(define-method wait_for_targets
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_targets")
  (return-type "gboolean")
  (parameters
    '("GdkAtom**" "targets")
    '("gint*" "n_targets")
  )
)

(define-method request_image
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_request_image")
  (return-type "none")
  (parameters
    '("GtkClipboardImageReceivedFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method wait_for_image
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_for_image")
  (return-type "GdkPixbuf*")
)

(define-method set_image
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_set_image")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method wait_is_image_available
  (of-object "GtkClipboard")
  (c-name "gtk_clipboard_wait_is_image_available")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkclist.h

(define-function gtk_clist_get_type
  (c-name "gtk_clist_get_type")
  (return-type "GType")
)

(define-function gtk_clist_new
  (c-name "gtk_clist_new")
  (is-constructor-of "GtkCList")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "columns" (default "1"))
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-function gtk_clist_new_with_titles
  (c-name "gtk_clist_new_with_titles")
  (is-constructor-of "GtkCList")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "columns" (default "1"))
    '("gchar*[]" "titles")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method set_hadjustment
  (of-object "GtkCList")
  (c-name "gtk_clist_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method set_vadjustment
  (of-object "GtkCList")
  (c-name "gtk_clist_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method get_hadjustment
  (of-object "GtkCList")
  (c-name "gtk_clist_get_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_vadjustment
  (of-object "GtkCList")
  (c-name "gtk_clist_get_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_shadow_type
  (of-object "GtkCList")
  (c-name "gtk_clist_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "type")
  )
)

(define-method set_selection_mode
  (of-object "GtkCList")
  (c-name "gtk_clist_set_selection_mode")
  (return-type "none")
  (parameters
    '("GtkSelectionMode" "mode")
  )
)

(define-method set_reorderable
  (of-object "GtkCList")
  (c-name "gtk_clist_set_reorderable")
  (return-type "none")
  (parameters
    '("gboolean" "reorderable")
  )
)

(define-method set_use_drag_icons
  (of-object "GtkCList")
  (c-name "gtk_clist_set_use_drag_icons")
  (return-type "none")
  (parameters
    '("gboolean" "use_icons")
  )
)

(define-method set_button_actions
  (of-object "GtkCList")
  (c-name "gtk_clist_set_button_actions")
  (return-type "none")
  (parameters
    '("guint" "button")
    '("guint8" "button_actions")
  )
)

(define-method freeze
  (of-object "GtkCList")
  (c-name "gtk_clist_freeze")
  (return-type "none")
)

(define-method thaw
  (of-object "GtkCList")
  (c-name "gtk_clist_thaw")
  (return-type "none")
)

(define-method column_titles_show
  (of-object "GtkCList")
  (c-name "gtk_clist_column_titles_show")
  (return-type "none")
)

(define-method column_titles_hide
  (of-object "GtkCList")
  (c-name "gtk_clist_column_titles_hide")
  (return-type "none")
)

(define-method column_title_active
  (of-object "GtkCList")
  (c-name "gtk_clist_column_title_active")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method column_title_passive
  (of-object "GtkCList")
  (c-name "gtk_clist_column_title_passive")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method column_titles_active
  (of-object "GtkCList")
  (c-name "gtk_clist_column_titles_active")
  (return-type "none")
)

(define-method column_titles_passive
  (of-object "GtkCList")
  (c-name "gtk_clist_column_titles_passive")
  (return-type "none")
)

(define-method set_column_title
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_title")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("const-gchar*" "title")
  )
)

(define-method get_column_title
  (of-object "GtkCList")
  (c-name "gtk_clist_get_column_title")
  (return-type "gchar*")
  (parameters
    '("gint" "column")
  )
)

(define-method set_column_widget
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_widget")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("GtkWidget*" "widget")
  )
)

(define-method get_column_widget
  (of-object "GtkCList")
  (c-name "gtk_clist_get_column_widget")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "column")
  )
)

(define-method set_column_justification
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_justification")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("GtkJustification" "justification")
  )
)

(define-method set_column_visibility
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_visibility")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gboolean" "visible")
  )
)

(define-method set_column_resizeable
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_resizeable")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gboolean" "resizeable")
  )
)

(define-method set_column_auto_resize
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_auto_resize")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gboolean" "auto_resize")
  )
)

(define-method columns_autosize
  (of-object "GtkCList")
  (c-name "gtk_clist_columns_autosize")
  (return-type "gint")
)

(define-method optimal_column_width
  (of-object "GtkCList")
  (c-name "gtk_clist_optimal_column_width")
  (return-type "gint")
  (parameters
    '("gint" "column")
  )
)

(define-method set_column_width
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_width")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "width")
  )
)

(define-method set_column_min_width
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_min_width")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "min_width")
  )
)

(define-method set_column_max_width
  (of-object "GtkCList")
  (c-name "gtk_clist_set_column_max_width")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "max_width")
  )
)

(define-method set_row_height
  (of-object "GtkCList")
  (c-name "gtk_clist_set_row_height")
  (return-type "none")
  (parameters
    '("guint" "height")
  )
)

(define-method moveto
  (of-object "GtkCList")
  (c-name "gtk_clist_moveto")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("gfloat" "row_align")
    '("gfloat" "col_align")
  )
)

(define-method row_is_visible
  (of-object "GtkCList")
  (c-name "gtk_clist_row_is_visible")
  (return-type "GtkVisibility")
  (parameters
    '("gint" "row")
  )
)

(define-method get_cell_type
  (of-object "GtkCList")
  (c-name "gtk_clist_get_cell_type")
  (return-type "GtkCellType")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method set_text
  (of-object "GtkCList")
  (c-name "gtk_clist_set_text")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "GtkCList")
  (c-name "gtk_clist_get_text")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("gchar**" "text")
  )
)

(define-method set_pixmap
  (of-object "GtkCList")
  (c-name "gtk_clist_set_pixmap")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok) (default "NULL"))
  )
)

(define-method get_pixmap
  (of-object "GtkCList")
  (c-name "gtk_clist_get_pixmap")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("GdkPixmap**" "pixmap")
    '("GdkBitmap**" "mask")
  )
)

(define-method set_pixtext
  (of-object "GtkCList")
  (c-name "gtk_clist_set_pixtext")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("const-gchar*" "text")
    '("guint8" "spacing")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
  )
)

(define-method get_pixtext
  (of-object "GtkCList")
  (c-name "gtk_clist_get_pixtext")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("gchar**" "text")
    '("guint8*" "spacing")
    '("GdkPixmap**" "pixmap")
    '("GdkBitmap**" "mask")
  )
)

(define-method set_foreground
  (of-object "GtkCList")
  (c-name "gtk_clist_set_foreground")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("GdkColor*" "color")
  )
)

(define-method set_background
  (of-object "GtkCList")
  (c-name "gtk_clist_set_background")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("GdkColor*" "color")
  )
)

(define-method set_cell_style
  (of-object "GtkCList")
  (c-name "gtk_clist_set_cell_style")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("GtkStyle*" "style")
  )
)

(define-method get_cell_style
  (of-object "GtkCList")
  (c-name "gtk_clist_get_cell_style")
  (return-type "GtkStyle*")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method set_row_style
  (of-object "GtkCList")
  (c-name "gtk_clist_set_row_style")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("GtkStyle*" "style")
  )
)

(define-method get_row_style
  (of-object "GtkCList")
  (c-name "gtk_clist_get_row_style")
  (return-type "GtkStyle*")
  (parameters
    '("gint" "row")
  )
)

(define-method set_shift
  (of-object "GtkCList")
  (c-name "gtk_clist_set_shift")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("gint" "vertical")
    '("gint" "horizontal")
  )
)

(define-method set_selectable
  (of-object "GtkCList")
  (c-name "gtk_clist_set_selectable")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gboolean" "selectable")
  )
)

(define-method get_selectable
  (of-object "GtkCList")
  (c-name "gtk_clist_get_selectable")
  (return-type "gboolean")
  (parameters
    '("gint" "row")
  )
)

(define-method prepend
  (of-object "GtkCList")
  (c-name "gtk_clist_prepend")
  (return-type "gint")
  (parameters
    '("gchar*[]" "text")
  )
)

(define-method append
  (of-object "GtkCList")
  (c-name "gtk_clist_append")
  (return-type "gint")
  (parameters
    '("gchar*[]" "text")
  )
)

(define-method insert
  (of-object "GtkCList")
  (c-name "gtk_clist_insert")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gchar*[]" "text")
  )
)

(define-method remove
  (of-object "GtkCList")
  (c-name "gtk_clist_remove")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-method set_row_data
  (of-object "GtkCList")
  (c-name "gtk_clist_set_row_data")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gpointer" "data")
  )
)

(define-method set_row_data_full
  (of-object "GtkCList")
  (c-name "gtk_clist_set_row_data_full")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method get_row_data
  (of-object "GtkCList")
  (c-name "gtk_clist_get_row_data")
  (return-type "gpointer")
  (parameters
    '("gint" "row")
  )
)

(define-method find_row_from_data
  (of-object "GtkCList")
  (c-name "gtk_clist_find_row_from_data")
  (return-type "gint")
  (parameters
    '("gpointer" "data")
  )
)

(define-method select_row
  (of-object "GtkCList")
  (c-name "gtk_clist_select_row")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method unselect_row
  (of-object "GtkCList")
  (c-name "gtk_clist_unselect_row")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
  )
)

(define-method undo_selection
  (of-object "GtkCList")
  (c-name "gtk_clist_undo_selection")
  (return-type "none")
)

(define-method clear
  (of-object "GtkCList")
  (c-name "gtk_clist_clear")
  (return-type "none")
)

(define-method get_selection_info
  (of-object "GtkCList")
  (c-name "gtk_clist_get_selection_info")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint*" "row")
    '("gint*" "column")
  )
)

(define-method select_all
  (of-object "GtkCList")
  (c-name "gtk_clist_select_all")
  (return-type "none")
)

(define-method unselect_all
  (of-object "GtkCList")
  (c-name "gtk_clist_unselect_all")
  (return-type "none")
)

(define-method swap_rows
  (of-object "GtkCList")
  (c-name "gtk_clist_swap_rows")
  (return-type "none")
  (parameters
    '("gint" "row1")
    '("gint" "row2")
  )
)

(define-method row_move
  (of-object "GtkCList")
  (c-name "gtk_clist_row_move")
  (return-type "none")
  (parameters
    '("gint" "source_row")
    '("gint" "dest_row")
  )
)

(define-method set_compare_func
  (of-object "GtkCList")
  (c-name "gtk_clist_set_compare_func")
  (return-type "none")
  (parameters
    '("GtkCListCompareFunc" "cmp_func")
  )
)

(define-method set_sort_column
  (of-object "GtkCList")
  (c-name "gtk_clist_set_sort_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method set_sort_type
  (of-object "GtkCList")
  (c-name "gtk_clist_set_sort_type")
  (return-type "none")
  (parameters
    '("GtkSortType" "sort_type")
  )
)

(define-method sort
  (of-object "GtkCList")
  (c-name "gtk_clist_sort")
  (return-type "none")
)

(define-method set_auto_sort
  (of-object "GtkCList")
  (c-name "gtk_clist_set_auto_sort")
  (return-type "none")
  (parameters
    '("gboolean" "auto_sort")
  )
)

(define-virtual set_scroll_adjustments
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)

(define-virtual refresh
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual select_row
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("GdkEvent*" "event")
  )
)

(define-virtual unselect_row
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "row")
    '("gint" "column")
    '("GdkEvent*" "event")
  )
)

(define-virtual row_move
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "source_row")
    '("gint" "dest_row")
  )
)

(define-virtual click_column
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-virtual resize_column
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "column")
    '("gint" "width")
  )
)

(define-virtual toggle_focus_row
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual select_all
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual unselect_all
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual undo_selection
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual start_selection
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual end_selection
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual extend_selection
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
    '("gboolean" "auto_start_selection")
  )
)

(define-virtual scroll_horizontal
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
)

(define-virtual scroll_vertical
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
)

(define-virtual toggle_add_mode
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual abort_column_resize
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual resync_selection
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-virtual selection_find
  (of-object "GtkCList")
  (return-type "GList*")
  (parameters
    '("gint" "row_number")
    '("GList*" "row_list_element")
  )
)

(define-virtual draw_row
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
    '("gint" "row")
    '("GtkCListRow*" "clist_row")
  )
)

(define-virtual draw_drag_highlight
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkCListRow*" "target_row")
    '("gint" "target_row_number")
    '("GtkCListDragPos" "drag_pos")
  )
)

(define-virtual clear
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual fake_unselect_all
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-virtual sort_list
  (of-object "GtkCList")
  (return-type "none")
)

(define-virtual insert_row
  (of-object "GtkCList")
  (return-type "gint")
  (parameters
    '("gint" "row")
    '("gchar*[]" "text")
  )
)

(define-virtual remove_row
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-virtual set_cell_contents
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkCListRow*" "clist_row")
    '("gint" "column")
    '("GtkCellType" "type")
    '("const-gchar*" "text")
    '("guint8" "spacing")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
  )
)

(define-virtual cell_size_request
  (of-object "GtkCList")
  (return-type "none")
  (parameters
    '("GtkCListRow*" "clist_row")
    '("gint" "column")
    '("GtkRequisition*" "requisition")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcolorbutton.h

(define-function gtk_color_button_get_type
  (c-name "gtk_color_button_get_type")
  (return-type "GType")
)

(define-function color_button_new
  (c-name "gtk_color_button_new")
  (is-constructor-of "GtkColorButton")
  (return-type "GtkWidget*")
)

(define-function color_button_new_with_color
  (c-name "gtk_color_button_new_with_color")
  (is-constructor-of "GtkColorButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-GdkColor*" "color")
  )
)

(define-method set_color
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_set_color")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "color")
  )
)

(define-method set_alpha
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_set_alpha")
  (return-type "none")
  (parameters
    '("guint16" "alpha")
  )
)

(define-method get_color
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_get_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method get_alpha
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_get_alpha")
  (return-type "guint16")
)

(define-method set_use_alpha
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_set_use_alpha")
  (return-type "none")
  (parameters
    '("gboolean" "use_alpha")
  )
)

(define-method get_use_alpha
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_get_use_alpha")
  (return-type "gboolean")
)

(define-method set_title
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "GtkColorButton")
  (c-name "gtk_color_button_get_title")
  (return-type "const-gchar*")
)

(define-virtual color_set
  (of-object "GtkColorButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcolorsel.h

(define-function gtk_color_selection_get_type
  (c-name "gtk_color_selection_get_type")
  (return-type "GType")
)

(define-function gtk_color_selection_new
  (c-name "gtk_color_selection_new")
  (is-constructor-of "GtkColorSelection")
  (return-type "GtkWidget*")
)

(define-method get_has_opacity_control
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_has_opacity_control")
  (return-type "gboolean")
)

(define-method set_has_opacity_control
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_has_opacity_control")
  (return-type "none")
  (parameters
    '("gboolean" "has_opacity")
  )
)

(define-method get_has_palette
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_has_palette")
  (return-type "gboolean")
)

(define-method set_has_palette
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_has_palette")
  (return-type "none")
  (parameters
    '("gboolean" "has_palette")
  )
)

(define-method set_current_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_current_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_current_alpha
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_current_alpha")
  (return-type "none")
  (parameters
    '("guint16" "alpha")
  )
)

(define-method get_current_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_current_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method get_current_alpha
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_current_alpha")
  (return-type "guint16")
)

(define-method set_previous_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_previous_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_previous_alpha
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_previous_alpha")
  (return-type "none")
  (parameters
    '("guint16" "alpha")
  )
)

(define-method get_previous_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_previous_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method get_previous_alpha
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_previous_alpha")
  (return-type "guint16")
)

(define-method is_adjusting
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_is_adjusting")
  (return-type "gboolean")
)

(define-function color_selection_palette_from_string
  (c-name "gtk_color_selection_palette_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
    '("GdkColor**" "colors")
    '("gint*" "n_colors")
  )
)

(define-function color_selection_palette_to_string
  (c-name "gtk_color_selection_palette_to_string")
  (return-type "gchar*")
  (parameters
    '("const-GdkColor*" "colors")
    '("gint" "n_colors")
  )
)

(define-function color_selection_set_change_palette_hook
  (c-name "gtk_color_selection_set_change_palette_hook")
  (return-type "GtkColorSelectionChangePaletteFunc")
  (parameters
    '("GtkColorSelectionChangePaletteFunc" "func")
  )
)

(define-function color_selection_set_change_palette_with_screen_hook
  (c-name "gtk_color_selection_set_change_palette_with_screen_hook")
  (return-type "GtkColorSelectionChangePaletteWithScreenFunc")
  (parameters
    '("GtkColorSelectionChangePaletteWithScreenFunc" "func")
  )
)

(define-method set_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_color")
  (return-type "none")
  (parameters
    '("gdouble*" "color")
  )
  (deprecated "use GtkColorSelection.set_current_color")
)

(define-method get_color
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_get_color")
  (return-type "none")
  (parameters
    '("gdouble*" "color")
  )
  (deprecated "use GtkColorSelection.get_current_color")
)

(define-method set_update_policy
  (of-object "GtkColorSelection")
  (c-name "gtk_color_selection_set_update_policy")
  (return-type "none")
  (parameters
    '("GtkUpdateType" "policy")
  )
  (deprecated "")
)

(define-virtual color_changed
  (of-object "GtkColorSelection")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcolorseldialog.h

(define-function gtk_color_selection_dialog_get_type
  (c-name "gtk_color_selection_dialog_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcombo.h

(define-function gtk_combo_get_type
  (c-name "gtk_combo_get_type")
  (return-type "GType")
)

(define-function gtk_combo_new
  (c-name "gtk_combo_new")
  (is-constructor-of "GtkCombo")
  (return-type "GtkWidget*")
  (deprecated "use gtk.ComboBoxEntry")
)

(define-method set_value_in_list
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_value_in_list")
  (return-type "none")
  (parameters
    '("gboolean" "val")
    '("gboolean" "ok_if_empty")
  )
)

(define-method set_use_arrows
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_use_arrows")
  (return-type "none")
  (parameters
    '("gboolean" "val")
  )
)

(define-method set_use_arrows_always
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_use_arrows_always")
  (return-type "none")
  (parameters
    '("gboolean" "val")
  )
)

(define-method set_case_sensitive
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_case_sensitive")
  (return-type "none")
  (parameters
    '("gboolean" "val")
  )
)

(define-method set_item_string
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_item_string")
  (return-type "none")
  (parameters
    '("GtkItem*" "item")
    '("const-gchar*" "item_value")
  )
)

(define-method set_popdown_strings
  (of-object "GtkCombo")
  (c-name "gtk_combo_set_popdown_strings")
  (return-type "none")
  (parameters
    '("GList*" "strings")
  )
)

(define-method disable_activate
  (of-object "GtkCombo")
  (c-name "gtk_combo_disable_activate")
  (return-type "none")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcombobox.h

(define-function gtk_combo_box_get_type
  (c-name "gtk_combo_box_get_type")
  (return-type "GType")
)

(define-function gtk_combo_box_new
  (c-name "gtk_combo_box_new")
  (is-constructor-of "GtkComboBox")
  (return-type "GtkWidget*")
)

(define-function gtk_combo_box_new_with_model
  (c-name "gtk_combo_box_new_with_model")
  (is-constructor-of "GtkComboBox")
  (return-type "GtkWidget*")
  (parameters
    '("GtkTreeModel*" "model")
  )
)

(define-method set_wrap_width
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_wrap_width")
  (return-type "none")
  (parameters
    '("gint" "width")
  )
)

(define-method set_row_span_column
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_row_span_column")
  (return-type "none")
  (parameters
    '("gint" "row_span")
  )
)

(define-method set_column_span_column
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_column_span_column")
  (return-type "none")
  (parameters
    '("gint" "column_span")
  )
)

(define-method get_active
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_active")
  (return-type "gint")
)

(define-method set_active
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_active")
  (return-type "none")
  (parameters
    '("gint" "index")
  )
)

(define-method get_active_iter
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_active_iter")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_active_iter
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_active_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_model
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "model" (null-ok) (default "NULL"))
  )
)

(define-method get_model
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_model")
  (return-type "GtkTreeModel*")
)

(define-function combo_box_new_text
  (c-name "gtk_combo_box_new_text")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
)

(define-method append_text
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_append_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method insert_text
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_insert_text")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("const-gchar*" "text")
  )
)

(define-method prepend_text
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_prepend_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method remove_text
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_remove_text")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method popup
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_popup")
  (return-type "none")
)

(define-method popdown
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_popdown")
  (return-type "none")
)

(define-method get_wrap_width
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_wrap_width")
  (return-type "gint")
)

(define-method get_row_span_column
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_row_span_column")
  (return-type "gint")
)

(define-method get_column_span_column
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_column_span_column")
  (return-type "gint")
)

(define-method get_add_tearoffs
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_add_tearoffs")
  (return-type "gboolean")
)

(define-method set_add_tearoffs
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_add_tearoffs")
  (return-type "none")
  (parameters
    '("gboolean" "add_tearoffs")
  )
)

(define-method get_focus_on_click
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_focus_on_click")
  (return-type "gboolean")
)

(define-method set_focus_on_click
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_focus_on_click")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_click")
  )
)

(define-method set_row_separator_func
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_set_row_separator_func")
  (return-type "none")
  (parameters
    '("GtkTreeViewRowSeparatorFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method get_row_separator_func
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_row_separator_func")
  (return-type "GtkTreeViewRowSeparatorFunc")
)


(define-method get_active_text
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_active_text")
  (return-type "gchar*")
)

(define-method get_popup_accessible
  (of-object "GtkComboBox")
  (c-name "gtk_combo_box_get_popup_accessible")
  (return-type "AtkObject*")
)

(define-virtual changed
  (of-object "GtkComboBox")
  (return-type "none")
)

(define-virtual get_active_text
  (of-object "GtkComboBox")
  (return-type "char*")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcomboboxentry.h

(define-function gtk_combo_box_entry_get_type
  (c-name "gtk_combo_box_entry_get_type")
  (return-type "GType")
)

(define-function gtk_combo_box_entry_new
  (c-name "gtk_combo_box_entry_new")
  (is-constructor-of "GtkComboBoxEntry")
  (return-type "GtkWidget*")
)

(define-function combo_box_entry_new_with_model
  (c-name "gtk_combo_box_entry_new_with_model")
  (return-type "GtkWidget*")
  (parameters
    '("GtkTreeModel*" "model")
    '("gint" "text_column")
  )
  (caller-owns-return #t)
)

(define-method set_text_column
  (of-object "GtkComboBoxEntry")
  (c-name "gtk_combo_box_entry_set_text_column")
  (return-type "none")
  (parameters
    '("gint" "text_column")
  )
)

(define-method get_text_column
  (of-object "GtkComboBoxEntry")
  (c-name "gtk_combo_box_entry_get_text_column")
  (return-type "gint")
)

(define-function combo_box_entry_new_text
  (c-name "gtk_combo_box_entry_new_text")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcontainer.h

(define-function gtk_container_get_type
  (c-name "gtk_container_get_type")
  (return-type "GType")
)

(define-method set_border_width
  (of-object "GtkContainer")
  (c-name "gtk_container_set_border_width")
  (return-type "none")
  (parameters
    '("guint" "border_width")
  )
)

(define-method get_border_width
  (of-object "GtkContainer")
  (c-name "gtk_container_get_border_width")
  (return-type "guint")
)

(define-method add
  (of-object "GtkContainer")
  (c-name "gtk_container_add")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method remove
  (of-object "GtkContainer")
  (c-name "gtk_container_remove")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method set_resize_mode
  (of-object "GtkContainer")
  (c-name "gtk_container_set_resize_mode")
  (return-type "none")
  (parameters
    '("GtkResizeMode" "resize_mode")
  )
)

(define-method get_resize_mode
  (of-object "GtkContainer")
  (c-name "gtk_container_get_resize_mode")
  (return-type "GtkResizeMode")
)

(define-method check_resize
  (of-object "GtkContainer")
  (c-name "gtk_container_check_resize")
  (return-type "none")
)

(define-method foreach
  (of-object "GtkContainer")
  (c-name "gtk_container_foreach")
  (return-type "none")
  (parameters
    '("GtkCallback" "callback")
    '("gpointer" "callback_data")
  )
)

(define-method foreach_full
  (of-object "GtkContainer")
  (c-name "gtk_container_foreach_full")
  (return-type "none")
  (parameters
    '("GtkCallback" "callback")
    '("GtkCallbackMarshal" "marshal")
    '("gpointer" "callback_data")
    '("GtkDestroyNotify" "notify")
  )
  (deprecated "")
)

(define-method get_children
  (of-object "GtkContainer")
  (c-name "gtk_container_get_children")
  (return-type "GList*")
)

(define-method children
  (of-object "GtkContainer")
  (c-name "gtk_container_children")
  (return-type "GList*")
  (deprecated "use GtkContainer.get_children")
)

(define-method propagate_expose
  (of-object "GtkContainer")
  (c-name "gtk_container_propagate_expose")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GdkEventExpose*" "event")
  )
)

(define-method set_focus_chain
  (of-object "GtkContainer")
  (c-name "gtk_container_set_focus_chain")
  (return-type "none")
  (parameters
    '("GList*" "focusable_widgets")
  )
)

(define-method get_focus_chain
  (of-object "GtkContainer")
  (c-name "gtk_container_get_focus_chain")
  (return-type "gboolean")
  (parameters
    '("GList**" "focusable_widgets")
  )
)

(define-method unset_focus_chain
  (of-object "GtkContainer")
  (c-name "gtk_container_unset_focus_chain")
  (return-type "none")
)

(define-method set_reallocate_redraws
  (of-object "GtkContainer")
  (c-name "gtk_container_set_reallocate_redraws")
  (return-type "none")
  (parameters
    '("gboolean" "needs_redraws")
  )
)

(define-method set_focus_child
  (of-object "GtkContainer")
  (c-name "gtk_container_set_focus_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child" (null-ok))
  )
)

(define-method set_focus_vadjustment
  (of-object "GtkContainer")
  (c-name "gtk_container_set_focus_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method get_focus_vadjustment
  (of-object "GtkContainer")
  (c-name "gtk_container_get_focus_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_focus_hadjustment
  (of-object "GtkContainer")
  (c-name "gtk_container_set_focus_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method get_focus_hadjustment
  (of-object "GtkContainer")
  (c-name "gtk_container_get_focus_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method resize_children
  (of-object "GtkContainer")
  (c-name "gtk_container_resize_children")
  (return-type "none")
)

(define-method child_type
  (of-object "GtkContainer")
  (c-name "gtk_container_child_type")
  (return-type "GType")
)

(define-function container_class_install_child_property
  (c-name "gtk_container_class_install_child_property")
  (return-type "none")
  (parameters
    '("GtkContainerClass*" "cclass")
    '("guint" "property_id")
    '("GParamSpec*" "pspec")
  )
)

(define-function container_class_find_child_property
  (c-name "gtk_container_class_find_child_property")
  (return-type "GParamSpec*")
  (parameters
    '("GObjectClass*" "cclass")
    '("const-gchar*" "property_name")
  )
)

(define-function container_class_list_child_properties
  (c-name "gtk_container_class_list_child_properties")
  (return-type "GParamSpec**")
  (parameters
    '("GObjectClass*" "cclass")
    '("guint*" "n_properties")
  )
)

(define-method add_with_properties
  (of-object "GtkContainer")
  (c-name "gtk_container_add_with_properties")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "first_prop_name")
  )
  (varargs #t)
)

(define-method child_set
  (of-object "GtkContainer")
  (c-name "gtk_container_child_set")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "first_prop_name")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "GtkContainer")
  (c-name "gtk_container_child_get")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "first_prop_name")
  )
  (varargs #t)
)

(define-method child_set_valist
  (of-object "GtkContainer")
  (c-name "gtk_container_child_set_valist")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-method child_get_valist
  (of-object "GtkContainer")
  (c-name "gtk_container_child_get_valist")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-method child_set_property
  (of-object "GtkContainer")
  (c-name "gtk_container_child_set_property")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "GtkContainer")
  (c-name "gtk_container_child_get_property")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method forall
  (of-object "GtkContainer")
  (c-name "gtk_container_forall")
  (return-type "none")
  (parameters
    '("GtkCallback" "callback")
    '("gpointer" "callback_data")
  )
)

(define-virtual add
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)
(define-virtual remove
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)
(define-virtual check_resize
  (of-object "GtkContainer")
  (return-type "none")
)
(define-virtual forall
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("gboolean" "include_internals")
    '("GtkCallback" "callback")
    '("gpointer" "callback_data")
  )
)
(define-virtual set_focus_child
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget" (null-ok))
  )
)
(define-virtual child_type
  (of-object "GtkContainer")
  (return-type "GType")
)
(define-virtual composite_name
  (of-object "GtkContainer")
  (return-type "gchar*")
  (parameters
    '("GtkWidget*" "child")
  )
)
(define-virtual set_child_property
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("guint" "property_id")
    '("const-GValue*" "value")
    '("GParamSpec*" "pspec")
  )
)
(define-virtual get_child_property
  (of-object "GtkContainer")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("guint" "property_id")
    '("GValue*" "value")
    '("GParamSpec*" "pspec")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkctree.h

(define-function gtk_ctree_get_type
  (c-name "gtk_ctree_get_type")
  (return-type "GType")
)

(define-function gtk_ctree_new_with_titles
  (c-name "gtk_ctree_new_with_titles")
  (is-constructor-of "GtkCTree")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "columns" (default "1"))
    '("gint" "tree_column" (default "0"))
    '("gchar*[]" "titles")
  )
  (deprecated "use GtkTreeStore/GtkTreeView")
)

(define-function gtk_ctree_new
  (c-name "gtk_ctree_new")
  (is-constructor-of "GtkCTree")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "columns" (default "1"))
    '("gint" "tree_column" (default "0"))
  )
  (deprecated "use GtkTreeStore/GtkTreeView")
)

(define-method base_nodes
  (of-object "GtkCTree")
  (c-name "gtk_ctree_base_nodes")
  (return-type "GList*")
)

(define-method insert_node
  (of-object "GtkCTree")
  (c-name "gtk_ctree_insert_node")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeNode*" "parent")
    '("GtkCTreeNode*" "sibling")
    '("gchar*[]" "text")
    '("guint8" "spacing" (default "5"))
    '("GdkPixmap*" "pixmap_closed" (null-ok) (default "NULL"))
    '("GdkBitmap*" "mask_closed" (null-ok) (default "NULL"))
    '("GdkPixmap*" "pixmap_opened" (null-ok) (default "NULL"))
    '("GdkBitmap*" "mask_opened" (null-ok) (default "NULL"))
    '("gboolean" "is_leaf" (default "1"))
    '("gboolean" "expanded" (default "0"))
  )
)

(define-method remove_node
  (of-object "GtkCTree")
  (c-name "gtk_ctree_remove_node")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method insert_gnode
  (of-object "GtkCTree")
  (c-name "gtk_ctree_insert_gnode")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeNode*" "parent")
    '("GtkCTreeNode*" "sibling")
    '("GNode*" "gnode")
    '("GtkCTreeGNodeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method export_to_gnode
  (of-object "GtkCTree")
  (c-name "gtk_ctree_export_to_gnode")
  (return-type "GNode*")
  (parameters
    '("GNode*" "parent")
    '("GNode*" "sibling")
    '("GtkCTreeNode*" "node")
    '("GtkCTreeGNodeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method post_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_post_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method post_recursive_to_depth
  (of-object "GtkCTree")
  (c-name "gtk_ctree_post_recursive_to_depth")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "depth")
    '("GtkCTreeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method pre_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_pre_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method pre_recursive_to_depth
  (of-object "GtkCTree")
  (c-name "gtk_ctree_pre_recursive_to_depth")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "depth")
    '("GtkCTreeFunc" "func")
    '("gpointer" "data")
  )
)

(define-method is_viewable
  (of-object "GtkCTree")
  (c-name "gtk_ctree_is_viewable")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method last
  (of-object "GtkCTree")
  (c-name "gtk_ctree_last")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method find_node_ptr
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find_node_ptr")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeRow*" "ctree_row")
  )
)

(define-method node_nth
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_nth")
  (return-type "GtkCTreeNode*")
  (parameters
    '("guint" "row")
  )
)

(define-method find
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeNode*" "child")
  )
)

(define-method is_ancestor
  (of-object "GtkCTree")
  (c-name "gtk_ctree_is_ancestor")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeNode*" "child")
  )
)

(define-method find_by_row_data
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find_by_row_data")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
  )
)

(define-method find_all_by_row_data
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find_all_by_row_data")
  (return-type "GList*")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
  )
)

(define-method find_by_row_data_custom
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find_by_row_data_custom")
  (return-type "GtkCTreeNode*")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
    '("GCompareFunc" "func")
  )
)

(define-method find_all_by_row_data_custom
  (of-object "GtkCTree")
  (c-name "gtk_ctree_find_all_by_row_data_custom")
  (return-type "GList*")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
    '("GCompareFunc" "func")
  )
)

(define-method is_hot_spot
  (of-object "GtkCTree")
  (c-name "gtk_ctree_is_hot_spot")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method move
  (of-object "GtkCTree")
  (c-name "gtk_ctree_move")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeNode*" "new_parent" (null-ok))
    '("GtkCTreeNode*" "new_sibling" (null-ok))
  )
)

(define-method expand
  (of-object "GtkCTree")
  (c-name "gtk_ctree_expand")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method expand_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_expand_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method expand_to_depth
  (of-object "GtkCTree")
  (c-name "gtk_ctree_expand_to_depth")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "depth")
  )
)

(define-method collapse
  (of-object "GtkCTree")
  (c-name "gtk_ctree_collapse")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method collapse_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_collapse_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method collapse_to_depth
  (of-object "GtkCTree")
  (c-name "gtk_ctree_collapse_to_depth")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "depth")
  )
)

(define-method toggle_expansion
  (of-object "GtkCTree")
  (c-name "gtk_ctree_toggle_expansion")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method toggle_expansion_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_toggle_expansion_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method select
  (of-object "GtkCTree")
  (c-name "gtk_ctree_select")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method select_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_select_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method unselect
  (of-object "GtkCTree")
  (c-name "gtk_ctree_unselect")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method unselect_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_unselect_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method real_select_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_real_select_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "state")
  )
)

(define-method node_set_text
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_text")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("const-gchar*" "text")
  )
)

(define-method node_set_pixmap
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_pixmap")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-method node_set_pixtext
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_pixtext")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("const-gchar*" "text")
    '("guint8" "spacing")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-method set_node_info
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_node_info")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("const-gchar*" "text")
    '("guint8" "spacing")
    '("GdkPixmap*" "pixmap_closed" (null-ok))
    '("GdkBitmap*" "mask_closed" (null-ok))
    '("GdkPixmap*" "pixmap_opened" (null-ok))
    '("GdkBitmap*" "mask_opened" (null-ok))
    '("gboolean" "is_leaf")
    '("gboolean" "expanded")
  )
)

(define-method node_set_shift
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_shift")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("gint" "vertical")
    '("gint" "horizontal")
  )
)

(define-method node_set_selectable
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_selectable")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gboolean" "selectable")
  )
)

(define-method node_get_selectable
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_selectable")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method node_get_cell_type
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_cell_type")
  (return-type "GtkCellType")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
  )
)

(define-method node_get_text
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_text")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("gchar**" "text")
  )
)

(define-method node_get_pixmap
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_pixmap")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("GdkPixmap**" "pixmap")
    '("GdkBitmap**" "mask")
  )
)

(define-method node_get_pixtext
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_pixtext")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("gchar**" "text")
    '("guint8*" "spacing")
    '("GdkPixmap**" "pixmap")
    '("GdkBitmap**" "mask")
  )
)

(define-method get_node_info
  (of-object "GtkCTree")
  (c-name "gtk_ctree_get_node_info")
  (return-type "gboolean")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gchar**" "text")
    '("guint8*" "spacing")
    '("GdkPixmap**" "pixmap_closed")
    '("GdkBitmap**" "mask_closed")
    '("GdkPixmap**" "pixmap_opened")
    '("GdkBitmap**" "mask_opened")
    '("gboolean*" "is_leaf")
    '("gboolean*" "expanded")
  )
)

(define-method node_set_row_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_row_style")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkStyle*" "style")
  )
)

(define-method node_get_row_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_row_style")
  (return-type "GtkStyle*")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method node_set_cell_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_cell_style")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("GtkStyle*" "style")
  )
)

(define-method node_get_cell_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_cell_style")
  (return-type "GtkStyle*")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
  )
)

(define-method node_set_foreground
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_foreground")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GdkColor*" "color")
  )
)

(define-method node_set_background
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_background")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GdkColor*" "color")
  )
)

(define-method node_set_row_data
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_row_data")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
  )
)

(define-method node_set_row_data_full
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_set_row_data_full")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method node_get_row_data
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_get_row_data")
  (return-type "gpointer")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method node_moveto
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_moveto")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("gint" "column")
    '("gfloat" "row_align")
    '("gfloat" "col_align")
  )
)

(define-method node_is_visible
  (of-object "GtkCTree")
  (c-name "gtk_ctree_node_is_visible")
  (return-type "GtkVisibility")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method set_indent
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_indent")
  (return-type "none")
  (parameters
    '("gint" "indent")
  )
)

(define-method set_spacing
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_spacing")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
)

(define-method set_show_stub
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_show_stub")
  (return-type "none")
  (parameters
    '("gboolean" "show_stub")
  )
)

(define-method set_line_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_line_style")
  (return-type "none")
  (parameters
    '("GtkCTreeLineStyle" "line_style")
  )
)

(define-method set_expander_style
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_expander_style")
  (return-type "none")
  (parameters
    '("GtkCTreeExpanderStyle" "expander_style")
  )
)

(define-method set_drag_compare_func
  (of-object "GtkCTree")
  (c-name "gtk_ctree_set_drag_compare_func")
  (return-type "none")
  (parameters
    '("GtkCTreeCompareDragFunc" "cmp_func")
  )
)

(define-method sort_node
  (of-object "GtkCTree")
  (c-name "gtk_ctree_sort_node")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-method sort_recursive
  (of-object "GtkCTree")
  (c-name "gtk_ctree_sort_recursive")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-function gtk_ctree_node_get_type
  (c-name "gtk_ctree_node_get_type")
  (return-type "GType")
)

(define-virtual tree_select_row
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "row")
    '("gint" "column")
  )
)

(define-virtual tree_unselect_row
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "row")
    '("gint" "column")
  )
)

(define-virtual tree_expand
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-virtual tree_collapse
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
  )
)

(define-virtual tree_move
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeNode*" "node")
    '("GtkCTreeNode*" "new_parent")
    '("GtkCTreeNode*" "new_sibling")
  )
)

(define-virtual change_focus_row_expansion
  (of-object "GtkCTree")
  (return-type "none")
  (parameters
    '("GtkCTreeExpansionType" "action")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkcurve.h

(define-function gtk_curve_get_type
  (c-name "gtk_curve_get_type")
  (return-type "GType")
)

(define-function gtk_curve_new
  (c-name "gtk_curve_new")
  (is-constructor-of "GtkCurve")
  (return-type "GtkWidget*")
)

(define-method reset
  (of-object "GtkCurve")
  (c-name "gtk_curve_reset")
  (return-type "none")
)

(define-method set_gamma
  (of-object "GtkCurve")
  (c-name "gtk_curve_set_gamma")
  (return-type "none")
  (parameters
    '("gfloat" "gamma")
  )
)

(define-method set_range
  (of-object "GtkCurve")
  (c-name "gtk_curve_set_range")
  (return-type "none")
  (parameters
    '("gfloat" "min_x")
    '("gfloat" "max_x")
    '("gfloat" "min_y")
    '("gfloat" "max_y")
  )
)

(define-method get_vector
  (of-object "GtkCurve")
  (c-name "gtk_curve_get_vector")
  (return-type "none")
  (parameters
    '("int" "veclen")
    '("gfloat[]" "vector")
  )
)

(define-method set_vector
  (of-object "GtkCurve")
  (c-name "gtk_curve_set_vector")
  (return-type "none")
  (parameters
    '("int" "veclen")
    '("gfloat[]" "vector")
  )
)

(define-method set_curve_type
  (of-object "GtkCurve")
  (c-name "gtk_curve_set_curve_type")
  (return-type "none")
  (parameters
    '("GtkCurveType" "type")
  )
)

(define-virtual curve_type_changed
  (of-object "GtkCurve")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkdebug.h



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkdialog.h

(define-function gtk_dialog_get_type
  (c-name "gtk_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_dialog_new
  (c-name "gtk_dialog_new")
  (is-constructor-of "GtkDialog")
  (return-type "GtkWidget*")
)

(define-function gtk_dialog_new_with_buttons
  (c-name "gtk_dialog_new_with_buttons")
  (is-constructor-of "GtkDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title" (null-ok) (default "NULL"))
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
    '("GtkDialogFlags" "flags" (default "0"))
    '("const-gchar*" "first_button_text" (null-ok) (default "NULL"))
  )
  (varargs #t)
)

(define-method add_action_widget
  (of-object "GtkDialog")
  (c-name "gtk_dialog_add_action_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "response_id")
  )
)

(define-method add_button
  (of-object "GtkDialog")
  (c-name "gtk_dialog_add_button")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "button_text")
    '("gint" "response_id")
  )
)

(define-method add_buttons
  (of-object "GtkDialog")
  (c-name "gtk_dialog_add_buttons")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_button_text")
  )
  (varargs #t)
)

(define-method set_response_sensitive
  (of-object "GtkDialog")
  (c-name "gtk_dialog_set_response_sensitive")
  (return-type "none")
  (parameters
    '("gint" "response_id")
    '("gboolean" "setting")
  )
)

(define-method set_default_response
  (of-object "GtkDialog")
  (c-name "gtk_dialog_set_default_response")
  (return-type "none")
  (parameters
    '("gint" "response_id")
  )
)

(define-method get_response_for_widget
  (of-object "GtkDialog")
  (c-name "gtk_dialog_get_response_for_widget")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method set_has_separator
  (of-object "GtkDialog")
  (c-name "gtk_dialog_set_has_separator")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_has_separator
  (of-object "GtkDialog")
  (c-name "gtk_dialog_get_has_separator")
  (return-type "gboolean")
)

(define-method response
  (of-object "GtkDialog")
  (c-name "gtk_dialog_response")
  (return-type "none")
  (parameters
    '("gint" "response_id")
  )
)

(define-method run
  (of-object "GtkDialog")
  (c-name "gtk_dialog_run")
  (return-type "gint")
)

(define-method set_alternative_button_order
  (of-object "GtkDialog")
  (c-name "gtk_dialog_set_alternative_button_order")
  (return-type "none")
  (parameters
    '("gint" "first_response_id")
  )
  (varargs #t)
)

(define-method set_alternative_button_order_from_array
  (of-object "GtkDialog")
  (c-name "gtk_dialog_set_alternative_button_order_from_array")
  (return-type "none")
  (parameters
    '("gint" "n_params")
    '("gint*" "new_order")
  )
)

(define-function alternative_dialog_button_order
  (c-name "gtk_alternative_dialog_button_order")
  (return-type "gboolean")
  (parameters
    '("GdkScreen*" "screen" (null-ok) (default "NULL"))
  )
)

(define-virtual response
  (of-object "GtkDialog")
  (return-type "none")
  (parameters
    '("gint" "response_id")
  )
)

(define-virtual close
  (of-object "GtkDialog")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkdnd.h

(define-function drag_finish
  (c-name "gtk_drag_finish")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("gboolean" "success")
    '("gboolean" "del")
    '("guint32" "time_")
  )
)

(define-function drag_set_icon_widget
  (c-name "gtk_drag_set_icon_widget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GtkWidget*" "widget")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-function drag_set_icon_pixmap
  (c-name "gtk_drag_set_icon_pixmap")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-function drag_set_icon_pixbuf
  (c-name "gtk_drag_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkPixbuf*" "pixbuf")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-function drag_set_icon_stock
  (c-name "gtk_drag_set_icon_stock")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("const-gchar*" "stock_id")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-function drag_set_icon_name
  (c-name "gtk_drag_set_icon_name")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("const-gchar*" "icon_name")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-function drag_set_icon_default
  (c-name "gtk_drag_set_icon_default")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
  )
)

(define-method drag_check_threshold
  (of-object "GtkWidget")
  (c-name "gtk_drag_check_threshold")
  (return-type "gboolean")
  (parameters
    '("gint" "start_x")
    '("gint" "start_y")
    '("gint" "current_x")
    '("gint" "current_y")
  )
)

(define-method drag_get_data
  (of-object "GtkWidget")
  (c-name "gtk_drag_get_data")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkAtom" "target")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method drag_highlight
  (of-object "GtkWidget")
  (c-name "gtk_drag_highlight")
  (return-type "none")
)

(define-method drag_unhighlight
  (of-object "GtkWidget")
  (c-name "gtk_drag_unhighlight")
  (return-type "none")
)

(define-method drag_dest_set
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set")
  (return-type "none")
  (parameters
    '("GtkDestDefaults" "flags")
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method drag_dest_set_proxy
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set_proxy")
  (return-type "none")
  (parameters
    '("GdkWindow*" "proxy_window")
    '("GdkDragProtocol" "protocol")
    '("gboolean" "use_coordinates")
  )
)

(define-method drag_dest_unset
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_unset")
  (return-type "none")
)

(define-method drag_dest_find_target
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_find_target")
  (return-type "GdkAtom")
  (parameters
    '("GdkDragContext*" "context")
    '("GtkTargetList*" "target_list")
  )
)

(define-method drag_dest_get_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_get_target_list")
  (return-type "GtkTargetList*")
)

(define-method drag_dest_set_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set_target_list")
  (return-type "none")
  (parameters
    '("GtkTargetList*" "target_list")
  )
)

(define-method drag_source_set
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set")
  (return-type "none")
  (parameters
    '("GdkModifierType" "start_button_mask")
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method drag_source_unset
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_unset")
  (return-type "none")
)

(define-method drag_source_set_icon
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok) (default "NULL"))
  )
)

(define-method drag_source_set_icon_pixbuf
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method drag_source_set_icon_stock
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-method drag_source_set_icon_name
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-method drag_source_get_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_get_target_list")
  (return-type "GtkTargetList*")
)

(define-method drag_source_set_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_target_list")
  (return-type "none")
  (parameters
    '("GtkTargetList*" "target_list")
  )
)

(define-method drag_begin
  (of-object "GtkWidget")
  (c-name "gtk_drag_begin")
  (return-type "GdkDragContext*")
  (parameters
    '("GtkTargetList*" "targets")
    '("GdkDragAction" "actions")
    '("gint" "button")
    '("GdkEvent*" "event")
  )
)

(define-function drag_set_default_icon
  (c-name "gtk_drag_set_default_icon")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
  (deprecated "change the stock pixbuf for GTK_STOCK_DND")
)

(define-method drag_dest_add_text_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_add_text_targets")
  (return-type "none")
)

(define-method drag_dest_add_image_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_add_image_targets")
  (return-type "none")
)

(define-method drag_dest_add_uri_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_add_uri_targets")
  (return-type "none")
)

(define-method drag_source_add_text_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_add_text_targets")
  (return-type "none")
)

(define-method drag_source_add_image_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_add_image_targets")
  (return-type "none")
)

(define-method drag_source_add_uri_targets
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_add_uri_targets")
  (return-type "none")
)

(define-function target_list_add_text_targets
  (c-name "gtk_target_list_add_text_targets")
  (return-type "none")
  (parameters
    '("GtkTargetList*" "list")
    '("guint" "info")
  )
)

(define-function target_list_add_image_targets
  (c-name "gtk_target_list_add_image_targets")
  (return-type "none")
  (parameters
    '("GtkTargetList*" "list")
    '("guint" "info")
    '("gboolean" "writable")
  )
)

(define-function target_list_add_uri_targets
  (c-name "gtk_target_list_add_uri_targets")
  (return-type "none")
  (parameters
    '("GtkTargetList*" "list")
    '("guint" "info")
  )
)

(define-function drag_get_source_widget
  (c-name "gtk_drag_get_source_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GdkDragContext*" "context")
  )
)

(define-function drag_source_set_icon_name
  (c-name "gtk_drag_source_set_icon_name1")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "icon_name")
  )
  (deprecated "use GtkWidget.drag_source_set_icon_name")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkdrawingarea.h

(define-function gtk_drawing_area_get_type
  (c-name "gtk_drawing_area_get_type")
  (return-type "GType")
)

(define-function gtk_drawing_area_new
  (c-name "gtk_drawing_area_new")
  (is-constructor-of "GtkDrawingArea")
  (return-type "GtkWidget*")
)

(define-method size
  (of-object "GtkDrawingArea")
  (c-name "gtk_drawing_area_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "use GtkWidget.set_size_request")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkeditable.h

(define-function gtk_editable_get_type
  (c-name "gtk_editable_get_type")
  (return-type "GType")
)

(define-method select_region
  (of-object "GtkEditable")
  (c-name "gtk_editable_select_region")
  (return-type "none")
  (parameters
    '("gint" "start")
    '("gint" "end")
  )
)

(define-method get_selection_bounds
  (of-object "GtkEditable")
  (c-name "gtk_editable_get_selection_bounds")
  (return-type "gboolean")
  (parameters
    '("gint*" "start")
    '("gint*" "end")
  )
)

(define-method insert_text
  (of-object "GtkEditable")
  (c-name "gtk_editable_insert_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "new_text")
    '("gint" "new_text_length")
    '("gint*" "position" ("default" "0"))
  )
)

(define-method delete_text
  (of-object "GtkEditable")
  (c-name "gtk_editable_delete_text")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-method get_chars
  (of-object "GtkEditable")
  (c-name "gtk_editable_get_chars")
  (return-type "gchar*")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-method cut_clipboard
  (of-object "GtkEditable")
  (c-name "gtk_editable_cut_clipboard")
  (return-type "none")
)

(define-method copy_clipboard
  (of-object "GtkEditable")
  (c-name "gtk_editable_copy_clipboard")
  (return-type "none")
)

(define-method paste_clipboard
  (of-object "GtkEditable")
  (c-name "gtk_editable_paste_clipboard")
  (return-type "none")
)

(define-method delete_selection
  (of-object "GtkEditable")
  (c-name "gtk_editable_delete_selection")
  (return-type "none")
)

(define-method set_position
  (of-object "GtkEditable")
  (c-name "gtk_editable_set_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method get_position
  (of-object "GtkEditable")
  (c-name "gtk_editable_get_position")
  (return-type "gint")
)

(define-method set_editable
  (of-object "GtkEditable")
  (c-name "gtk_editable_set_editable")
  (return-type "none")
  (parameters
    '("gboolean" "is_editable")
  )
)

(define-method get_editable
  (of-object "GtkEditable")
  (c-name "gtk_editable_get_editable")
  (return-type "gboolean")
)

(define-virtual insert_text
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
    '("gint*" "position" (direction "inout"))
  )
)
(define-virtual delete_text
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)
(define-virtual changed
  (of-object "GtkEditable")
  (return-type "none")
)
(define-virtual do_insert_text
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
    '("gint*" "position" (direction "inout"))
  )
)
(define-virtual do_delete_text
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)
(define-virtual get_chars
  (of-object "GtkEditable")
  (return-type "gchar*")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)
(define-virtual set_selection_bounds
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)
(define-virtual get_selection_bounds
  (of-object "GtkEditable")
  (return-type "gboolean")
  (parameters
    '("gint*" "start_pos" (direction "out"))
    '("gint*" "end_pos" (direction "out"))
  )
)
(define-virtual set_position
  (of-object "GtkEditable")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)
(define-virtual get_position
  (of-object "GtkEditable")
  (return-type "gint")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkentry.h

(define-function gtk_entry_get_type
  (c-name "gtk_entry_get_type")
  (return-type "GType")
)

(define-function gtk_entry_new
  (c-name "gtk_entry_new")
  (is-constructor-of "GtkEntry")
  (return-type "GtkWidget*")
)

(define-function gtk_entry_new_with_max_length
  (c-name "gtk_entry_new_with_max_length")
  (is-constructor-of "GtkEntry")
  (return-type "GtkWidget*")
  (parameters
    '("guint16" "max" (default "0"))
  )
  (deprecated "use gtk.Entry() instead")
)

(define-method set_visibility
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_visibility")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_visibility
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_visibility")
  (return-type "gboolean")
)

(define-method set_invisible_char
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_invisible_char")
  (return-type "none")
  (parameters
    '("gunichar" "ch")
  )
)

(define-method get_invisible_char
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_invisible_char")
  (return-type "gunichar")
)

(define-method set_has_frame
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_has_frame")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_has_frame
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_has_frame")
  (return-type "gboolean")
)

(define-method set_max_length
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_max_length")
  (return-type "none")
  (parameters
    '("gint" "max")
  )
)

(define-method get_max_length
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_max_length")
  (return-type "gint")
)

(define-method set_activates_default
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_activates_default")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_activates_default
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_activates_default")
  (return-type "gboolean")
)

(define-method set_width_chars
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_width_chars")
  (return-type "none")
  (parameters
    '("gint" "n_chars")
  )
)

(define-method get_width_chars
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_width_chars")
  (return-type "gint")
)

(define-method set_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_text")
  (return-type "const-gchar*")
)

(define-method get_layout
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_layout")
  (return-type "PangoLayout*")
)

(define-method get_layout_offsets
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_layout_offsets")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set_alignment
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_alignment")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
  )
)

(define-method get_alignment
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_alignment")
  (return-type "gfloat")
)

(define-method set_completion
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_completion")
  (return-type "none")
  (parameters
    '("GtkEntryCompletion*" "completion" (null-ok))
  )
)

(define-method get_completion
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_completion")
  (return-type "GtkEntryCompletion*")
)

(define-method append_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_append_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
  (deprecated "use GtkEditable.insert_text")
)

(define-method prepend_text
  (of-object "GtkEntry")
  (c-name "gtk_entry_prepend_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
  (deprecated "use GtkEditable.insert_text")
)

(define-method set_position
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method select_region
  (of-object "GtkEntry")
  (c-name "gtk_entry_select_region")
  (return-type "none")
  (parameters
    '("gint" "start")
    '("gint" "end")
  )
)

(define-method set_editable
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_editable")
  (return-type "none")
  (parameters
    '("gboolean" "editable")
  )
)

(define-method layout_index_to_text_index
  (of-object "GtkEntry")
  (c-name "gtk_entry_layout_index_to_text_index")
  (return-type "gint")
  (parameters
    '("gint" "layout_index")
  )
)

(define-method text_index_to_layout_index
  (of-object "GtkEntry")
  (c-name "gtk_entry_text_index_to_layout_index")
  (return-type "gint")
  (parameters
    '("gint" "text_index")
  )
)

(define-virtual populate_popup
  (of-object "GtkEntry")
  (return-type "none")
  (parameters
    '("GtkMenu*" "menu")
  )
)

(define-virtual activate
  (of-object "GtkEntry")
  (return-type "none")
)

(define-virtual move_cursor
  (of-object "GtkEntry")
  (return-type "none")
  (parameters
    '("GtkMovementStep" "step")
    '("gint" "count")
    '("gboolean" "extend_selection")
  )
)

(define-virtual insert_at_cursor
  (of-object "GtkEntry")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-virtual delete_from_cursor
  (of-object "GtkEntry")
  (return-type "none")
  (parameters
    '("GtkDeleteType" "type")
    '("gint" "count")
  )
)

(define-virtual backspace
  (of-object "GtkEntry")
  (return-type "none")
)

(define-virtual cut_clipboard
  (of-object "GtkEntry")
  (return-type "none")
)

(define-virtual copy_clipboard
  (of-object "GtkEntry")
  (return-type "none")
)

(define-virtual paste_clipboard
  (of-object "GtkEntry")
  (return-type "none")
)

(define-virtual toggle_overwrite
  (of-object "GtkEntry")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkentrycompletion.h

(define-function gtk_entry_completion_get_type
  (c-name "gtk_entry_completion_get_type")
  (return-type "GType")
)

(define-function gtk_entry_completion_new
  (c-name "gtk_entry_completion_new")
  (is-constructor-of "GtkEntryCompletion")
  (return-type "GtkEntryCompletion*")
)

(define-method get_entry
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_entry")
  (return-type "GtkWidget*")
)

(define-method set_model
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "model" (null-ok) (default "NULL"))
  )
)

(define-method get_model
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_model")
  (return-type "GtkTreeModel*")
)

(define-method set_match_func
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_match_func")
  (return-type "none")
  (parameters
    '("GtkEntryCompletionMatchFunc" "func")
    '("gpointer" "func_data")
    '("GDestroyNotify" "func_notify")
  )
)

(define-method set_minimum_key_length
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_minimum_key_length")
  (return-type "none")
  (parameters
    '("gint" "length")
  )
)

(define-method get_minimum_key_length
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_minimum_key_length")
  (return-type "gint")
)

(define-method complete
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_complete")
  (return-type "none")
)

(define-method insert_action_text
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_insert_action_text")
  (return-type "none")
  (parameters
    '("gint" "index")
    '("const-gchar*" "text")
  )
)

(define-method insert_action_markup
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_insert_action_markup")
  (return-type "none")
  (parameters
    '("gint" "index")
    '("const-gchar*" "markup")
  )
)

(define-method delete_action
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_delete_action")
  (return-type "none")
  (parameters
    '("gint" "index")
  )
)

(define-method set_text_column
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_text_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_text_column
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_text_column")
  (return-type "gint")
)

(define-method insert_prefix
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_insert_prefix")
  (return-type "none")
)

(define-method set_inline_completion
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_inline_completion")
  (return-type "none")
  (parameters
    '("gboolean" "inline_completion")
  )
)

(define-method get_inline_completion
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_inline_completion")
  (return-type "gboolean")
)

(define-method set_popup_completion
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_popup_completion")
  (return-type "none")
  (parameters
    '("gboolean" "popup_completion")
  )
)

(define-method get_popup_completion
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_popup_completion")
  (return-type "gboolean")
)

(define-method set_popup_set_width
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_popup_set_width")
  (return-type "none")
  (parameters
    '("gboolean" "popup_set_width")
  )
)

(define-method get_popup_set_width
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_popup_set_width")
  (return-type "gboolean")
)

(define-method set_popup_single_match
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_popup_single_match")
  (return-type "none")
  (parameters
    '("gboolean" "popup_single_match")
  )
)

(define-method get_popup_single_match
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_popup_single_match")
  (return-type "gboolean")
)

(define-virtual match_selected
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "model")
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual action_activated
  (of-object "GtkEntryCompletion")
  (return-type "none")
  (parameters
    '("gint" "index_")
  )
)
(define-virtual insert_prefix
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "prefix")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkenums.h



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkeventbox.h

(define-function gtk_event_box_get_type
  (c-name "gtk_event_box_get_type")
  (return-type "GType")
)

(define-function gtk_event_box_new
  (c-name "gtk_event_box_new")
  (is-constructor-of "GtkEventBox")
  (return-type "GtkWidget*")
)

(define-method get_visible_window
  (of-object "GtkEventBox")
  (c-name "gtk_event_box_get_visible_window")
  (return-type "gboolean")
)

(define-method set_visible_window
  (of-object "GtkEventBox")
  (c-name "gtk_event_box_set_visible_window")
  (return-type "none")
  (parameters
    '("gboolean" "visible_window")
  )
)

(define-method get_above_child
  (of-object "GtkEventBox")
  (c-name "gtk_event_box_get_above_child")
  (return-type "gboolean")
)

(define-method set_above_child
  (of-object "GtkEventBox")
  (c-name "gtk_event_box_set_above_child")
  (return-type "none")
  (parameters
    '("gboolean" "above_child")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkexpander.h

(define-function gtk_expander_get_type
  (c-name "gtk_expander_get_type")
  (return-type "GType")
)

(define-function expander_new_with_mnemonic
  (c-name "gtk_expander_new_with_mnemonic")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label" (null-ok) (default "NULL"))
  )
  (caller-owns-return #t)
)

(define-method set_expanded
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_expanded")
  (return-type "none")
  (parameters
    '("gboolean" "expanded")
  )
)

(define-method get_expanded
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_expanded")
  (return-type "gboolean")
)

(define-method set_spacing
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_spacing")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
)

(define-method get_spacing
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_spacing")
  (return-type "gint")
)

(define-method set_label
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label" (null-ok))
  )
)

(define-method get_label
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_label")
  (return-type "const-gchar*")
)

(define-method set_use_underline
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_use_underline")
  (return-type "none")
  (parameters
    '("gboolean" "use_underline")
  )
)

(define-method get_use_underline
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_use_underline")
  (return-type "gboolean")
)

(define-method set_use_markup
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_use_markup")
  (return-type "none")
  (parameters
    '("gboolean" "use_markup")
  )
)

(define-method get_use_markup
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_use_markup")
  (return-type "gboolean")
)

(define-method set_label_widget
  (of-object "GtkExpander")
  (c-name "gtk_expander_set_label_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "label_widget" (null-ok))
  )
)

(define-method get_label_widget
  (of-object "GtkExpander")
  (c-name "gtk_expander_get_label_widget")
  (return-type "GtkWidget*")
)

(define-virtual activate
  (of-object "GtkExpander")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilechooser.h

(define-function gtk_file_chooser_get_type
  (c-name "gtk_file_chooser_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_error_quark
  (c-name "gtk_file_chooser_error_quark")
  (return-type "GQuark")
)

(define-method set_action
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_action")
  (return-type "none")
  (parameters
    '("GtkFileChooserAction" "action")
  )
)

(define-method get_action
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_action")
  (return-type "GtkFileChooserAction")
)

(define-method set_local_only
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_local_only")
  (return-type "none")
  (parameters
    '("gboolean" "local_only")
  )
)

(define-method get_local_only
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_local_only")
  (return-type "gboolean")
)

(define-method set_select_multiple
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_select_multiple")
  (return-type "none")
  (parameters
    '("gboolean" "select_multiple")
  )
)

(define-method get_select_multiple
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_select_multiple")
  (return-type "gboolean")
)

(define-method set_show_hidden
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_show_hidden")
  (return-type "none")
  (parameters
    '("gboolean" "show_hidden")
  )
)

(define-method get_show_hidden
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_show_hidden")
  (return-type "gboolean")
)

(define-method set_do_overwrite_confirmation
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_do_overwrite_confirmation")
  (return-type "none")
  (parameters
    '("gboolean" "do_overwrite_confirmation")
  )
)

(define-method get_do_overwrite_confirmation
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_do_overwrite_confirmation")
  (return-type "gboolean")
)

(define-method set_current_name
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_current_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_filename
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_filename")
  (return-type "gchar*")
)

(define-method set_filename
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_filename")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
  )
)

(define-method select_filename
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_select_filename")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
  )
)

(define-method unselect_filename
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_unselect_filename")
  (return-type "none")
  (parameters
    '("const-char*" "filename")
  )
)

(define-method select_all
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_select_all")
  (return-type "none")
)

(define-method unselect_all
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_unselect_all")
  (return-type "none")
)

(define-method get_filenames
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_filenames")
  (return-type "GSList*")
)

(define-method set_current_folder
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_current_folder")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method get_current_folder
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_current_folder")
  (return-type "gchar*")
)

(define-method get_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_uri")
  (return-type "gchar*")
)

(define-method set_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
  )
)

(define-method select_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_select_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
  )
)

(define-method unselect_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_unselect_uri")
  (return-type "none")
  (parameters
    '("const-char*" "uri")
  )
)

(define-method get_uris
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_uris")
  (return-type "GSList*")
)

(define-method set_current_folder_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_current_folder_uri")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method get_current_folder_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_current_folder_uri")
  (return-type "gchar*")
)

(define-method set_preview_widget
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_preview_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "preview_widget")
  )
)

(define-method get_preview_widget
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_preview_widget")
  (return-type "GtkWidget*")
)

(define-method set_preview_widget_active
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_preview_widget_active")
  (return-type "none")
  (parameters
    '("gboolean" "active")
  )
)

(define-method get_preview_widget_active
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_preview_widget_active")
  (return-type "gboolean")
)

(define-method set_use_preview_label
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_use_preview_label")
  (return-type "none")
  (parameters
    '("gboolean" "use_label")
  )
)

(define-method get_use_preview_label
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_use_preview_label")
  (return-type "gboolean")
)

(define-method get_preview_filename
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_preview_filename")
  (return-type "char*")
)

(define-method get_preview_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_preview_uri")
  (return-type "char*")
)

(define-method set_extra_widget
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_extra_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "extra_widget")
  )
)

(define-method get_extra_widget
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_extra_widget")
  (return-type "GtkWidget*")
)

(define-method add_filter
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_add_filter")
  (return-type "none")
  (parameters
    '("GtkFileFilter*" "filter")
  )
)

(define-method remove_filter
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_remove_filter")
  (return-type "none")
  (parameters
    '("GtkFileFilter*" "filter")
  )
)

(define-method list_filters
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_list_filters")
  (return-type "GSList*")
)

(define-method set_filter
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_set_filter")
  (return-type "none")
  (parameters
    '("GtkFileFilter*" "filter")
  )
)

(define-method get_filter
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_filter")
  (return-type "GtkFileFilter*")
)

(define-method add_shortcut_folder
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_add_shortcut_folder")
  (return-type "gboolean")
  (parameters
    '("const-char*" "folder")
    '("GError**" "error")
  )
)

(define-method remove_shortcut_folder
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_remove_shortcut_folder")
  (return-type "gboolean")
  (parameters
    '("const-char*" "folder")
    '("GError**" "error")
  )
)

(define-method list_shortcut_folders
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_list_shortcut_folders")
  (return-type "GSList*")
)

(define-method add_shortcut_folder_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_add_shortcut_folder_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
    '("GError**" "error")
  )
)

(define-method remove_shortcut_folder_uri
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_remove_shortcut_folder_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
    '("GError**" "error")
  )
)

(define-method list_shortcut_folder_uris
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_list_shortcut_folder_uris")
  (return-type "GSList*")
)



;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkfilechooserbutton.h

(define-function gtk_file_chooser_button_get_type
  (c-name "gtk_file_chooser_button_get_type")
  (return-type "GType")
)

(define-function file_chooser_button_new
  (c-name "gtk_file_chooser_button_new")
  (is-constructor-of "GtkFileChooserButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-function file_chooser_button_new_with_backend
  (c-name "gtk_file_chooser_button_new_with_backend")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
    '("const-gchar*" "backend")
  )
  (caller-owns-return #t)
)

(define-function file_chooser_button_new_with_dialog
  (c-name "gtk_file_chooser_button_new_with_dialog")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWidget*" "dialog")
  )
  (caller-owns-return #t)
)

(define-method get_title
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_get_title")
  (return-type "const-gchar*")
)

(define-method set_title
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_width_chars
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_get_width_chars")
  (return-type "gint")
)

(define-method set_width_chars
  (of-object "GtkFileChooserButton")
  (c-name "gtk_file_chooser_button_set_width_chars")
  (return-type "none")
  (parameters
    '("gint" "n_chars")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilechooserdialog.h

(define-function gtk_file_chooser_dialog_get_type
  (c-name "gtk_file_chooser_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_dialog_new
  (c-name "gtk_file_chooser_dialog_new")
  (is-constructor-of "GtkFileChooserDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
    '("GtkWindow*" "parent")
    '("GtkFileChooserAction" "action")
    '("const-gchar*" "first_button_text")
  )
  (varargs #t)
)

(define-function file_chooser_dialog_new_with_backend
  (c-name "gtk_file_chooser_dialog_new_with_backend")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title")
    '("GtkWindow*" "parent")
    '("GtkFileChooserAction" "action")
    '("const-gchar*" "backend")
    '("const-gchar*" "first_button_text")
  )
  (varargs #t)
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilechooserwidget.h

(define-function gtk_file_chooser_widget_get_type
  (c-name "gtk_file_chooser_widget_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_widget_new
  (c-name "gtk_file_chooser_widget_new")
  (is-constructor-of "GtkFileChooserWidget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkFileChooserAction" "action")
  )
)

(define-function file_chooser_widget_new_with_backend
  (c-name "gtk_file_chooser_widget_new_with_backend")
  (return-type "GtkWidget*")
  (parameters
    '("GtkFileChooserAction" "action")
    '("const-gchar*" "backend")
  )
  (caller-owns-return #t)
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilefilter.h

(define-function gtk_file_filter_get_type
  (c-name "gtk_file_filter_get_type")
  (return-type "GType")
)

(define-function gtk_file_filter_new
  (c-name "gtk_file_filter_new")
  (is-constructor-of "GtkFileFilter")
  (return-type "GtkFileFilter*")
)

(define-method set_name
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_get_name")
  (return-type "const-gchar*")
)

(define-method add_mime_type
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_add_mime_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-method add_pattern
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_add_pattern")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
)

(define-method add_pixbuf_formats
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_add_pixbuf_formats")
  (return-type "none")
)

(define-method add_custom
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_add_custom")
  (return-type "none")
  (parameters
    '("GtkFileFilterFlags" "needed")
    '("GtkFileFilterFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method get_needed
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_get_needed")
  (return-type "GtkFileFilterFlags")
)

(define-method filter
  (of-object "GtkFileFilter")
  (c-name "gtk_file_filter_filter")
  (return-type "gboolean")
  (parameters
    '("const-GtkFileFilterInfo*" "filter_info")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilesel.h

(define-function gtk_file_selection_get_type
  (c-name "gtk_file_selection_get_type")
  (return-type "GType")
)


(define-method set_filename
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
  (deprecated "use gtk.FileChooserDialog")
)

(define-method get_filename
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_get_filename")
  (return-type "const-gchar*")
  (deprecated "use gtk.FileChooserDialog")
)

(define-method complete
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_complete")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
  (deprecated "use gtk.FileChooserDialog")
)

(define-method show_fileop_buttons
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_show_fileop_buttons")
  (return-type "none")
  (deprecated "use gtk.FileChooserDialog")
)

(define-method hide_fileop_buttons
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_hide_fileop_buttons")
  (return-type "none")
  (deprecated "use gtk.FileChooserDialog")
)

(define-method get_selections
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_get_selections")
  (return-type "gchar**")
  (deprecated "use gtk.FileChooserDialog")
)

(define-method set_select_multiple
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_set_select_multiple")
  (return-type "none")
  (parameters
    '("gboolean" "select_multiple")
  )
  (deprecated "use gtk.FileChooserDialog")
)

(define-method get_select_multiple
  (of-object "GtkFileSelection")
  (c-name "gtk_file_selection_get_select_multiple")
  (return-type "gboolean")
  (deprecated "use gtk.FileChooserDialog")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfilesystem.h

(define-function file_system_error_quark
  (c-name "gtk_file_system_error_quark")
  (return-type "GQuark")
)

(define-function gtk_file_info_get_type
  (c-name "gtk_file_info_get_type")
  (return-type "GType")
)

(define-function gtk_file_info_new
  (c-name "gtk_file_info_new")
  (is-constructor-of "GtkFileInfo")
  (return-type "GtkFileInfo*")
)

(define-method copy
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_copy")
  (return-type "GtkFileInfo*")
)

(define-method free
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_free")
  (return-type "none")
)

(define-method get_display_name
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_display_name")
  (return-type "const-gchar*")
)

(define-method get_display_key
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_display_key")
  (return-type "const-gchar*")
)

(define-method set_display_name
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_display_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "display_name")
  )
)

(define-method get_is_folder
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_is_folder")
  (return-type "gboolean")
)

(define-method set_is_folder
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_is_folder")
  (return-type "none")
  (parameters
    '("gboolean" "is_folder")
  )
)

(define-method get_is_hidden
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_is_hidden")
  (return-type "gboolean")
)

(define-method set_is_hidden
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_is_hidden")
  (return-type "none")
  (parameters
    '("gboolean" "is_hidden")
  )
)

(define-method get_mime_type
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_mime_type")
  (return-type "const-gchar*")
)

(define-method set_mime_type
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_mime_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-method get_modification_time
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_modification_time")
  (return-type "GtkFileTime")
)

(define-method set_modification_time
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_modification_time")
  (return-type "none")
  (parameters
    '("GtkFileTime" "modification_time")
  )
)

(define-method get_size
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_size")
  (return-type "gint64")
)

(define-method set_size
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_size")
  (return-type "none")
  (parameters
    '("gint64" "size")
  )
)

(define-function gtk_file_system_get_type
  (c-name "gtk_file_system_get_type")
  (return-type "GType")
)

(define-method list_volumes
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_list_volumes")
  (return-type "GSList*")
)

(define-method get_volume_for_path
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_get_volume_for_path")
  (return-type "GtkFileSystemVolume*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-method volume_free
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_free")
  (return-type "none")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-method volume_get_base_path
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_get_base_path")
  (return-type "GtkFilePath*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-method volume_get_is_mounted
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_get_is_mounted")
  (return-type "gboolean")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-method volume_mount
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_mount")
  (return-type "gboolean")
  (parameters
    '("GtkFileSystemVolume*" "volume")
    '("GError**" "error")
  )
)

(define-method volume_get_display_name
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_get_display_name")
  (return-type "char*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-method volume_render_icon
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_render_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
    '("GtkWidget*" "widget")
    '("gint" "pixel_size")
    '("GError**" "error")
  )
)

(define-method get_parent
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_get_parent")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFilePath**" "parent")
    '("GError**" "error")
  )
)

(define-method get_folder
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_get_folder")
  (return-type "GtkFileFolder*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFileInfoType" "types")
    '("GError**" "error")
  )
)

(define-method create_folder
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_create_folder")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)

(define-method make_path
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_make_path")
  (return-type "GtkFilePath*")
  (parameters
    '("const-GtkFilePath*" "base_path")
    '("const-gchar*" "display_name")
    '("GError**" "error")
  )
)

(define-method parse
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_parse")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "base_path")
    '("const-gchar*" "str")
    '("GtkFilePath**" "folder")
    '("gchar**" "file_part")
    '("GError**" "error")
  )
)

(define-method path_to_uri
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_path_to_uri")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-method path_to_filename
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_path_to_filename")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-method uri_to_path
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_uri_to_path")
  (return-type "GtkFilePath*")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method filename_to_path
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_filename_to_path")
  (return-type "GtkFilePath*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method render_icon
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_render_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkWidget*" "widget")
    '("gint" "pixel_size")
    '("GError**" "error")
  )
)

(define-method insert_bookmark
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_insert_bookmark")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("gint" "position")
    '("GError**" "error")
  )
)

(define-method remove_bookmark
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_remove_bookmark")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)

(define-method list_bookmarks
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_list_bookmarks")
  (return-type "GSList*")
)

(define-virtual list_volumes
  (of-object "GtkFileSystem")
  (return-type "GSList*")
)

(define-virtual get_volume_for_path
  (of-object "GtkFileSystem")
  (return-type "GtkFileSystemVolume*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-virtual get_folder
  (of-object "GtkFileSystem")
  (return-type "GtkFileSystemHandle*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFileInfoType" "types")
    '("GtkFileSystemGetFolderCallback" "callback")
    '("gpointer" "data")
  )
)

(define-virtual create_folder
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)
(define-virtual volume_free
  (of-object "GtkFileSystem")
  (return-type "none")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)
(define-virtual volume_get_base_path
  (of-object "GtkFileSystem")
  (return-type "GtkFilePath*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-virtual volume_get_is_mounted
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)
(define-virtual volume_mount
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("GtkFileSystemVolume*" "volume")
    '("GError**" "error")
  )
)
(define-virtual volume_get_display_name
  (of-object "GtkFileSystem")
  (return-type "char*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
  )
)

(define-virtual volume_get_icon_name
  (of-object "GtkFileSystem")
  (return-type "gchar*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
    '("GError**" "error")
  )
)

(define-virtual get_parent
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFilePath**" "parent")
    '("GError**" "error")
  )
)
(define-virtual make_path
  (of-object "GtkFileSystem")
  (return-type "GtkFilePath*")
  (parameters
    '("const-GtkFilePath*" "base_path")
    '("const-gchar*" "display_name")
    '("GError**" "error")
  )
)

(define-virtual parse
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "base_path")
    '("const-gchar*" "str")
    '("GtkFilePath**" "folder")
    '("gchar**" "file_part")
    '("GError**" "error")
  )
)
(define-virtual path_to_uri
  (of-object "GtkFileSystem")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-virtual path_to_filename
  (of-object "GtkFileSystem")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-virtual uri_to_path
  (of-object "GtkFileSystem")
  (return-type "GtkFilePath*")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-virtual filename_to_path
  (of-object "GtkFileSystem")
  (return-type "GtkFilePath*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-virtual insert_bookmark
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("gint" "position")
    '("GError**" "error")
  )
)
(define-virtual remove_bookmark
  (of-object "GtkFileSystem")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)
(define-virtual list_bookmarks
  (of-object "GtkFileSystem")
  (return-type "GSList*")
)

(define-virtual volumes_changed
  (of-object "GtkFileSystem")
  (return-type "none")
)
(define-virtual bookmarks_changed
  (of-object "GtkFileSystem")
  (return-type "none")
)

(define-virtual get_bookmark_label
  (of-object "GtkFileSystem")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-virtual set_bookmark_label
  (of-object "GtkFileSystem")
  (return-type "none")
  (parameters
    '("const-GtkFilePath*" "path")
    '("const-gchar*" "label")
  )
)


(define-function gtk_file_folder_get_type
  (c-name "gtk_file_folder_get_type")
  (return-type "GType")
)

(define-method list_children
  (of-object "GtkFileFolder")
  (c-name "gtk_file_folder_list_children")
  (return-type "gboolean")
  (parameters
    '("GSList**" "children")
    '("GError**" "error")
  )
)

(define-method get_info
  (of-object "GtkFileFolder")
  (c-name "gtk_file_folder_get_info")
  (return-type "GtkFileInfo*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)

(define-function file_paths_sort
  (c-name "gtk_file_paths_sort")
  (return-type "GSList*")
  (parameters
    '("GSList*" "paths")
  )
)

(define-function file_paths_copy
  (c-name "gtk_file_paths_copy")
  (return-type "GSList*")
  (parameters
    '("GSList*" "paths")
  )
)

(define-function file_paths_free
  (c-name "gtk_file_paths_free")
  (return-type "none")
  (parameters
    '("GSList*" "paths")
  )
)

(define-virtual get_info
  (of-object "GtkFileFolder")
  (return-type "GtkFileInfo*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GError**" "error")
  )
)

(define-virtual list_children
  (of-object "GtkFileFolder")
  (return-type "gboolean")
  (parameters
    '("GSList**" "children")
    '("GError**" "error")
  )
)
(define-virtual deleted
  (of-object "GtkFileFolder")
  (return-type "none")
)
(define-virtual files_added
  (of-object "GtkFileFolder")
  (return-type "none")
  (parameters
    '("GSList*" "paths")
  )
)
(define-virtual files_changed
  (of-object "GtkFileFolder")
  (return-type "none")
  (parameters
    '("GSList*" "paths")
  )
)
(define-virtual files_removed
  (of-object "GtkFileFolder")
  (return-type "none")
  (parameters
    '("GSList*" "paths")
  )
)
(define-virtual is_finished_loading
  (of-object "GtkFileFolder")
  (return-type "gboolean")
)
(define-virtual finished_loading
  (of-object "GtkFileFolder")
  (return-type "none")
)

(define-method set_icon_name
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "con_name")
  )
)

(define-method get_icon_name
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_get_icon_name")
  (return-type "const-gchar*")
)

(define-method render_icon
  (of-object "GtkFileInfo")
  (c-name "gtk_file_info_render_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkWidget*" "widget")
    '("gint" "pixel_size")
    '("GError**" "error")
  )
)

(define-function file_system_handle_get_type
  (c-name "gtk_file_system_handle_get_type")
  (return-type "GType")
)

(define-method volume_get_icon_name
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_volume_get_icon_name")
  (return-type "gchar*")
  (parameters
    '("GtkFileSystemVolume*" "volume")
    '("GError**" "error")
  )
)

(define-method get_info
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_get_info")
  (return-type "GtkFileSystemHandle*")
  (parameters
    '("const-GtkFilePath*" "path")
    '("GtkFileInfoType" "types")
    '("GtkFileSystemGetInfoCallback" "callback")
    '("gpointer" "data")
  )
)

(define-function file_system_cancel_operation
  (c-name "gtk_file_system_cancel_operation")
  (return-type "none")
  (parameters
    '("GtkFileSystemHandle*" "handle")
  )
)

(define-method path_is_local
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_path_is_local")
  (return-type "gboolean")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-method get_bookmark_label
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_get_bookmark_label")
  (return-type "gchar*")
  (parameters
    '("const-GtkFilePath*" "path")
  )
)

(define-method set_bookmark_label
  (of-object "GtkFileSystem")
  (c-name "gtk_file_system_set_bookmark_label")
  (return-type "none")
  (parameters
    '("const-GtkFilePath*" "path")
    '("const-gchar*" "label")
  )
)

(define-method is_finished_loading
  (of-object "GtkFileFolder")
  (c-name "gtk_file_folder_is_finished_loading")
  (return-type "gboolean")
)

(define-function file_path_get_type
  (c-name "gtk_file_path_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfixed.h

(define-function gtk_fixed_get_type
  (c-name "gtk_fixed_get_type")
  (return-type "GType")
)

(define-function gtk_fixed_new
  (c-name "gtk_fixed_new")
  (is-constructor-of "GtkFixed")
  (return-type "GtkWidget*")
)

(define-method put
  (of-object "GtkFixed")
  (c-name "gtk_fixed_put")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method move
  (of-object "GtkFixed")
  (c-name "gtk_fixed_move")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_has_window
  (of-object "GtkFixed")
  (c-name "gtk_fixed_set_has_window")
  (return-type "none")
  (parameters
    '("gboolean" "has_window")
  )
)

(define-method get_has_window
  (of-object "GtkFixed")
  (c-name "gtk_fixed_get_has_window")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfontbutton.h

(define-function gtk_font_button_get_type
  (c-name "gtk_font_button_get_type")
  (return-type "GType")
)

(define-function gtk_font_button_new
  (c-name "gtk_font_button_new")
  (is-constructor-of "GtkFontButton")
  (return-type "GtkWidget*")
)

(define-function gtk_font_button_new_with_font
  (c-name "gtk_font_button_new_with_font")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "fontname")
  )
  (caller-owns-return #t)
)

(define-method get_title
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_title")
  (return-type "const-gchar*")
)

(define-method set_title
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_use_font
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_use_font")
  (return-type "gboolean")
)

(define-method set_use_font
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_use_font")
  (return-type "none")
  (parameters
    '("gboolean" "use_font")
  )
)

(define-method get_use_size
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_use_size")
  (return-type "gboolean")
)

(define-method set_use_size
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_use_size")
  (return-type "none")
  (parameters
    '("gboolean" "use_size")
  )
)

(define-method get_font_name
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_font_name")
  (return-type "const-gchar*")
)

(define-method set_font_name
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_font_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "fontname")
  )
)

(define-method get_show_style
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_show_style")
  (return-type "gboolean")
)

(define-method set_show_style
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_show_style")
  (return-type "none")
  (parameters
    '("gboolean" "show_style")
  )
)

(define-method get_show_size
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_get_show_size")
  (return-type "gboolean")
)

(define-method set_show_size
  (of-object "GtkFontButton")
  (c-name "gtk_font_button_set_show_size")
  (return-type "none")
  (parameters
    '("gboolean" "show_size")
  )
)

(define-virtual font_set
  (of-object "GtkFontButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkfontsel.h

(define-function gtk_font_selection_get_type
  (c-name "gtk_font_selection_get_type")
  (return-type "GType")
)

(define-function gtk_font_selection_new
  (c-name "gtk_font_selection_new")
  (is-constructor-of "GtkFontSelection")
  (return-type "GtkWidget*")
)

(define-method get_font_name
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_font_name")
  (return-type "gchar*")
)

(define-method get_font
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_font")
  (return-type "GdkFont*")
  (deprecated "use GtkFontSelection.get_font_name")
)

(define-method set_font_name
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_set_font_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "fontname")
  )
)

(define-method get_preview_text
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_get_preview_text")
  (return-type "const-gchar*")
)

(define-method set_preview_text
  (of-object "GtkFontSelection")
  (c-name "gtk_font_selection_set_preview_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-function gtk_font_selection_dialog_get_type
  (c-name "gtk_font_selection_dialog_get_type")
  (return-type "GType")
)


(define-method get_font_name
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_font_name")
  (return-type "gchar*")
)

(define-method get_font
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_font")
  (return-type "GdkFont*")
  (deprecated "use GtkFontSelectionDialog.get_font_name")
)

(define-method set_font_name
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_set_font_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "fontname")
  )
)

(define-method get_preview_text
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_get_preview_text")
  (return-type "const-gchar*")
)

(define-method set_preview_text
  (of-object "GtkFontSelectionDialog")
  (c-name "gtk_font_selection_dialog_set_preview_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkframe.h

(define-function gtk_frame_get_type
  (c-name "gtk_frame_get_type")
  (return-type "GType")
)

(define-method set_label
  (of-object "GtkFrame")
  (c-name "gtk_frame_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label" (null-ok))
  )
)

(define-method get_label
  (of-object "GtkFrame")
  (c-name "gtk_frame_get_label")
  (return-type "const-gchar*")
)

(define-method set_label_widget
  (of-object "GtkFrame")
  (c-name "gtk_frame_set_label_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "label_widget")
  )
)

(define-method get_label_widget
  (of-object "GtkFrame")
  (c-name "gtk_frame_get_label_widget")
  (return-type "GtkWidget*")
)

(define-method set_label_align
  (of-object "GtkFrame")
  (c-name "gtk_frame_set_label_align")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
    '("gfloat" "yalign")
  )
)

(define-method get_label_align
  (of-object "GtkFrame")
  (c-name "gtk_frame_get_label_align")
  (return-type "none")
  (parameters
    '("gfloat*" "xalign")
    '("gfloat*" "yalign")
  )
)

(define-method set_shadow_type
  (of-object "GtkFrame")
  (c-name "gtk_frame_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "type")
  )
)

(define-method get_shadow_type
  (of-object "GtkFrame")
  (c-name "gtk_frame_get_shadow_type")
  (return-type "GtkShadowType")
)

(define-virtual compute_child_allocation
  (of-object "GtkFrame")
  (return-type "none")
  (parameters
    '("GtkAllocation*" "allocation")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkgamma.h

(define-function gtk_gamma_curve_get_type
  (c-name "gtk_gamma_curve_get_type")
  (return-type "GType")
)

(define-function gtk_gamma_curve_new
  (c-name "gtk_gamma_curve_new")
  (is-constructor-of "GtkGammaCurve")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkgc.h

(define-function gc_get
  (c-name "gtk_gc_get")
  (return-type "GdkGC*")
  (parameters
    '("gint" "depth")
    '("GdkColormap*" "colormap")
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "values_mask")
  )
)

(define-function gc_release
  (c-name "gtk_gc_release")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhandlebox.h

(define-function gtk_handle_box_get_type
  (c-name "gtk_handle_box_get_type")
  (return-type "GType")
)

(define-function gtk_handle_box_new
  (c-name "gtk_handle_box_new")
  (is-constructor-of "GtkHandleBox")
  (return-type "GtkWidget*")
)

(define-method set_shadow_type
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "type")
  )
)

(define-method get_shadow_type
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_get_shadow_type")
  (return-type "GtkShadowType")
)

(define-method set_handle_position
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_set_handle_position")
  (return-type "none")
  (parameters
    '("GtkPositionType" "position")
  )
)

(define-method get_handle_position
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_get_handle_position")
  (return-type "GtkPositionType")
)

(define-method set_snap_edge
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_set_snap_edge")
  (return-type "none")
  (parameters
    '("GtkPositionType" "edge")
  )
)

(define-method get_snap_edge
  (of-object "GtkHandleBox")
  (c-name "gtk_handle_box_get_snap_edge")
  (return-type "GtkPositionType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhbbox.h

(define-function gtk_hbutton_box_get_type
  (c-name "gtk_hbutton_box_get_type")
  (return-type "GType")
)

(define-function gtk_hbutton_box_new
  (c-name "gtk_hbutton_box_new")
  (is-constructor-of "GtkHButtonBox")
  (return-type "GtkWidget*")
)

(define-function hbutton_box_get_spacing_default
  (c-name "gtk_hbutton_box_get_spacing_default")
  (return-type "gint")
  (deprecated "")
)

(define-function hbutton_box_get_layout_default
  (c-name "gtk_hbutton_box_get_layout_default")
  (return-type "GtkButtonBoxStyle")
  (deprecated "")
)

(define-function hbutton_box_set_spacing_default
  (c-name "gtk_hbutton_box_set_spacing_default")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
  (deprecated "")
)

(define-function hbutton_box_set_layout_default
  (c-name "gtk_hbutton_box_set_layout_default")
  (return-type "none")
  (parameters
    '("GtkButtonBoxStyle" "layout")
  )
  (deprecated "")
)

(define-virtual child_attached
  (of-object "GtkHandleBox")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)
(define-virtual child_detached
  (of-object "GtkHandleBox")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhbox.h

(define-function gtk_hbox_get_type
  (c-name "gtk_hbox_get_type")
  (return-type "GType")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhpaned.h

(define-function gtk_hpaned_get_type
  (c-name "gtk_hpaned_get_type")
  (return-type "GType")
)

(define-function gtk_hpaned_new
  (c-name "gtk_hpaned_new")
  (is-constructor-of "GtkHPaned")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhruler.h

(define-function gtk_hruler_get_type
  (c-name "gtk_hruler_get_type")
  (return-type "GType")
)

(define-function gtk_hruler_new
  (c-name "gtk_hruler_new")
  (is-constructor-of "GtkHRuler")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhscale.h

(define-function gtk_hscale_get_type
  (c-name "gtk_hscale_get_type")
  (return-type "GType")
)

(define-function gtk_hscale_new_with_range
  (c-name "gtk_hscale_new_with_range")
  (is-constructor-of "GtkHScale")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhscrollbar.h

(define-function gtk_hscrollbar_get_type
  (c-name "gtk_hscrollbar_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkhseparator.h

(define-function gtk_hseparator_get_type
  (c-name "gtk_hseparator_get_type")
  (return-type "GType")
)

(define-function gtk_hseparator_new
  (c-name "gtk_hseparator_new")
  (is-constructor-of "GtkHSeparator")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkiconfactory.h

(define-function gtk_icon_factory_get_type
  (c-name "gtk_icon_factory_get_type")
  (return-type "GType")
)

(define-function gtk_icon_factory_new
  (c-name "gtk_icon_factory_new")
  (is-constructor-of "GtkIconFactory")
  (return-type "GtkIconFactory*")
)

(define-method add
  (of-object "GtkIconFactory")
  (c-name "gtk_icon_factory_add")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkIconSet*" "icon_set")
  )
)

(define-method lookup
  (of-object "GtkIconFactory")
  (c-name "gtk_icon_factory_lookup")
  (return-type "GtkIconSet*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-method add_default
  (of-object "GtkIconFactory")
  (c-name "gtk_icon_factory_add_default")
  (return-type "none")
)

(define-method remove_default
  (of-object "GtkIconFactory")
  (c-name "gtk_icon_factory_remove_default")
  (return-type "none")
)

(define-function icon_factory_lookup_default
  (c-name "gtk_icon_factory_lookup_default")
  (return-type "GtkIconSet*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-function icon_size_lookup
  (c-name "gtk_icon_size_lookup")
  (return-type "gboolean")
  (parameters
    '("GtkIconSize" "size")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-function icon_size_lookup_for_settings
  (c-name "gtk_icon_size_lookup_for_settings")
  (return-type "gboolean")
  (parameters
    '("GtkSettings*" "settings")
    '("GtkIconSize" "size")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-function icon_size_register
  (c-name "gtk_icon_size_register")
  (return-type "GtkIconSize")
  (parameters
    '("const-gchar*" "name")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function icon_size_register_alias
  (c-name "gtk_icon_size_register_alias")
  (return-type "none")
  (parameters
    '("const-gchar*" "alias")
    '("GtkIconSize" "target")
  )
)

(define-function icon_size_from_name
  (c-name "gtk_icon_size_from_name")
  (return-type "GtkIconSize")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function icon_size_get_name
  (c-name "gtk_icon_size_get_name")
  (return-type "const-gchar*")
  (parameters
    '("GtkIconSize" "size")
  )
)

(define-function icon_set_get_type
  (c-name "gtk_icon_set_get_type")
  (return-type "GType")
)

(define-function icon_set_new
  (c-name "gtk_icon_set_new")
  (return-type "GtkIconSet*")
  (caller-owns-return #t)
)

(define-function icon_set_new_from_pixbuf
  (c-name "gtk_icon_set_new_from_pixbuf")
  (return-type "GtkIconSet*")
  (is-constructor-of "GtkIconSet")  
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method ref
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_ref")
  (return-type "GtkIconSet*")
)

(define-method unref
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_unref")
  (return-type "none")
)

(define-method copy
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_copy")
  (return-type "GtkIconSet*")
  (caller-owns-return #t)
)

(define-method render_icon
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_render_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("GtkStyle*" "style")
    '("GtkTextDirection" "direction")
    '("GtkStateType" "state")
    '("GtkIconSize" "size")
    '("GtkWidget*" "widget" (null-ok) (default "NULL"))
    '("const-char*" "detail" (null-ok) (default "NULL"))
  )
)

(define-method add_source
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_add_source")
  (return-type "none")
  (parameters
    '("const-GtkIconSource*" "source")
  )
)

(define-method get_sizes
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_get_sizes")
  (return-type "none")
  (parameters
    '("GtkIconSize**" "sizes")
    '("gint*" "n_sizes")
  )
)

(define-function gtk_icon_source_get_type
  (c-name "gtk_icon_source_get_type")
  (return-type "GType")
)

(define-function icon_source_new
  (c-name "gtk_icon_source_new")
  (is-constructor-of "GtkIconSource")
  (return-type "GtkIconSource*")
)

(define-method copy
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_copy")
  (return-type "GtkIconSource*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_free")
  (return-type "none")
)

(define-method set_filename
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method set_icon_name
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name" (null-ok))
  )
)

(define-method set_pixbuf
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method get_filename
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_filename")
  (return-type "const-gchar*")
)

(define-method get_icon_name
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_icon_name")
  (return-type "const-gchar*")
)

(define-method get_pixbuf
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method set_direction_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_direction_wildcarded")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_state_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_state_wildcarded")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_size_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_size_wildcarded")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_size_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_size_wildcarded")
  (return-type "gboolean")
)

(define-method get_state_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_state_wildcarded")
  (return-type "gboolean")
)

(define-method get_direction_wildcarded
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_direction_wildcarded")
  (return-type "gboolean")
)

(define-method set_direction
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_direction")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "direction")
  )
)

(define-method set_state
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_state")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
  )
)

(define-method set_size
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_set_size")
  (return-type "none")
  (parameters
    '("GtkIconSize" "size")
  )
)

(define-method get_direction
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_direction")
  (return-type "GtkTextDirection")
)

(define-method get_state
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_state")
  (return-type "GtkStateType")
)

(define-method get_size
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_get_size")
  (return-type "GtkIconSize")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkicontheme.h

(define-function icon_theme_error_quark
  (c-name "gtk_icon_theme_error_quark")
  (return-type "GQuark")
)

(define-function gtk_icon_theme_get_type
  (c-name "gtk_icon_theme_get_type")
  (return-type "GType")
)

(define-function gtk_icon_theme_new
  (c-name "gtk_icon_theme_new")
  (is-constructor-of "GtkIconTheme")
  (return-type "GtkIconTheme*")
)

(define-function icon_theme_get_default
  (c-name "gtk_icon_theme_get_default")
  (return-type "GtkIconTheme*")
)

(define-function icon_theme_get_for_screen
  (c-name "gtk_icon_theme_get_for_screen")
  (return-type "GtkIconTheme*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_screen
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_search_path
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_set_search_path")
  (return-type "none")
  (parameters
    '("const-gchar*[]" "path")
    '("gint" "n_elements")
  )
)

(define-method get_search_path
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_get_search_path")
  (return-type "none")
  (parameters
    '("gchar**[]" "path")
    '("gint*" "n_elements")
  )
)

(define-method append_search_path
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_append_search_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method prepend_search_path
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_prepend_search_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method set_custom_theme
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_set_custom_theme")
  (return-type "none")
  (parameters
    '("const-gchar*" "theme_name")
  )
)

(define-method has_icon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_has_icon")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-method lookup_icon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_lookup_icon")
  (return-type "GtkIconInfo*")
  (parameters
    '("const-gchar*" "icon_name")
    '("gint" "size")
    '("GtkIconLookupFlags" "flags")
  )
  (caller-owns-return #t)
)

(define-method load_icon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_load_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-gchar*" "icon_name")
    '("gint" "size")
    '("GtkIconLookupFlags" "flags")
    '("GError**" "error")
  )
  (caller-owns-return #t)
)

(define-method list_icons
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_list_icons")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "context")
  )
)

(define-method get_example_icon_name
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_get_example_icon_name")
  (return-type "char*")
)

(define-method rescan_if_needed
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_rescan_if_needed")
  (return-type "gboolean")
)

(define-function icon_theme_add_builtin_icon
  (c-name "gtk_icon_theme_add_builtin_icon")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
    '("gint" "size")
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-function gtk_icon_info_get_type
  (c-name "gtk_icon_info_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_copy")
  (return-type "GtkIconInfo*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_free")
  (return-type "none")
)

(define-method get_base_size
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_base_size")
  (return-type "gint")
)

(define-method get_filename
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_filename")
  (return-type "const-gchar*")
)

(define-method get_builtin_pixbuf
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_builtin_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method load_icon
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_load_icon")
  (return-type "GdkPixbuf*")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_raw_coordinates
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_set_raw_coordinates")
  (return-type "none")
  (parameters
    '("gboolean" "raw_coordinates")
  )
)

(define-method get_embedded_rect
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_embedded_rect")
  (return-type "gboolean")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method get_attach_points
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_attach_points")
  (return-type "gboolean")
  (parameters
    '("GdkPoint**" "points")
    '("gint*" "n_points")
  )
)

(define-method get_display_name
  (of-object "GtkIconInfo")
  (c-name "gtk_icon_info_get_display_name")
  (return-type "const-gchar*")
)

(define-method get_icon_sizes
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_get_icon_sizes")
  (return-type "gint*")
  (parameters
    '("const-gchar*" "icon_name")
  )
)

(define-virtual changed
  (of-object "GtkIconTheme")
  (return-type "none")
)

;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkiconview.h

(define-function gtk_icon_view_get_type
  (c-name "gtk_icon_view_get_type")
  (return-type "GType")
)

(define-function gtk_icon_view_new
  (c-name "gtk_icon_view_new")
  (is-constructor-of "GtkIconView")
  (return-type "GtkWidget*")
)

(define-function gtk_icon_view_new_with_model
  (c-name "gtk_icon_view_new_with_model")
  (return-type "GtkWidget*")
  (parameters
    '("GtkTreeModel*" "model")
  )
  (caller-owns-return #t)
)

(define-method set_model
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "model" (null-ok) (default "NULL"))
  )
)

(define-method get_model
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_model")
  (return-type "GtkTreeModel*")
)

(define-method set_text_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_text_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_text_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_text_column")
  (return-type "gint")
)

(define-method set_markup_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_markup_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_markup_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_markup_column")
  (return-type "gint")
)

(define-method set_pixbuf_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_pixbuf_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_pixbuf_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_pixbuf_column")
  (return-type "gint")
)

(define-method set_orientation
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_orientation")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)

(define-method get_orientation
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_orientation")
  (return-type "GtkOrientation")
)

(define-method set_columns
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_columns")
  (return-type "none")
  (parameters
    '("gint" "columns")
  )
)

(define-method get_columns
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_columns")
  (return-type "gint")
)

(define-method set_item_width
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_item_width")
  (return-type "none")
  (parameters
    '("gint" "item_width")
  )
)

(define-method get_item_width
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_item_width")
  (return-type "gint")
)

(define-method set_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_spacing")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
)

(define-method get_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_spacing")
  (return-type "gint")
)

(define-method set_row_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_row_spacing")
  (return-type "none")
  (parameters
    '("gint" "row_spacing")
  )
)

(define-method get_row_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_row_spacing")
  (return-type "gint")
)

(define-method set_column_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_column_spacing")
  (return-type "none")
  (parameters
    '("gint" "column_spacing")
  )
)

(define-method get_column_spacing
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_column_spacing")
  (return-type "gint")
)

(define-method set_margin
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_margin")
  (return-type "none")
  (parameters
    '("gint" "margin")
  )
)

(define-method get_margin
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_margin")
  (return-type "gint")
)

(define-method get_path_at_pos
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_path_at_pos")
  (return-type "GtkTreePath*")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_item_at_pos
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_item_at_pos")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("GtkTreePath**" "path")
    '("GtkCellRenderer**" "cell")
  )
)

(define-method get_visible_range
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_visible_range")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath**" "start_path")
    '("GtkTreePath**" "end_path")
  )
)

(define-method selected_foreach
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_selected_foreach")
  (return-type "none")
  (parameters
    '("GtkIconViewForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-method set_selection_mode
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_selection_mode")
  (return-type "none")
  (parameters
    '("GtkSelectionMode" "mode")
  )
)

(define-method get_selection_mode
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_selection_mode")
  (return-type "GtkSelectionMode")
)

(define-method select_path
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_select_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method unselect_path
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_unselect_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method path_is_selected
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_path_is_selected")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method get_selected_items
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_selected_items")
  (return-type "GList*")
)

(define-method select_all
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_select_all")
  (return-type "none")
)

(define-method unselect_all
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_unselect_all")
  (return-type "none")
)

(define-method item_activated
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_item_activated")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-virtual set_scroll_adjustments
  (of-object "GtkIconView")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)
(define-virtual item_activated
  (of-object "GtkIconView")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)
(define-virtual selection_changed
  (of-object "GtkIconView")
  (return-type "none")
)
(define-virtual select_all
  (of-object "GtkIconView")
  (return-type "none")
)
(define-virtual unselect_all
  (of-object "GtkIconView")
  (return-type "none")
)
(define-virtual select_cursor_item
  (of-object "GtkIconView")
  (return-type "none")
)
(define-virtual toggle_cursor_item
  (of-object "GtkIconView")
  (return-type "none")
)
(define-virtual move_cursor
  (of-object "GtkIconView")
  (return-type "gboolean")
  (parameters
    '("GtkMovementStep" "step")
    '("gint" "count")
  )
)
(define-virtual activate_cursor_item
  (of-object "GtkIconView")
  (return-type "gboolean")
)

(define-method set_cursor
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_cursor")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkCellRenderer*" "cell" (null-ok) (default "NULL"))
    '("gboolean" "start_editing" (default "FALSE"))
  )
)

(define-method get_cursor
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_cursor")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath**" "path")
    '("GtkCellRenderer**" "cell")
  )
)

(define-method scroll_to_path
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_scroll_to_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("gboolean" "use_align")
    '("gfloat" "row_align")
    '("gfloat" "col_align")
  )
)

(define-method enable_model_drag_source
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_enable_model_drag_source")
  (return-type "none")
  (parameters
    '("GdkModifierType" "start_button_mask")
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method enable_model_drag_dest
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_enable_model_drag_dest")
  (return-type "none")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method unset_model_drag_source
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_unset_model_drag_source")
  (return-type "none")
)

(define-method unset_model_drag_dest
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_unset_model_drag_dest")
  (return-type "none")
)

(define-method set_reorderable
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_reorderable")
  (return-type "none")
  (parameters
    '("gboolean" "reorderable")
  )
)

(define-method get_reorderable
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_reorderable")
  (return-type "gboolean")
)

(define-method set_drag_dest_item
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_drag_dest_item")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path" (null-ok))
    '("GtkIconViewDropPosition" "pos")
  )
)

(define-method get_drag_dest_item
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_drag_dest_item")
  (return-type "none")
  (parameters
    '("GtkTreePath**" "path")
    '("GtkIconViewDropPosition*" "pos")
  )
)

(define-method get_dest_item_at_pos
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_dest_item_at_pos")
  (return-type "gboolean")
  (parameters
    '("gint" "drag_x")
    '("gint" "drag_y")
    '("GtkTreePath**" "path")
    '("GtkIconViewDropPosition*" "pos")
  )
)

(define-method create_drag_icon
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_create_drag_icon")
  (return-type "GdkPixmap*")
  (parameters
    '("GtkTreePath*" "path")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimage.h

(define-function gtk_image_get_type
  (c-name "gtk_image_get_type")
  (return-type "GType")
)

(define-function gtk_image_new
  (c-name "gtk_image_new")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
)

(define-function image_new_from_pixmap
  (c-name "gtk_image_new_from_pixmap")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("GdkPixmap*" "pixmap" (null-ok))
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-function image_new_from_image
  (c-name "gtk_image_new_from_image")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("GdkImage*" "image" (null-ok))
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-function image_new_from_file
  (c-name "gtk_image_new_from_file")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function image_new_from_pixbuf
  (c-name "gtk_image_new_from_pixbuf")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-function image_new_from_stock
  (c-name "gtk_image_new_from_stock")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")
  )
)

(define-function image_new_from_icon_set
  (c-name "gtk_image_new_from_icon_set")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("GtkIconSet*" "icon_set")
    '("GtkIconSize" "size")
  )
)

(define-function image_new_from_animation
  (c-name "gtk_image_new_from_animation")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("GdkPixbufAnimation*" "animation")
  )
)

(define-method clear
  (of-object "GtkImage")
  (c-name "gtk_image_clear")
  (return-type "none")
)

(define-method set_from_pixmap
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_pixmap")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-method set_from_image
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_image")
  (return-type "none")
  (parameters
    '("GdkImage*" "gdk_image" (null-ok))
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-method set_from_file
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename" (null-ok))
  )
)

(define-method set_from_pixbuf
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method set_from_stock
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")
  )
)

(define-method set_from_icon_set
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_icon_set")
  (return-type "none")
  (parameters
    '("GtkIconSet*" "icon_set")
    '("GtkIconSize" "size")
  )
)

(define-method set_from_animation
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_animation")
  (return-type "none")
  (parameters
    '("GdkPixbufAnimation*" "animation")
  )
)

(define-method get_storage_type
  (of-object "GtkImage")
  (c-name "gtk_image_get_storage_type")
  (return-type "GtkImageType")
)

(define-method get_pixmap
  (of-object "GtkImage")
  (c-name "gtk_image_get_pixmap")
  (return-type "none")
  (parameters
    '("GdkPixmap**" "pixmap")
    '("GdkBitmap**" "mask")
  )
)

(define-method get_image
  (of-object "GtkImage")
  (c-name "gtk_image_get_image")
  (return-type "none")
  (parameters
    '("GdkImage**" "gdk_image")
    '("GdkBitmap**" "mask")
  )
)

(define-method get_pixbuf
  (of-object "GtkImage")
  (c-name "gtk_image_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_stock
  (of-object "GtkImage")
  (c-name "gtk_image_get_stock")
  (return-type "none")
  (parameters
    '("gchar**" "stock_id")
    '("GtkIconSize*" "size")
  )
)

(define-method get_icon_set
  (of-object "GtkImage")
  (c-name "gtk_image_get_icon_set")
  (return-type "none")
  (parameters
    '("GtkIconSet**" "icon_set")
    '("GtkIconSize*" "size")
  )
)

(define-method get_animation
  (of-object "GtkImage")
  (c-name "gtk_image_get_animation")
  (return-type "GdkPixbufAnimation*")
)

(define-method set
  (of-object "GtkImage")
  (c-name "gtk_image_set")
  (return-type "none")
  (parameters
    '("GdkImage*" "val")
    '("GdkBitmap*" "mask")
  )
  (deprecated "")
)

(define-method get
  (of-object "GtkImage")
  (c-name "gtk_image_get")
  (return-type "none")
  (parameters
    '("GdkImage**" "val")
    '("GdkBitmap**" "mask")
  )
  (deprecated "")
)

(define-function image_new_from_icon_name
  (c-name "gtk_image_new_from_icon_name")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "size")
  )
)


(define-method set_from_icon_name
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "size")
  )
)

(define-method set_pixel_size
  (of-object "GtkImage")
  (c-name "gtk_image_set_pixel_size")
  (return-type "none")
  (parameters
    '("gint" "pixel_size")
  )
)

(define-method get_icon_name
  (of-object "GtkImage")
  (c-name "gtk_image_get_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar**" "icon_name")
    '("GtkIconSize*" "size")
  )
)

(define-method get_pixel_size
  (of-object "GtkImage")
  (c-name "gtk_image_get_pixel_size")
  (return-type "gint")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimagemenuitem.h

(define-function gtk_image_menu_item_get_type
  (c-name "gtk_image_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_image_menu_item_new
  (c-name "gtk_image_menu_item_new")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
)

(define-function gtk_image_menu_item_new_with_label
  (c-name "gtk_image_menu_item_new_with_label")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_image_menu_item_new_with_mnemonic
  (c-name "gtk_image_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_image_menu_item_new_from_stock
  (c-name "gtk_image_menu_item_new_from_stock")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkAccelGroup*" "accel_group")
  )
)

(define-method set_image
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_set_image")
  (return-type "none")
  (parameters
    '("GtkWidget*" "image" (null-ok))
  )
)

(define-method get_image
  (of-object "GtkImageMenuItem")
  (c-name "gtk_image_menu_item_get_image")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimcontext.h

(define-function gtk_im_context_get_type
  (c-name "gtk_im_context_get_type")
  (return-type "GType")
)

(define-method set_client_window
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_set_client_window")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window" (null-ok))
  )
)

(define-method get_preedit_string
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_get_preedit_string")
  (return-type "none")
  (parameters
    '("gchar**" "str")
    '("PangoAttrList**" "attrs")
    '("gint*" "cursor_pos")
  )
)

(define-method filter_keypress
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_filter_keypress")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)

(define-method focus_in
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_focus_in")
  (return-type "none")
)

(define-method focus_out
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_focus_out")
  (return-type "none")
)

(define-method reset
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_reset")
  (return-type "none")
)

(define-method set_cursor_location
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_set_cursor_location")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
  )
)

(define-method set_use_preedit
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_set_use_preedit")
  (return-type "none")
  (parameters
    '("gboolean" "use_preedit")
  )
)

(define-method set_surrounding
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_set_surrounding")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len")
    '("gint" "cursor_index")
  )
)

(define-method get_surrounding
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_get_surrounding")
  (return-type "gboolean")
  (parameters
    '("gchar**" "text")
    '("gint*" "cursor_index")
  )
)

(define-method delete_surrounding
  (of-object "GtkIMContext")
  (c-name "gtk_im_context_delete_surrounding")
  (return-type "gboolean")
  (parameters
    '("gint" "offset")
    '("gint" "n_chars")
  )
)

(define-virtual preedit_start
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual preedit_end
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual preedit_changed
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual commit
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)
(define-virtual retrieve_surrounding
  (of-object "GtkIMContext")
  (return-type "gboolean")
)
(define-virtual delete_surrounding
  (of-object "GtkIMContext")
  (return-type "gboolean")
  (parameters
    '("gint" "offset")
    '("gint" "n_chars")
  )
)
(define-virtual set_client_window
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
  )
)
(define-virtual get_preedit_string
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("gchar**" "str")
    '("PangoAttrList**" "attrs")
    '("gint*" "cursor_pos")
  )
)
(define-virtual filter_keypress
  (of-object "GtkIMContext")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)
(define-virtual focus_in
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual focus_out
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual reset
  (of-object "GtkIMContext")
  (return-type "none")
)
(define-virtual set_cursor_location
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
  )
)
(define-virtual set_use_preedit
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("gboolean" "use_preedit")
  )
)
(define-virtual set_surrounding
  (of-object "GtkIMContext")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len")
    '("gint" "cursor_index")
  )
)
(define-virtual get_surrounding
  (of-object "GtkIMContext")
  (return-type "gboolean")
  (parameters
    '("gchar**" "text")
    '("gint*" "cursor_index")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimcontextsimple.h

(define-function gtk_im_context_simple_get_type
  (c-name "gtk_im_context_simple_get_type")
  (return-type "GType")
)

(define-function gtk_im_context_simple_new
  (c-name "gtk_im_context_simple_new")
  (is-constructor-of "GtkIMContextSimple")
  (return-type "GtkIMContext*")
)

(define-method add_table
  (of-object "GtkIMContextSimple")
  (c-name "gtk_im_context_simple_add_table")
  (return-type "none")
  (parameters
    '("guint16*" "data")
    '("gint" "max_seq_len")
    '("gint" "n_seqs")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimmodule.h



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkimmulticontext.h

(define-function gtk_im_multicontext_get_type
  (c-name "gtk_im_multicontext_get_type")
  (return-type "GType")
)

(define-function gtk_im_multicontext_new
  (c-name "gtk_im_multicontext_new")
  (is-constructor-of "GtkIMMulticontext")
  (return-type "GtkIMContext*")
)

(define-method append_menuitems
  (of-object "GtkIMMulticontext")
  (c-name "gtk_im_multicontext_append_menuitems")
  (return-type "none")
  (parameters
    '("GtkMenuShell*" "menushell")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkinputdialog.h

(define-function gtk_input_dialog_get_type
  (c-name "gtk_input_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_input_dialog_new
  (c-name "gtk_input_dialog_new")
  (is-constructor-of "GtkInputDialog")
  (return-type "GtkWidget*")
)

(define-virtual enable_device
  (of-object "GtkInputDialog")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
  )
)
(define-virtual disable_device
  (of-object "GtkInputDialog")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkinvisible.h

(define-function gtk_invisible_get_type
  (c-name "gtk_invisible_get_type")
  (return-type "GType")
)

(define-function gtk_invisible_new
  (c-name "gtk_invisible_new")
  (is-constructor-of "GtkInvisible")
  (return-type "GtkWidget*")
)

(define-function gtk_invisible_new_for_screen
  (c-name "gtk_invisible_new_for_screen")
  (is-constructor-of "GtkInvisible")
  (return-type "GtkWidget*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method set_screen
  (of-object "GtkInvisible")
  (c-name "gtk_invisible_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GtkInvisible")
  (c-name "gtk_invisible_get_screen")
  (return-type "GdkScreen*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkitem.h

(define-function gtk_item_get_type
  (c-name "gtk_item_get_type")
  (return-type "GType")
)

(define-method select
  (of-object "GtkItem")
  (c-name "gtk_item_select")
  (return-type "none")
)

(define-method deselect
  (of-object "GtkItem")
  (c-name "gtk_item_deselect")
  (return-type "none")
)

(define-method toggle
  (of-object "GtkItem")
  (c-name "gtk_item_toggle")
  (return-type "none")
)

(define-virtual select
  (of-object "GtkItem")
  (return-type "none")
)
(define-virtual deselect
  (of-object "GtkItem")
  (return-type "none")
)
(define-virtual toggle
  (of-object "GtkItem")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkitemfactory.h

(define-function gtk_item_factory_get_type
  (c-name "gtk_item_factory_get_type")
  (return-type "GType")
)

(define-function gtk_item_factory_new
  (c-name "gtk_item_factory_new")
  (is-constructor-of "GtkItemFactory")
  (return-type "GtkItemFactory*")
  (parameters
    '("GType" "container_type")
    '("const-gchar*" "path")
    '("GtkAccelGroup*" "accel_group" (null-ok) (default "NULL"))
  )
  (deprecated "use gtk.UIManager")
)

(define-method construct
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_construct")
  (return-type "none")
  (parameters
    '("GType" "container_type")
    '("const-gchar*" "path")
    '("GtkAccelGroup*" "accel_group")
  )
)

(define-function item_factory_add_foreign
  (c-name "gtk_item_factory_add_foreign")
  (return-type "none")
  (parameters
    '("GtkWidget*" "accel_widget")
    '("const-gchar*" "full_path")
    '("GtkAccelGroup*" "accel_group")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-function item_factory_from_widget
  (c-name "gtk_item_factory_from_widget")
  (return-type "GtkItemFactory*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function item_factory_path_from_widget
  (c-name "gtk_item_factory_path_from_widget")
  (return-type "const-gchar*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method get_item
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_get_item")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method get_widget
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_get_widget")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method get_widget_by_action
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_get_widget_by_action")
  (return-type "GtkWidget*")
  (parameters
    '("guint" "action")
  )
)

(define-method get_item_by_action
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_get_item_by_action")
  (return-type "GtkWidget*")
  (parameters
    '("guint" "action")
  )
)

(define-method create_item
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_create_item")
  (return-type "none")
  (parameters
    '("GtkItemFactoryEntry*" "entry")
    '("gpointer" "callback_data")
    '("guint" "callback_type")
  )
)

(define-method create_items
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_create_items")
  (return-type "none")
  (parameters
    '("guint" "n_entries")
    '("GtkItemFactoryEntry*" "entries")
    '("gpointer" "callback_data")
  )
)

(define-method delete_item
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_delete_item")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method delete_entry
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_delete_entry")
  (return-type "none")
  (parameters
    '("GtkItemFactoryEntry*" "entry")
  )
)

(define-method delete_entries
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_delete_entries")
  (return-type "none")
  (parameters
    '("guint" "n_entries")
    '("GtkItemFactoryEntry*" "entries")
  )
)

(define-method popup
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_popup")
  (return-type "none")
  (parameters
    '("guint" "x")
    '("guint" "y")
    '("guint" "mouse_button")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method popup_with_data
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_popup_with_data")
  (return-type "none")
  (parameters
    '("gpointer" "popup_data")
    '("GtkDestroyNotify" "destroy")
    '("guint" "x")
    '("guint" "y")
    '("guint" "mouse_button")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method popup_data
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_popup_data")
  (return-type "gpointer")
)

(define-function item_factory_popup_data_from_widget
  (c-name "gtk_item_factory_popup_data_from_widget")
  (return-type "gpointer")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method set_translate_func
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_set_translate_func")
  (return-type "none")
  (parameters
    '("GtkTranslateFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "notify")
  )
)

(define-function item_factory_from_path
  (c-name "gtk_item_factory_from_path")
  (return-type "GtkItemFactory*")
  (parameters
    '("const-gchar*" "path")
  )
  (deprecated "")
)

(define-function item_factory_create_menu_entries
  (c-name "gtk_item_factory_create_menu_entries")
  (return-type "none")
  (parameters
    '("guint" "n_entries")
    '("GtkMenuEntry*" "entries")
  )
  (deprecated "")
)

(define-function item_factories_path_delete
  (c-name "gtk_item_factories_path_delete")
  (return-type "none")
  (parameters
    '("const-gchar*" "ifactory_path")
    '("const-gchar*" "path")
  )
  (deprecated "")
)

(define-method create_items_ac
  (of-object "GtkItemFactory")
  (c-name "gtk_item_factory_create_items_ac")
  (return-type "none")
  (parameters
    '("guint" "n_entries")
    '("GtkItemFactoryEntry*" "entries")
    '("gpointer" "callback_data")
    '("guint" "callback_type")
  )
  (deprecated "")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtklabel.h

(define-function gtk_label_get_type
  (c-name "gtk_label_get_type")
  (return-type "GType")
)

(define-method set_text
  (of-object "GtkLabel")
  (c-name "gtk_label_set_text")
  (return-type "none")
  (parameters
    '("const-char*" "str")
  )
)

(define-method get_text
  (of-object "GtkLabel")
  (c-name "gtk_label_get_text")
  (return-type "const-gchar*")
)

(define-method set_attributes
  (of-object "GtkLabel")
  (c-name "gtk_label_set_attributes")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "GtkLabel")
  (c-name "gtk_label_get_attributes")
  (return-type "PangoAttrList*")
)

(define-method set_label
  (of-object "GtkLabel")
  (c-name "gtk_label_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method get_label
  (of-object "GtkLabel")
  (c-name "gtk_label_get_label")
  (return-type "const-gchar*")
)

(define-method set_markup
  (of-object "GtkLabel")
  (c-name "gtk_label_set_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method set_use_markup
  (of-object "GtkLabel")
  (c-name "gtk_label_set_use_markup")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_markup
  (of-object "GtkLabel")
  (c-name "gtk_label_get_use_markup")
  (return-type "gboolean")
)

(define-method set_use_underline
  (of-object "GtkLabel")
  (c-name "gtk_label_set_use_underline")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_underline
  (of-object "GtkLabel")
  (c-name "gtk_label_get_use_underline")
  (return-type "gboolean")
)

(define-method set_markup_with_mnemonic
  (of-object "GtkLabel")
  (c-name "gtk_label_set_markup_with_mnemonic")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method get_mnemonic_keyval
  (of-object "GtkLabel")
  (c-name "gtk_label_get_mnemonic_keyval")
  (return-type "guint")
)

(define-method set_mnemonic_widget
  (of-object "GtkLabel")
  (c-name "gtk_label_set_mnemonic_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget" (null-ok))
  )
)

(define-method get_mnemonic_widget
  (of-object "GtkLabel")
  (c-name "gtk_label_get_mnemonic_widget")
  (return-type "GtkWidget*")
)

(define-method set_text_with_mnemonic
  (of-object "GtkLabel")
  (c-name "gtk_label_set_text_with_mnemonic")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method set_justify
  (of-object "GtkLabel")
  (c-name "gtk_label_set_justify")
  (return-type "none")
  (parameters
    '("GtkJustification" "jtype")
  )
)

(define-method get_justify
  (of-object "GtkLabel")
  (c-name "gtk_label_get_justify")
  (return-type "GtkJustification")
)

(define-method set_pattern
  (of-object "GtkLabel")
  (c-name "gtk_label_set_pattern")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
)

(define-method set_line_wrap
  (of-object "GtkLabel")
  (c-name "gtk_label_set_line_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "wrap")
  )
)

(define-method get_line_wrap
  (of-object "GtkLabel")
  (c-name "gtk_label_get_line_wrap")
  (return-type "gboolean")
)

(define-method set_selectable
  (of-object "GtkLabel")
  (c-name "gtk_label_set_selectable")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_selectable
  (of-object "GtkLabel")
  (c-name "gtk_label_get_selectable")
  (return-type "gboolean")
)

(define-method select_region
  (of-object "GtkLabel")
  (c-name "gtk_label_select_region")
  (return-type "none")
  (parameters
    '("gint" "start_offset")
    '("gint" "end_offset")
  )
)

(define-method get_selection_bounds
  (of-object "GtkLabel")
  (c-name "gtk_label_get_selection_bounds")
  (return-type "gboolean")
  (parameters
    '("gint*" "start")
    '("gint*" "end")
  )
)

(define-method get_layout
  (of-object "GtkLabel")
  (c-name "gtk_label_get_layout")
  (return-type "PangoLayout*")
)

(define-method get_layout_offsets
  (of-object "GtkLabel")
  (c-name "gtk_label_get_layout_offsets")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set
  (of-object "GtkLabel")
  (c-name "gtk_label_set")
  (return-type "none")
  (parameters
    '("const-char*" "str")
  )
  (deprecated "use GtkLabel.set_text")
)

(define-method get
  (of-object "GtkLabel")
  (c-name "gtk_label_get")
  (return-type "none")
  (parameters
    '("char**" "str")
  )
  (deprecated "use GtkLabel.get_text")
)

(define-method parse_uline
  (of-object "GtkLabel")
  (c-name "gtk_label_parse_uline")
  (return-type "guint")
  (parameters
    '("const-gchar*" "string")
  )
  (deprecated "")
)

(define-method set_ellipsize
  (of-object "GtkLabel")
  (c-name "gtk_label_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "GtkLabel")
  (c-name "gtk_label_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

(define-method set_angle
  (of-object "GtkLabel")
  (c-name "gtk_label_set_angle")
  (return-type "none")
  (parameters
    '("gint" "angle")
  )
)

(define-method get_angle
  (of-object "GtkLabel")
  (c-name "gtk_label_get_angle")
  (return-type "gint")
)

(define-method set_width_chars
  (of-object "GtkLabel")
  (c-name "gtk_label_set_width_chars")
  (return-type "none")
  (parameters
    '("gint" "n_chars")
  )
)

(define-method get_width_chars
  (of-object "GtkLabel")
  (c-name "gtk_label_get_width_chars")
  (return-type "gint")
)

(define-method set_max_width_chars
  (of-object "GtkLabel")
  (c-name "gtk_label_set_max_width_chars")
  (return-type "none")
  (parameters
    '("gint" "n_chars")
  )
)

(define-method get_max_width_chars
  (of-object "GtkLabel")
  (c-name "gtk_label_get_max_width_chars")
  (return-type "gint")
)

(define-method set_single_line_mode
  (of-object "GtkLabel")
  (c-name "gtk_label_set_single_line_mode")
  (return-type "none")
  (parameters
    '("gboolean" "single_line_mode")
  )
)

(define-method get_single_line_mode
  (of-object "GtkLabel")
  (c-name "gtk_label_get_single_line_mode")
  (return-type "gboolean")
)

(define-virtual move_cursor
  (of-object "GtkLabel")
  (return-type "none")
  (parameters
    '("GtkMovementStep" "step")
    '("gint" "count")
    '("gboolean" "extend_selection")
  )
)
(define-virtual copy_clipboard
  (of-object "GtkLabel")
  (return-type "none")
)
(define-virtual populate_popup
  (of-object "GtkLabel")
  (return-type "none")
  (parameters
    '("GtkMenu*" "menu")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtklayout.h

(define-function gtk_layout_get_type
  (c-name "gtk_layout_get_type")
  (return-type "GType")
)

(define-method put
  (of-object "GtkLayout")
  (c-name "gtk_layout_put")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child_widget")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method move
  (of-object "GtkLayout")
  (c-name "gtk_layout_move")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child_widget")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_size
  (of-object "GtkLayout")
  (c-name "gtk_layout_set_size")
  (return-type "none")
  (parameters
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method get_size
  (of-object "GtkLayout")
  (c-name "gtk_layout_get_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method get_hadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_get_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_vadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_get_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_hadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method set_vadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method freeze
  (of-object "GtkLayout")
  (c-name "gtk_layout_freeze")
  (return-type "none")
  (deprecated "")
)

(define-method thaw
  (of-object "GtkLayout")
  (c-name "gtk_layout_thaw")
  (return-type "none")
  (deprecated "")
)

(define-virtual set_scroll_adjustments
  (of-object "GtkLayout")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtklist.h

(define-function gtk_list_get_type
  (c-name "gtk_list_get_type")
  (return-type "GType")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-function gtk_list_new
  (c-name "gtk_list_new")
  (is-constructor-of "GtkList")
  (return-type "GtkWidget*")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method insert_items
  (of-object "GtkList")
  (c-name "gtk_list_insert_items")
  (return-type "none")
  (parameters
    '("GList*" "items")
    '("gint" "position")
  )
)

(define-method append_items
  (of-object "GtkList")
  (c-name "gtk_list_append_items")
  (return-type "none")
  (parameters
    '("GList*" "items")
  )
)

(define-method prepend_items
  (of-object "GtkList")
  (c-name "gtk_list_prepend_items")
  (return-type "none")
  (parameters
    '("GList*" "items")
  )
)

(define-method remove_items
  (of-object "GtkList")
  (c-name "gtk_list_remove_items")
  (return-type "none")
  (parameters
    '("GList*" "items")
  )
)

(define-method remove_items_no_unref
  (of-object "GtkList")
  (c-name "gtk_list_remove_items_no_unref")
  (return-type "none")
  (parameters
    '("GList*" "items")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method clear_items
  (of-object "GtkList")
  (c-name "gtk_list_clear_items")
  (return-type "none")
  (parameters
    '("gint" "start")
    '("gint" "end")
  )
)

(define-method select_item
  (of-object "GtkList")
  (c-name "gtk_list_select_item")
  (return-type "none")
  (parameters
    '("gint" "item")
  )
)

(define-method unselect_item
  (of-object "GtkList")
  (c-name "gtk_list_unselect_item")
  (return-type "none")
  (parameters
    '("gint" "item")
  )
)

(define-method select_child
  (of-object "GtkList")
  (c-name "gtk_list_select_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method unselect_child
  (of-object "GtkList")
  (c-name "gtk_list_unselect_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method child_position
  (of-object "GtkList")
  (c-name "gtk_list_child_position")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_selection_mode
  (of-object "GtkList")
  (c-name "gtk_list_set_selection_mode")
  (return-type "none")
  (parameters
    '("GtkSelectionMode" "mode")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method extend_selection
  (of-object "GtkList")
  (c-name "gtk_list_extend_selection")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
    '("gboolean" "auto_start_selection")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method start_selection
  (of-object "GtkList")
  (c-name "gtk_list_start_selection")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method end_selection
  (of-object "GtkList")
  (c-name "gtk_list_end_selection")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method select_all
  (of-object "GtkList")
  (c-name "gtk_list_select_all")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method unselect_all
  (of-object "GtkList")
  (c-name "gtk_list_unselect_all")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method scroll_horizontal
  (of-object "GtkList")
  (c-name "gtk_list_scroll_horizontal")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method scroll_vertical
  (of-object "GtkList")
  (c-name "gtk_list_scroll_vertical")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method toggle_add_mode
  (of-object "GtkList")
  (c-name "gtk_list_toggle_add_mode")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method toggle_focus_row
  (of-object "GtkList")
  (c-name "gtk_list_toggle_focus_row")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method toggle_row
  (of-object "GtkList")
  (c-name "gtk_list_toggle_row")
  (return-type "none")
  (parameters
    '("GtkWidget*" "item")
  )
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method undo_selection
  (of-object "GtkList")
  (c-name "gtk_list_undo_selection")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)

(define-method end_drag_selection
  (of-object "GtkList")
  (c-name "gtk_list_end_drag_selection")
  (return-type "none")
  (deprecated "use GtkListStore/GtkTreeView")
)


(define-virtual selection_changed
  (of-object "GtkList")
  (return-type "none")
)
(define-virtual select_child
  (of-object "GtkList")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)
(define-virtual unselect_child
  (of-object "GtkList")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)
(define-virtual toggle_focus_row
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual select_all
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual unselect_all
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual undo_selection
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual start_selection
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual end_selection
  (of-object "GtkListItem")
  (return-type "none")
)
(define-virtual extend_selection
  (of-object "GtkListItem")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
    '("gboolean" "auto_start_selection")
  )
)
(define-virtual scroll_horizontal
  (of-object "GtkListItem")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
)
(define-virtual scroll_vertical
  (of-object "GtkListItem")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll_type")
    '("gfloat" "position")
  )
)
(define-virtual toggle_add_mode
  (of-object "GtkListItem")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtklistitem.h

(define-function gtk_list_item_get_type
  (c-name "gtk_list_item_get_type")
  (return-type "GType")
)

(define-function gtk_list_item_new
  (c-name "gtk_list_item_new")
  (is-constructor-of "GtkListItem")
  (return-type "GtkWidget*")
  (deprecated "use gtk.TreeView")
)

(define-function gtk_list_item_new_with_label
  (c-name "gtk_list_item_new_with_label")
  (is-constructor-of "GtkListItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
  (deprecated "use gtk.TreeView")
)

(define-method select
  (of-object "GtkListItem")
  (c-name "gtk_list_item_select")
  (return-type "none")
)

(define-method deselect
  (of-object "GtkListItem")
  (c-name "gtk_list_item_deselect")
  (return-type "none")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkliststore.h

(define-function gtk_list_store_get_type
  (c-name "gtk_list_store_get_type")
  (return-type "GType")
)

(define-function gtk_list_store_new
  (c-name "gtk_list_store_new")
  (is-constructor-of "GtkListStore")
  (return-type "GtkListStore*")
  (parameters
    '("gint" "n_columns")
  )
  (varargs #t)
)

(define-function gtk_list_store_newv
  (c-name "gtk_list_store_newv")
  (is-constructor-of "GtkListStore")
  (return-type "GtkListStore*")
  (parameters
    '("gint" "n_columns")
    '("GType*" "value")
  )
)

(define-method set_column_types
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set_column_types")
  (return-type "none")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_value
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set_value")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("GValue*" "value")
  )
)

(define-method set
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
  (varargs #t)
)

(define-method set_valist
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set_valist")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("va_list" "var_args")
  )
)

(define-method remove
  (of-object "GtkListStore")
  (c-name "gtk_list_store_remove")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method insert
  (of-object "GtkListStore")
  (c-name "gtk_list_store_insert")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "position")
  )
)

(define-method insert_before
  (of-object "GtkListStore")
  (c-name "gtk_list_store_insert_before")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "sibling")
  )
)

(define-method insert_after
  (of-object "GtkListStore")
  (c-name "gtk_list_store_insert_after")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "sibling")
  )
)

(define-method insert_with_values
  (of-object "GtkListStore")
  (c-name "gtk_list_store_insert_with_values")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "position")
  )
  (varargs #t)
)

(define-method insert_with_valuesv
  (of-object "GtkListStore")
  (c-name "gtk_list_store_insert_with_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "position")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)

(define-method prepend
  (of-object "GtkListStore")
  (c-name "gtk_list_store_prepend")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method append
  (of-object "GtkListStore")
  (c-name "gtk_list_store_append")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method clear
  (of-object "GtkListStore")
  (c-name "gtk_list_store_clear")
  (return-type "none")
)

(define-method iter_is_valid
  (of-object "GtkListStore")
  (c-name "gtk_list_store_iter_is_valid")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method reorder
  (of-object "GtkListStore")
  (c-name "gtk_list_store_reorder")
  (return-type "none")
  (parameters
    '("gint*" "new_order")
  )
)

(define-method swap
  (of-object "GtkListStore")
  (c-name "gtk_list_store_swap")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "a")
    '("GtkTreeIter*" "b")
  )
)

(define-method move_after
  (of-object "GtkListStore")
  (c-name "gtk_list_store_move_after")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "position" (null-ok))
  )
)

(define-method move_before
  (of-object "GtkListStore")
  (c-name "gtk_list_store_move_before")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "position" (null-ok))
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmain.h

(define-function check_version
  (c-name "gtk_check_version")
  (return-type "gchar*")
  (caller-owns-return #f)
  (parameters
    '("guint" "required_major")
    '("guint" "required_minor")
    '("guint" "required_micro")
  )
)

(define-function init
  (c-name "gtk_init")
  (return-type "none")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function init_check
  (c-name "gtk_init_check")
  (return-type "gboolean")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function init_abi_check
  (c-name "gtk_init_abi_check")
  (return-type "none")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("int" "num_checks")
    '("size_t" "sizeof_GtkWindow")
  )
)

(define-function init_check_abi_check
  (c-name "gtk_init_check_abi_check")
  (return-type "gboolean")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("int" "num_checks")
    '("size_t" "sizeof_GtkWindow")
  )
)

(define-function exit
  (c-name "gtk_exit")
  (return-type "none")
  (parameters
    '("gint" "error_code")
  )
  (deprecated "")
)

(define-function disable_setlocale
  (c-name "gtk_disable_setlocale")
  (return-type "none")
)

(define-function set_locale
  (c-name "gtk_set_locale")
  (return-type "gchar*")
)

(define-function get_default_language
  (c-name "gtk_get_default_language")
  (return-type "PangoLanguage*")
)

(define-function events_pending
  (c-name "gtk_events_pending")
  (return-type "gint")
)

(define-function main_do_event
  (c-name "gtk_main_do_event")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-function main
  (c-name "gtk_main")
  (return-type "none")
)

(define-function main_level
  (c-name "gtk_main_level")
  (return-type "guint")
)

(define-function main_quit
  (c-name "gtk_main_quit")
  (return-type "none")
)

(define-function main_iteration
  (c-name "gtk_main_iteration")
  (return-type "gboolean")
)

(define-function main_iteration_do
  (c-name "gtk_main_iteration_do")
  (return-type "gboolean")
  (parameters
    '("gboolean" "blocking" (default "TRUE"))
  )
)

(define-function true
  (c-name "gtk_true")
  (return-type "gboolean")
)

(define-function false
  (c-name "gtk_false")
  (return-type "gboolean")
)

(define-method grab_add
  (of-object "GtkWidget")
  (c-name "gtk_grab_add")
  (return-type "none")
)

(define-function grab_get_current
  (c-name "gtk_grab_get_current")
  (return-type "GtkWidget*")
)

(define-method grab_remove
  (of-object "GtkWidget")
  (c-name "gtk_grab_remove")
  (return-type "none")
)

(define-function init_add
  (c-name "gtk_init_add")
  (return-type "none")
  (parameters
    '("GtkFunction" "function")
    '("gpointer" "data")
  )
)

(define-function quit_add_destroy
  (c-name "gtk_quit_add_destroy")
  (return-type "none")
  (parameters
    '("guint" "main_level")
    '("GtkObject*" "object")
  )
)

(define-function quit_add
  (c-name "gtk_quit_add")
  (return-type "guint")
  (parameters
    '("guint" "main_level")
    '("GtkFunction" "function")
    '("gpointer" "data")
  )
)

(define-function quit_add_full
  (c-name "gtk_quit_add_full")
  (return-type "guint")
  (parameters
    '("guint" "main_level")
    '("GtkFunction" "function")
    '("GtkCallbackMarshal" "marshal")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-function quit_remove
  (c-name "gtk_quit_remove")
  (return-type "none")
  (parameters
    '("guint" "quit_handler_id")
  )
)

(define-function quit_remove_by_data
  (c-name "gtk_quit_remove_by_data")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-function timeout_add
  (c-name "gtk_timeout_add")
  (return-type "guint")
  (parameters
    '("guint32" "interval")
    '("GtkFunction" "function")
    '("gpointer" "data")
  )
)

(define-function timeout_add_full
  (c-name "gtk_timeout_add_full")
  (return-type "guint")
  (parameters
    '("guint32" "interval")
    '("GtkFunction" "function")
    '("GtkCallbackMarshal" "marshal")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-function timeout_remove
  (c-name "gtk_timeout_remove")
  (return-type "none")
  (parameters
    '("guint" "timeout_handler_id")
  )
)

(define-function idle_add
  (c-name "gtk_idle_add")
  (return-type "guint")
  (parameters
    '("GtkFunction" "function")
    '("gpointer" "data")
  )
)

(define-function idle_add_priority
  (c-name "gtk_idle_add_priority")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GtkFunction" "function")
    '("gpointer" "data")
  )
)

(define-function idle_add_full
  (c-name "gtk_idle_add_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GtkFunction" "function")
    '("GtkCallbackMarshal" "marshal")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-function idle_remove
  (c-name "gtk_idle_remove")
  (return-type "none")
  (parameters
    '("guint" "idle_handler_id")
  )
)

(define-function idle_remove_by_data
  (c-name "gtk_idle_remove_by_data")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-function input_add_full
  (c-name "gtk_input_add_full")
  (return-type "guint")
  (parameters
    '("gint" "source")
    '("GdkInputCondition" "condition")
    '("GdkInputFunction" "function")
    '("GtkCallbackMarshal" "marshal")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-function input_remove
  (c-name "gtk_input_remove")
  (return-type "none")
  (parameters
    '("guint" "input_handler_id")
  )
)

(define-function key_snooper_install
  (c-name "gtk_key_snooper_install")
  (return-type "guint")
  (parameters
    '("GtkKeySnoopFunc" "snooper")
    '("gpointer" "func_data")
  )
)

(define-function key_snooper_remove
  (c-name "gtk_key_snooper_remove")
  (return-type "none")
  (parameters
    '("guint" "snooper_handler_id")
  )
)

(define-function get_current_event
  (c-name "gtk_get_current_event")
  (return-type "GdkEvent*")
  (caller-owns-return #t)
)

(define-function get_current_event_time
  (c-name "gtk_get_current_event_time")
  (return-type "guint32")
)

(define-function get_current_event_state
  (c-name "gtk_get_current_event_state")
  (return-type "gboolean")
  (parameters
    '("GdkModifierType*" "state")
  )
)

(define-function get_event_widget
  (c-name "gtk_get_event_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method propagate_event
  (of-object "GtkWidget")
  (c-name "gtk_propagate_event")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-function parse_args
  (c-name "gtk_parse_args")
  (return-type "gboolean")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function init_with_args
  (c-name "gtk_init_with_args")
  (return-type "gboolean")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function get_option_group
  (c-name "gtk_get_option_group")
  (return-type "GOptionGroup*")
  (parameters
    '("gboolean" "open_default_display")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmenu.h

(define-function gtk_menu_get_type
  (c-name "gtk_menu_get_type")
  (return-type "GType")
)

(define-function gtk_menu_new
  (c-name "gtk_menu_new")
  (is-constructor-of "GtkMenu")
  (return-type "GtkWidget*")
)

(define-method popup
  (of-object "GtkMenu")
  (c-name "gtk_menu_popup")
  (return-type "none")
  (parameters
    '("GtkWidget*" "parent_menu_shell")
    '("GtkWidget*" "parent_menu_item")
    '("GtkMenuPositionFunc" "func")
    '("gpointer" "data")
    '("guint" "button")
    '("guint32" "activate_time")
  )
)

(define-method reposition
  (of-object "GtkMenu")
  (c-name "gtk_menu_reposition")
  (return-type "none")
)

(define-method popdown
  (of-object "GtkMenu")
  (c-name "gtk_menu_popdown")
  (return-type "none")
)

(define-method get_active
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_active")
  (return-type "GtkWidget*")
)

(define-method set_active
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_active")
  (return-type "none")
  (parameters
    '("guint" "index")
  )
)

(define-method set_accel_group
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_accel_group")
  (return-type "none")
  (parameters
    '("GtkAccelGroup*" "accel_group" (null-ok))
  )
)

(define-method get_accel_group
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_accel_group")
  (return-type "GtkAccelGroup*")
)

(define-method set_accel_path
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_accel_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path" (null-ok))
  )
)

(define-method attach_to_widget
  (of-object "GtkMenu")
  (c-name "gtk_menu_attach_to_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "attach_widget")
    '("GtkMenuDetachFunc" "detacher")
  )
)

(define-method detach
  (of-object "GtkMenu")
  (c-name "gtk_menu_detach")
  (return-type "none")
)

(define-method get_attach_widget
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_attach_widget")
  (return-type "GtkWidget*")
)

(define-method set_tearoff_state
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_tearoff_state")
  (return-type "none")
  (parameters
    '("gboolean" "torn_off")
  )
)

(define-method get_tearoff_state
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_tearoff_state")
  (return-type "gboolean")
)

(define-method set_title
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "GtkMenu")
  (c-name "gtk_menu_get_title")
  (return-type "const-gchar*")
)

(define-method reorder_child
  (of-object "GtkMenu")
  (c-name "gtk_menu_reorder_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "position")
  )
)

(define-method set_screen
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen" (null-ok))
  )
)

(define-method attach
  (of-object "GtkMenu")
  (c-name "gtk_menu_attach")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("guint" "left_attach")
    '("guint" "right_attach")
    '("guint" "top_attach")
    '("guint" "bottom_attach")
  )
)

(define-method set_monitor
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_monitor")
  (return-type "none")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method menu_get_for_attach_widget
  (of-object "GtkWidget")
  (c-name "gtk_menu_get_for_attach_widget")
  (return-type "GList*")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmenubar.h

(define-function gtk_menu_bar_get_type
  (c-name "gtk_menu_bar_get_type")
  (return-type "GType")
)

(define-function gtk_menu_bar_new
  (c-name "gtk_menu_bar_new")
  (is-constructor-of "GtkMenuBar")
  (return-type "GtkWidget*")
)

(define-method get_pack_direction
  (of-object "GtkMenuBar")
  (c-name "gtk_menu_bar_get_pack_direction")
  (return-type "GtkPackDirection")
)

(define-method set_pack_direction
  (of-object "GtkMenuBar")
  (c-name "gtk_menu_bar_set_pack_direction")
  (return-type "none")
  (parameters
    '("GtkPackDirection" "pack_dir")
  )
)

(define-method get_child_pack_direction
  (of-object "GtkMenuBar")
  (c-name "gtk_menu_bar_get_child_pack_direction")
  (return-type "GtkPackDirection")
)

(define-method set_child_pack_direction
  (of-object "GtkMenuBar")
  (c-name "gtk_menu_bar_set_child_pack_direction")
  (return-type "none")
  (parameters
    '("GtkPackDirection" "child_pack_dir")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmenuitem.h

(define-function gtk_menu_item_get_type
  (c-name "gtk_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_menu_item_new
  (c-name "gtk_menu_item_new")
  (is-constructor-of "GtkMenuItem")
  (return-type "GtkWidget*")
)

(define-function gtk_menu_item_new_with_label
  (c-name "gtk_menu_item_new_with_label")
  (is-constructor-of "GtkMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_menu_item_new_with_mnemonic
  (c-name "gtk_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method set_submenu
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_set_submenu")
  (return-type "none")
  (parameters
    '("GtkWidget*" "submenu" (null-ok))
  )
)

(define-method get_submenu
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_get_submenu")
  (return-type "GtkWidget*")
)

(define-method remove_submenu
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_remove_submenu")
  (return-type "none")
)

(define-method select
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_select")
  (return-type "none")
)

(define-method deselect
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_deselect")
  (return-type "none")
)

(define-method activate
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_activate")
  (return-type "none")
)

(define-method toggle_size_request
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_toggle_size_request")
  (return-type "none")
  (parameters
    '("gint*" "requisition")
  )
)

(define-method toggle_size_allocate
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_toggle_size_allocate")
  (return-type "none")
  (parameters
    '("gint" "allocation")
  )
)

(define-method set_right_justified
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_set_right_justified")
  (return-type "none")
  (parameters
    '("gboolean" "right_justified")
  )
)

(define-method get_right_justified
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_get_right_justified")
  (return-type "gboolean")
)

(define-method set_accel_path
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_set_accel_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path" (null-ok))
  )
)

(define-method right_justify
  (of-object "GtkMenuItem")
  (c-name "gtk_menu_item_right_justify")
  (return-type "none")
  (deprecated "use GtkMenuItem.set_right_justified")
)

(define-virtual activate
  (of-object "GtkMenuItem")
  (return-type "none")
)
(define-virtual activate_item
  (of-object "GtkMenuItem")
  (return-type "none")
)
(define-virtual toggle_size_request
  (of-object "GtkMenuItem")
  (return-type "none")
  (parameters
    '("gint*" "requisition" (direction "out"))
  )
)
(define-virtual toggle_size_allocate
  (of-object "GtkMenuItem")
  (return-type "none")
  (parameters
    '("gint" "allocation")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmenushell.h

(define-function gtk_menu_shell_get_type
  (c-name "gtk_menu_shell_get_type")
  (return-type "GType")
)

(define-method append
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_append")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method prepend
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_prepend")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method insert
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_insert")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "position")
  )
)

(define-method deactivate
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_deactivate")
  (return-type "none")
)

(define-method select_item
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_select_item")
  (return-type "none")
  (parameters
    '("GtkWidget*" "menu_item")
  )
)

(define-method deselect
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_deselect")
  (return-type "none")
)

(define-method activate_item
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_activate_item")
  (return-type "none")
  (parameters
    '("GtkWidget*" "menu_item")
    '("gboolean" "force_deactivate")
  )
)

(define-method select_first
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_select_first")
  (return-type "none")
  (parameters
    '("gboolean" "search_sensitive")
  )
)

(define-method cancel
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_cancel")
  (return-type "none")
)
(define-virtual deactivate
  (of-object "GtkMenuShell")
  (return-type "none")
)
(define-virtual selection_done
  (of-object "GtkMenuShell")
  (return-type "none")
)
(define-virtual move_current
  (of-object "GtkMenuShell")
  (return-type "none")
  (parameters
    '("GtkMenuDirectionType" "direction")
  )
)
(define-virtual activate_current
  (of-object "GtkMenuShell")
  (return-type "none")
  (parameters
    '("gboolean" "force_hide")
  )
)
(define-virtual cancel
  (of-object "GtkMenuShell")
  (return-type "none")
)
(define-virtual select_item
  (of-object "GtkMenuShell")
  (return-type "none")
  (parameters
    '("GtkWidget*" "menu_item")
  )
)
(define-virtual insert
  (of-object "GtkMenuShell")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "position")
  )
)
(define-virtual get_popup_delay
  (of-object "GtkMenuShell")
  (return-type "gint")
)

(define-method get_take_focus
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_get_take_focus")
  (return-type "gboolean")
)

(define-method set_take_focus
  (of-object "GtkMenuShell")
  (c-name "gtk_menu_shell_set_take_focus")
  (return-type "none")
  (parameters
    '("gboolean" "take_focus")
  )
)


;; From /opt/gnome-2.10/include/gtk-2.0/gtk/gtkmenutoolbutton.h

(define-function gtk_menu_tool_button_get_type
  (c-name "gtk_menu_tool_button_get_type")
  (return-type "GType")
)

(define-function gtk_menu_tool_button_new
  (c-name "gtk_menu_tool_button_new")
  (is-constructor-of "GtkMenuToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkWidget*" "icon_widget")
    '("const-gchar*" "label")
  )
)

(define-function gtk_menu_tool_button_new_from_stock
  (c-name "gtk_menu_tool_button_new_from_stock")
  (return-type "GtkToolItem*")
  (parameters
    '("const-gchar*" "stock_id")
  )
  (caller-owns-return #t)
)

(define-method set_menu
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_menu")
  (return-type "none")
  (parameters
    '("GtkWidget*" "menu")
  )
)

(define-method get_menu
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_get_menu")
  (return-type "GtkWidget*")
)

(define-method set_arrow_tooltip
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_arrow_tooltip")
  (return-type "none")
  (parameters
    '("GtkTooltips*" "tooltips")
    '("const-gchar*" "tip_text" (null-ok))
    '("const-gchar*" "tip_private" (null-ok) (default "NULL"))
  )
)

(define-virtual show_menu
  (of-object "GtkMenuToolButton")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmessagedialog.h

(define-function gtk_message_dialog_get_type
  (c-name "gtk_message_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_message_dialog_new
  (c-name "gtk_message_dialog_new")
  (is-constructor-of "GtkMessageDialog")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
    '("GtkDialogFlags" "flags" (default "0"))
    '("GtkMessageType" "type" (default "GTK_MESSAGE_INFO"))
    '("GtkButtonsType" "buttons" (default "GTK_BUTTONS_NONE"))
    '("const-gchar*" "message_format" (null-ok) (default "NULL"))
  )
  (varargs #t)
)

(define-function message_dialog_new_with_markup
  (c-name "gtk_message_dialog_new_with_markup")
  (is-constructor-of "GtkMessageDialog")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWindow*" "parent")
    '("GtkDialogFlags" "flags")
    '("GtkMessageType" "type")
    '("GtkButtonsType" "buttons")
    '("const-gchar*" "message_format")
  )
  (varargs #t)
)

(define-method set_markup
  (of-object "GtkMessageDialog")
  (c-name "gtk_message_dialog_set_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)


(define-method format_secondary_text
  (of-object "GtkMessageDialog")
  (c-name "gtk_message_dialog_format_secondary_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "message_format")
  )
  (varargs #t)
)

(define-method format_secondary_markup
  (of-object "GtkMessageDialog")
  (c-name "gtk_message_dialog_format_secondary_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "message_format")
  )
  (varargs #t)
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkmisc.h

(define-function gtk_misc_get_type
  (c-name "gtk_misc_get_type")
  (return-type "GType")
)

(define-method set_alignment
  (of-object "GtkMisc")
  (c-name "gtk_misc_set_alignment")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
    '("gfloat" "yalign")
  )
)

(define-method get_alignment
  (of-object "GtkMisc")
  (c-name "gtk_misc_get_alignment")
  (return-type "none")
  (parameters
    '("gfloat*" "xalign")
    '("gfloat*" "yalign")
  )
)

(define-method set_padding
  (of-object "GtkMisc")
  (c-name "gtk_misc_set_padding")
  (return-type "none")
  (parameters
    '("gint" "xpad")
    '("gint" "ypad")
  )
)

(define-method get_padding
  (of-object "GtkMisc")
  (c-name "gtk_misc_get_padding")
  (return-type "none")
  (parameters
    '("gint*" "xpad")
    '("gint*" "ypad")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtknotebook.h

(define-function gtk_notebook_get_type
  (c-name "gtk_notebook_get_type")
  (return-type "GType")
)

(define-function gtk_notebook_new
  (c-name "gtk_notebook_new")
  (is-constructor-of "GtkNotebook")
  (return-type "GtkWidget*")
)

(define-method append_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_append_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
  )
)

(define-method append_page_menu
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_append_page_menu")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
    '("GtkWidget*" "menu_label" (null-ok) (default "NULL"))
  )
)

(define-method prepend_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_prepend_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
  )
)

(define-method prepend_page_menu
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_prepend_page_menu")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
    '("GtkWidget*" "menu_label" (null-ok) (default "NULL"))
  )
)

(define-method insert_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_insert_page")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
    '("gint" "position" (default "-1"))
  )
)

(define-method insert_page_menu
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_insert_page_menu")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
    '("GtkWidget*" "menu_label" (null-ok) (default "NULL"))
    '("gint" "position" (default "-1"))
  )
)

(define-method remove_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_remove_page")
  (return-type "none")
  (parameters
    '("gint" "page_num")
  )
)

(define-method get_current_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_current_page")
  (return-type "gint")
)

(define-method get_nth_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_nth_page")
  (return-type "GtkWidget*")
  (parameters
    '("gint" "page_num")
  )
)

(define-method get_n_pages
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_n_pages")
  (return-type "gint")
)

(define-method page_num
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_page_num")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_current_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_current_page")
  (return-type "none")
  (parameters
    '("gint" "page_num")
  )
)

(define-method next_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_next_page")
  (return-type "none")
)

(define-method prev_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_prev_page")
  (return-type "none")
)

(define-method set_show_border
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_show_border")
  (return-type "none")
  (parameters
    '("gboolean" "show_border")
  )
)

(define-method get_show_border
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_show_border")
  (return-type "gboolean")
)

(define-method set_show_tabs
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_show_tabs")
  (return-type "none")
  (parameters
    '("gboolean" "show_tabs")
  )
)

(define-method get_show_tabs
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_show_tabs")
  (return-type "gboolean")
)

(define-method set_tab_pos
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_pos")
  (return-type "none")
  (parameters
    '("GtkPositionType" "pos")
  )
)

(define-method get_tab_pos
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_tab_pos")
  (return-type "GtkPositionType")
)

(define-method set_homogeneous_tabs
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_homogeneous_tabs")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
  (deprecated "")
)

(define-method set_tab_border
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_border")
  (return-type "none")
  (parameters
    '("guint" "border_width")
  )
  (deprecated "")
)

(define-method set_tab_hborder
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_hborder")
  (return-type "none")
  (parameters
    '("guint" "tab_hborder")
  )
  (deprecated "")
)

(define-method set_tab_vborder
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_vborder")
  (return-type "none")
  (parameters
    '("guint" "tab_vborder")
  )
  (deprecated "")
)

(define-method set_scrollable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_scrollable")
  (return-type "none")
  (parameters
    '("gboolean" "scrollable")
  )
)

(define-method get_scrollable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_scrollable")
  (return-type "gboolean")
)

(define-method popup_enable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_popup_enable")
  (return-type "none")
)

(define-method popup_disable
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_popup_disable")
  (return-type "none")
)

(define-method get_tab_label
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_tab_label")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_tab_label
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_label")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label" (null-ok) (default "NULL"))
  )
)

(define-method set_tab_label_text
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_label_text")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "tab_text")
  )
)

(define-method get_tab_label_text
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_tab_label_text")
  (return-type "const-gchar*")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method get_menu_label
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_menu_label")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_menu_label
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_menu_label")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "menu_label" (null-ok) (default "NULL"))
  )
)

(define-method set_menu_label_text
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_menu_label_text")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("const-gchar*" "menu_text")
  )
)

(define-method get_menu_label_text
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_menu_label_text")
  (return-type "const-gchar*")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method query_tab_label_packing
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_query_tab_label_packing")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean*" "expand")
    '("gboolean*" "fill")
    '("GtkPackType*" "pack_type")
  )
)

(define-method set_tab_label_packing
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_tab_label_packing")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand")
    '("gboolean" "fill")
    '("GtkPackType" "pack_type")
  )
)

(define-method reorder_child
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_reorder_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "position")
  )
)

(define-method current_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_current_page")
  (return-type "gint")
  (deprecated "use GtkNotebook.get_current_page")
)

(define-method set_page
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_page")
  (return-type "none")
  (parameters
    '("gint" "page_num")
  )
  (deprecated "use GtkNotebook.set_current_page")
)


(define-virtual switch_page
  (of-object "GtkNotebook")
  (return-type "none")
  (parameters
    '("GtkNotebookPage*" "page")
    '("guint" "page_num")
  )
)
(define-virtual select_page
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (parameters
    '("gboolean" "move_focus")
  )
)
(define-virtual focus_tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (parameters
    '("GtkNotebookTab" "type")
  )
)

(ifdef HAVE_GTK_2_12
 (define-virtual change_current_page
   (of-object "GtkNotebook")
   (return-type "gboolean")
   (parameters
    '("gint" "offset"))))
(ifndef HAVE_GTK_2_12
 (define-virtual change_current_page
   (of-object "GtkNotebook")
   (return-type "none")
   (parameters
    '("gint" "offset"))))


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkobject.h

(define-function gtk_object_get_type
  (c-name "gtk_object_get_type")
  (return-type "GType")
)

(define-function object_new
  (c-name "gtk_object_new")
  (return-type "GtkObject*")
  (parameters
    '("GType" "type")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method sink
  (of-object "GtkObject")
  (c-name "gtk_object_sink")
  (return-type "none")
)

(define-method destroy
  (of-object "GtkObject")
  (c-name "gtk_object_destroy")
  (return-type "none")
)

(define-virtual set_arg
  (of-object "GtkObject")
  (return-type "none")
  (parameters
    '("GtkArg*" "arg")
    '("guint" "arg_id")
  )
)
(define-virtual get_arg
  (of-object "GtkObject")
  (return-type "none")
  (parameters
    '("GtkArg*" "arg")
    '("guint" "arg_id")
  )
)
(define-virtual destroy
  (of-object "GtkObject")
  (return-type "none")
)

(define-method ref
  (of-object "GtkObject")
  (c-name "gtk_object_ref")
  (return-type "GtkObject*")
)

(define-method unref
  (of-object "GtkObject")
  (c-name "gtk_object_unref")
  (return-type "none")
)

(define-method weakref
  (of-object "GtkObject")
  (c-name "gtk_object_weakref")
  (return-type "none")
  (parameters
    '("GtkDestroyNotify" "notify")
    '("gpointer" "data")
  )
)

(define-method weakunref
  (of-object "GtkObject")
  (c-name "gtk_object_weakunref")
  (return-type "none")
  (parameters
    '("GtkDestroyNotify" "notify")
    '("gpointer" "data")
  )
)

(define-method set_data
  (of-object "GtkObject")
  (c-name "gtk_object_set_data")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "data")
  )
)

(define-method set_data_full
  (of-object "GtkObject")
  (c-name "gtk_object_set_data_full")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method remove_data
  (of-object "GtkObject")
  (c-name "gtk_object_remove_data")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_data
  (of-object "GtkObject")
  (c-name "gtk_object_get_data")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method remove_no_notify
  (of-object "GtkObject")
  (c-name "gtk_object_remove_no_notify")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
  )
)
(define-method set_user_data
  (of-object "GtkObject")
  (c-name "gtk_object_set_user_data")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method get_user_data
  (of-object "GtkObject")
  (c-name "gtk_object_get_user_data")
  (return-type "gpointer")
)

(define-method set_data_by_id
  (of-object "GtkObject")
  (c-name "gtk_object_set_data_by_id")
  (return-type "none")
  (parameters
    '("GQuark" "data_id")
    '("gpointer" "data")
  )
)

(define-method set_data_by_id_full
  (of-object "GtkObject")
  (c-name "gtk_object_set_data_by_id_full")
  (return-type "none")
  (parameters
    '("GQuark" "data_id")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method get_data_by_id
  (of-object "GtkObject")
  (c-name "gtk_object_get_data_by_id")
  (return-type "gpointer")
  (parameters
    '("GQuark" "data_id")
  )
)

(define-method remove_data_by_id
  (of-object "GtkObject")
  (c-name "gtk_object_remove_data_by_id")
  (return-type "none")
  (parameters
    '("GQuark" "data_id")
  )
)

(define-method remove_no_notify_by_id
  (of-object "GtkObject")
  (c-name "gtk_object_remove_no_notify_by_id")
  (return-type "none")
  (parameters
    '("GQuark" "key_id")
  )
)

(define-method get
  (of-object "GtkObject")
  (c-name "gtk_object_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method set
  (of-object "GtkObject")
  (c-name "gtk_object_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-function object_add_arg_type
  (c-name "gtk_object_add_arg_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_name")
    '("GtkType" "arg_type")
    '("guint" "arg_flags")
    '("guint" "arg_id")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkoldeditable.h

(define-function gtk_old_editable_get_type
  (c-name "gtk_old_editable_get_type")
  (return-type "GType")
)

(define-method claim_selection
  (of-object "GtkOldEditable")
  (c-name "gtk_old_editable_claim_selection")
  (return-type "none")
  (parameters
    '("gboolean" "claim")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method changed
  (of-object "GtkOldEditable")
  (c-name "gtk_old_editable_changed")
  (return-type "none")
)

(define-virtual activate
  (of-object "GtkOldEditable")
  (return-type "none")
)

(define-virtual set_editable
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gboolean" "is_editable")
  )
)

(define-virtual move_cursor
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-virtual move_word
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "n")
  )
)

(define-virtual move_page
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-virtual move_to_row
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-virtual move_to_column
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-virtual kill_char
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "direction")
  )
)

(define-virtual kill_word
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "direction")
  )
)

(define-virtual kill_line
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "direction")
  )
)

(define-virtual cut_clipboard
  (of-object "GtkOldEditable")
  (return-type "none")
)

(define-virtual copy_clipboard
  (of-object "GtkOldEditable")
  (return-type "none")
)

(define-virtual paste_clipboard
  (of-object "GtkOldEditable")
  (return-type "none")
)

(define-virtual update_text
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual get_chars
  (of-object "GtkOldEditable")
  (return-type "gchar*")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual set_selection
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "start_pos")
    '("gint" "end_pos")
  )
)

(define-virtual set_position
  (of-object "GtkOldEditable")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkoptionmenu.h

(define-function gtk_option_menu_get_type
  (c-name "gtk_option_menu_get_type")
  (return-type "GType")
)

(define-function gtk_option_menu_new
  (c-name "gtk_option_menu_new")
  (is-constructor-of "GtkOptionMenu")
  (return-type "GtkWidget*")
  (deprecated "use gtk.ComboBox")
)

(define-method get_menu
  (of-object "GtkOptionMenu")
  (c-name "gtk_option_menu_get_menu")
  (return-type "GtkWidget*")
)

(define-method set_menu
  (of-object "GtkOptionMenu")
  (c-name "gtk_option_menu_set_menu")
  (return-type "none")
  (parameters
    '("GtkWidget*" "menu")
  )
)

(define-method remove_menu
  (of-object "GtkOptionMenu")
  (c-name "gtk_option_menu_remove_menu")
  (return-type "none")
)

(define-method get_history
  (of-object "GtkOptionMenu")
  (c-name "gtk_option_menu_get_history")
  (return-type "gint")
)

(define-method set_history
  (of-object "GtkOptionMenu")
  (c-name "gtk_option_menu_set_history")
  (return-type "none")
  (parameters
    '("guint" "index")
  )
)

(define-virtual changed
  (of-object "GtkOptionMenu")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkpaned.h

(define-function gtk_paned_get_type
  (c-name "gtk_paned_get_type")
  (return-type "GType")
)

(define-method add1
  (of-object "GtkPaned")
  (c-name "gtk_paned_add1")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method add2
  (of-object "GtkPaned")
  (c-name "gtk_paned_add2")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method pack1
  (of-object "GtkPaned")
  (c-name "gtk_paned_pack1")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "resize" (default "FALSE"))
    '("gboolean" "shrink" (default "TRUE"))
  )
)

(define-method pack2
  (of-object "GtkPaned")
  (c-name "gtk_paned_pack2")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "resize" (default "TRUE"))
    '("gboolean" "shrink" (default "TRUE"))
  )
)

(define-method get_position
  (of-object "GtkPaned")
  (c-name "gtk_paned_get_position")
  (return-type "gint")
)

(define-method set_position
  (of-object "GtkPaned")
  (c-name "gtk_paned_set_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method get_child1
  (of-object "GtkPaned")
  (c-name "gtk_paned_get_child1")
  (return-type "GtkWidget*")
)

(define-method get_child2
  (of-object "GtkPaned")
  (c-name "gtk_paned_get_child2")
  (return-type "GtkWidget*")
)

(define-method compute_position
  (of-object "GtkPaned")
  (c-name "gtk_paned_compute_position")
  (return-type "none")
  (parameters
    '("gint" "allocation")
    '("gint" "child1_req")
    '("gint" "child2_req")
  )
)

(define-virtual cycle_child_focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (parameters
    '("gboolean" "reverse")
  )
)
(define-virtual toggle_handle_focus
  (of-object "GtkPaned")
  (return-type "gboolean")
)
(define-virtual move_handle
  (of-object "GtkPaned")
  (return-type "gboolean")
  (parameters
    '("GtkScrollType" "scroll")
  )
)
(define-virtual cycle_handle_focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (parameters
    '("gboolean" "reverse")
  )
)
(define-virtual accept_position
  (of-object "GtkPaned")
  (return-type "gboolean")
)
(define-virtual cancel_position
  (of-object "GtkPaned")
  (return-type "gboolean")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkpixmap.h

(define-function gtk_pixmap_get_type
  (c-name "gtk_pixmap_get_type")
  (return-type "GType")
)

(define-function gtk_pixmap_new
  (c-name "gtk_pixmap_new")
  (is-constructor-of "GtkPixmap")
  (return-type "GtkWidget*")
  (parameters
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))
  )
  (deprecated "use GtkImage")
)

(define-method set
  (of-object "GtkPixmap")
  (c-name "gtk_pixmap_set")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "val")
    '("GdkBitmap*" "mask" (null-ok))
  )
)

(define-method get
  (of-object "GtkPixmap")
  (c-name "gtk_pixmap_get")
  (return-type "none")
  (parameters
    '("GdkPixmap**" "val")
    '("GdkBitmap**" "mask")
  )
)

(define-method set_build_insensitive
  (of-object "GtkPixmap")
  (c-name "gtk_pixmap_set_build_insensitive")
  (return-type "none")
  (parameters
    '("gboolean" "build")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkplug.h

(define-function gtk_plug_get_type
  (c-name "gtk_plug_get_type")
  (return-type "GType")
)

(define-method construct
  (of-object "GtkPlug")
  (c-name "gtk_plug_construct")
  (return-type "none")
  (parameters
    '("GdkNativeWindow" "socket_id")
  )
)

(define-function gtk_plug_new
  (c-name "gtk_plug_new")
  (is-constructor-of "GtkPlug")
  (return-type "GtkWidget*")
  (parameters
    '("GdkNativeWindow" "socket_id")
  )
)

(define-method construct_for_display
  (of-object "GtkPlug")
  (c-name "gtk_plug_construct_for_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "socket_id")
  )
)

(define-function plug_new_for_display
  (c-name "gtk_plug_new_for_display")
  (return-type "GtkWidget*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkNativeWindow" "socket_id")
  )
  (deprecated "use gtk.Plug(socket_id, display)")
)

(define-method get_id
  (of-object "GtkPlug")
  (c-name "gtk_plug_get_id")
  (return-type "GdkNativeWindow")
)

(define-virtual embedded
  (of-object "GtkPlug")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkpreview.h

(define-function gtk_preview_get_type
  (c-name "gtk_preview_get_type")
  (return-type "GType")
)

(define-function preview_uninit
  (c-name "gtk_preview_uninit")
  (return-type "none")
  (deprecated "use GtkPixbuf")
)

(define-function gtk_preview_new
  (c-name "gtk_preview_new")
  (is-constructor-of "GtkPreview")
  (return-type "GtkWidget*")
  (parameters
    '("GtkPreviewType" "type")
  )
  (deprecated "use GtkDrawingArea")
)

(define-method size
  (of-object "GtkPreview")
  (c-name "gtk_preview_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method put
  (of-object "GtkPreview")
  (c-name "gtk_preview_put")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GdkGC*" "gc")
    '("gint" "srcx")
    '("gint" "srcy")
    '("gint" "destx")
    '("gint" "desty")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method draw_row
  (of-object "GtkPreview")
  (c-name "gtk_preview_draw_row")
  (return-type "none")
  (parameters
    '("guchar*" "data")
    '("gint" "x")
    '("gint" "y")
    '("gint" "w")
  )
)

(define-method set_expand
  (of-object "GtkPreview")
  (c-name "gtk_preview_set_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-function preview_set_gamma
  (c-name "gtk_preview_set_gamma")
  (return-type "none")
  (parameters
    '("double" "gamma")
  )
  (deprecated "use GtkPixbuf")
)

(define-function preview_set_color_cube
  (c-name "gtk_preview_set_color_cube")
  (return-type "none")
  (parameters
    '("guint" "nred_shades")
    '("guint" "ngreen_shades")
    '("guint" "nblue_shades")
    '("guint" "ngray_shades")
  )
  (deprecated "use GtkPixbuf")
)

(define-function preview_set_install_cmap
  (c-name "gtk_preview_set_install_cmap")
  (return-type "none")
  (parameters
    '("gint" "install_cmap")
  )
  (deprecated "use GtkPixbuf")
)

(define-function preview_set_reserved
  (c-name "gtk_preview_set_reserved")
  (return-type "none")
  (parameters
    '("gint" "nreserved")
  )
  (deprecated "use GtkPixbuf")
)

(define-method set_dither
  (of-object "GtkPreview")
  (c-name "gtk_preview_set_dither")
  (return-type "none")
  (parameters
    '("GdkRgbDither" "dither")
  )
  (deprecated "use GtkPixbuf")
)

(define-function preview_get_visual
  (c-name "gtk_preview_get_visual")
  (return-type "GdkVisual*")
  (deprecated "use GtkPixbuf")
)

(define-function preview_get_cmap
  (c-name "gtk_preview_get_cmap")
  (return-type "GdkColormap*")
  (deprecated "use GtkPixbuf")
)

(define-function preview_get_info
  (c-name "gtk_preview_get_info")
  (return-type "GtkPreviewInfo*")
  (deprecated "use GtkPixbuf")
)

(define-function preview_reset
  (c-name "gtk_preview_reset")
  (return-type "none")
  (deprecated "use GtkPixbuf")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkprivate.h



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkprogress.h

(define-function gtk_progress_get_type
  (c-name "gtk_progress_get_type")
  (return-type "GType")
)

(define-method set_show_text
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_show_text")
  (return-type "none")
  (parameters
    '("gboolean" "show_text")
  )
  (deprecated "gtk.Progress.set_show_text is deprecated, use gtk.ProgressBar methods")
)

(define-method set_text_alignment
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_text_alignment")
  (return-type "none")
  (parameters
    '("gfloat" "x_align")
    '("gfloat" "y_align")
  )
  (deprecated "gtk.Progress.set_text_alignment is deprecated, use gtk.ProgressBar methods")
)

(define-method set_format_string
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_format_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
  (deprecated "gtk.Progress.set_format_string is deprecated, use gtk.ProgressBar methods")
)

(define-method set_adjustment
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
  (deprecated "gtk.Progress.set_adjustment is deprecated, use gtk.ProgressBar methods")
)

(define-method configure
  (of-object "GtkProgress")
  (c-name "gtk_progress_configure")
  (return-type "none")
  (parameters
    '("gdouble" "value")
    '("gdouble" "min")
    '("gdouble" "max")
  )
  (deprecated "gtk.Progress.configure is deprecated, use gtk.ProgressBar methods")
)

(define-method set_percentage
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_percentage")
  (return-type "none")
  (parameters
    '("gdouble" "percentage")
  )
  (deprecated "gtk.Progress.set_percentage is deprecated, use gtk.ProgressBar methods")
)

(define-method set_value
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
  (deprecated "gtk.Progress.set_value is deprecated, use gtk.ProgressBar methods")
)

(define-method get_value
  (of-object "GtkProgress")
  (c-name "gtk_progress_get_value")
  (return-type "gdouble")
  (deprecated "gtk.Progress.get_value is deprecated, use gtk.ProgressBar methods")
)

(define-method set_activity_mode
  (of-object "GtkProgress")
  (c-name "gtk_progress_set_activity_mode")
  (return-type "none")
  (parameters
    '("gboolean" "activity_mode")
  )
  (deprecated "gtk.Progress.set_activity_mode is deprecated, use gtk.ProgressBar methods")
)

(define-method get_current_text
  (of-object "GtkProgress")
  (c-name "gtk_progress_get_current_text")
  (return-type "gchar*")
  (deprecated "gtk.Progress.get_current_text is deprecated, use gtk.ProgressBar methods")
)

(define-method get_text_from_value
  (of-object "GtkProgress")
  (c-name "gtk_progress_get_text_from_value")
  (return-type "gchar*")
  (parameters
    '("gdouble" "value")
  )
  (deprecated "gtk.Progress.get_text_from_value is deprecated, use gtk.ProgressBar methods")
)

(define-method get_current_percentage
  (of-object "GtkProgress")
  (c-name "gtk_progress_get_current_percentage")
  (return-type "gdouble")
  (deprecated "gtk.Progress.get_current_percentage is deprecated, use gtk.ProgressBar methods")
)

(define-method get_percentage_from_value
  (of-object "GtkProgress")
  (c-name "gtk_progress_get_percentage_from_value")
  (return-type "gdouble")
  (parameters
    '("gdouble" "value")
  )
  (deprecated "gtk.Progress.get_percentage_from_value is deprecated, use gtk.ProgressBar methods")
)

(define-virtual paint
  (of-object "GtkProgress")
  (return-type "none")
)
(define-virtual update
  (of-object "GtkProgress")
  (return-type "none")
)
(define-virtual act_mode_enter
  (of-object "GtkProgress")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkprogressbar.h

(define-function gtk_progress_bar_get_type
  (c-name "gtk_progress_bar_get_type")
  (return-type "GType")
)

(define-function gtk_progress_bar_new
  (c-name "gtk_progress_bar_new")
  (is-constructor-of "GtkProgressBar")
  (return-type "GtkWidget*")
)

(define-method pulse
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_pulse")
  (return-type "none")
)

(define-method set_text
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_fraction
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_fraction")
  (return-type "none")
  (parameters
    '("gdouble" "fraction")
  )
)

(define-method set_pulse_step
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_pulse_step")
  (return-type "none")
  (parameters
    '("gdouble" "fraction")
  )
)

(define-method set_orientation
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_orientation")
  (return-type "none")
  (parameters
    '("GtkProgressBarOrientation" "orientation")
  )
)

(define-method get_text
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_get_text")
  (return-type "const-gchar*")
)

(define-method get_fraction
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_get_fraction")
  (return-type "gdouble")
)

(define-method get_pulse_step
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_get_pulse_step")
  (return-type "gdouble")
)

(define-method get_orientation
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_get_orientation")
  (return-type "GtkProgressBarOrientation")
)

(define-function gtk_progress_bar_new_with_adjustment
  (c-name "gtk_progress_bar_new_with_adjustment")
  (is-constructor-of "GtkProgressBar")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok) (default "NULL"))
  )
  (deprecated "")
)

(define-method set_bar_style
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_bar_style")
  (return-type "none")
  (parameters
    '("GtkProgressBarStyle" "style")
  )
  (deprecated "")
)

(define-method set_discrete_blocks
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_discrete_blocks")
  (return-type "none")
  (parameters
    '("guint" "blocks")
  )
  (deprecated "")
)

(define-method set_activity_step
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_activity_step")
  (return-type "none")
  (parameters
    '("guint" "step")
  )
  (deprecated "")
)

(define-method set_activity_blocks
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_activity_blocks")
  (return-type "none")
  (parameters
    '("guint" "blocks")
  )
  (deprecated "")
)

(define-method update
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_update")
  (return-type "none")
  (parameters
    '("gfloat" "percentage")
  )
  (deprecated "")
)

(define-method set_ellipsize
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "GtkProgressBar")
  (c-name "gtk_progress_bar_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkradioaction.h

(define-function gtk_radio_action_get_type
  (c-name "gtk_radio_action_get_type")
  (return-type "GType")
)

(define-method set_group
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_set_group")
  (return-type "none")
  (parameters
    '("GSList*" "group")
  )
)

(define-method get_group
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_get_group")
  (return-type "GSList*")
)

(define-method get_current_value
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_get_current_value")
  (return-type "gint")
)

(define-virtual changed
  (of-object "GtkRadioAction")
  (return-type "none")
  (parameters
    '("GtkRadioAction*" "current")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkradiobutton.h

(define-function gtk_radio_button_get_type
  (c-name "gtk_radio_button_get_type")
  (return-type "GType")
)

(define-function gtk_radio_button_new
  (c-name "gtk_radio_button_new")
  (is-constructor-of "GtkRadioButton")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
  )
)

(define-function radio_button_new_from_widget
  (is-constructor-of "GtkRadioButton")
  (c-name "gtk_radio_button_new_from_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioButton*" "group")
  )
)

(define-function radio_button_new_with_label
  (c-name "gtk_radio_button_new_with_label")
  (is-constructor-of "GtkRadioButton")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
    '("const-gchar*" "label")
  )
)

(define-function radio_button_new_with_label_from_widget
  (c-name "gtk_radio_button_new_with_label_from_widget")
  (is-constructor-of "GtkRadioButton")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioButton*" "group")
    '("const-gchar*" "label")
  )
)

(define-function radio_button_new_with_mnemonic
  (c-name "gtk_radio_button_new_with_mnemonic")
  (is-constructor-of "GtkRadioButton")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
    '("const-gchar*" "label")
  )
)

(define-function radio_button_new_with_mnemonic_from_widget
  (c-name "gtk_radio_button_new_with_mnemonic_from_widget")
  (is-constructor-of "GtkRadioButton")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioButton*" "group")
    '("const-gchar*" "label")
  )
)

(define-method get_group
  (of-object "GtkRadioButton")
  (c-name "gtk_radio_button_get_group")
  (return-type "GSList*")
)

(define-method set_group
  (of-object "GtkRadioButton")
  (c-name "gtk_radio_button_set_group")
  (return-type "none")
  (parameters
    '("GSList*" "group")
  )
)

(define-method group
  (of-object "GtkRadioButton")
  (c-name "gtk_radio_button_group")
  (return-type "GSList*")
  (deprecated "use GtkRadioButton.get_group")
)

(define-virtual group_changed
  (of-object "GtkRadioButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkradiomenuitem.h

(define-function gtk_radio_menu_item_get_type
  (c-name "gtk_radio_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_radio_menu_item_new
  (c-name "gtk_radio_menu_item_new")
  (is-constructor-of "GtkRadioMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
  )
)

(define-function gtk_radio_menu_item_new_with_label
  (c-name "gtk_radio_menu_item_new_with_label")
  (is-constructor-of "GtkRadioMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
    '("const-gchar*" "label")
  )
)

(define-function gtk_radio_menu_item_new_with_mnemonic
  (c-name "gtk_radio_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkRadioMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("GSList*" "group")
    '("const-gchar*" "label")
  )
)

(define-method new_from_widget
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_new_from_widget")
  (caller-owns-return #t)
  (return-type "GtkWidget*")
)

(define-method new_with_mnemonic_from_widget
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_new_with_mnemonic_from_widget")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method new_with_label_from_widget
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_new_with_label_from_widget")
  (return-type "GtkWidget*")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method get_group
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_get_group")
  (return-type "GSList*")
)

(define-method set_group
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_set_group")
  (return-type "none")
  (parameters
    '("GSList*" "group")
  )
)

(define-method group
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_group")
  (return-type "GSList*")
  (deprecated "use GtkRadioMenuItem.get_group")
)

(define-virtual group_changed
  (of-object "GtkRadioMenuItem")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkradiotoolbutton.h

(define-function gtk_radio_tool_button_get_type
  (c-name "gtk_radio_tool_button_get_type")
  (return-type "GType")
)

(define-function gtk_radio_tool_button_new
  (c-name "gtk_radio_tool_button_new")
  (is-constructor-of "GtkRadioToolButton")
  (return-type "GtkToolItem*")
)

(define-function radio_tool_button_new_from_stock
  (c-name "gtk_radio_tool_button_new_from_stock")
  (is-constructor-of "GtkRadioToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-function radio_tool_button_new_from_widget
  (c-name "gtk_radio_tool_button_new_from_widget")
  (is-constructor-of "GtkRadioToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkRadioToolButton*" "group")
   )
)

(define-function radio_tool_button_new_with_stock_from_widget
  (c-name "gtk_radio_tool_button_new_with_stock_from_widget")
  (is-constructor-of "GtkRadioToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkRadioToolButton*" "group")
    '("const-gchar*" "stock_id")
  )
)

(define-method set_group
  (of-object "GtkRadioToolButton")
  (c-name "gtk_radio_tool_button_set_group")
  (return-type "none")
  (parameters
    '("GSList*" "group")
  )
)

(define-method get_group
  (of-object "GtkRadioToolButton")
  (c-name "gtk_radio_tool_button_get_group")
  (return-type "GSList*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkrange.h

(define-function gtk_range_get_type
  (c-name "gtk_range_get_type")
  (return-type "GType")
)

(define-method set_update_policy
  (of-object "GtkRange")
  (c-name "gtk_range_set_update_policy")
  (return-type "none")
  (parameters
    '("GtkUpdateType" "policy")
  )
)

(define-method get_update_policy
  (of-object "GtkRange")
  (c-name "gtk_range_get_update_policy")
  (return-type "GtkUpdateType")
)

(define-method set_adjustment
  (of-object "GtkRange")
  (c-name "gtk_range_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method get_adjustment
  (of-object "GtkRange")
  (c-name "gtk_range_get_adjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_inverted
  (of-object "GtkRange")
  (c-name "gtk_range_set_inverted")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_inverted
  (of-object "GtkRange")
  (c-name "gtk_range_get_inverted")
  (return-type "gboolean")
)

(define-method set_increments
  (of-object "GtkRange")
  (c-name "gtk_range_set_increments")
  (return-type "none")
  (parameters
    '("gdouble" "step")
    '("gdouble" "page")
  )
)

(define-method set_range
  (of-object "GtkRange")
  (c-name "gtk_range_set_range")
  (return-type "none")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
  )
)

(define-method set_value
  (of-object "GtkRange")
  (c-name "gtk_range_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
)

(define-method get_value
  (of-object "GtkRange")
  (c-name "gtk_range_get_value")
  (return-type "gdouble")
)


(define-virtual value_changed
  (of-object "GtkRange")
  (return-type "none")
)
(define-virtual adjust_bounds
  (of-object "GtkRange")
  (return-type "none")
  (parameters
    '("gdouble" "new_value")
  )
)
(define-virtual move_slider
  (of-object "GtkRange")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll")
  )
)
(define-virtual get_range_border
  (of-object "GtkRange")
  (return-type "none")
  (parameters
    '("GtkBorder*" "border_")
  )
)
(define-virtual change_value
  (of-object "GtkRange")
  (return-type "gboolean")
  (parameters
    '("GtkScrollType" "scroll")
    '("gdouble" "new_value")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtkrc.h

(define-function rc_add_default_file
  (c-name "gtk_rc_add_default_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function rc_set_default_files
  (c-name "gtk_rc_set_default_files")
  (return-type "none")
  (parameters
    '("gchar**" "filenames")
  )
)

(define-function rc_get_default_files
  (c-name "gtk_rc_get_default_files")
  (return-type "gchar**")
)

(define-method rc_get_style
  (of-object "GtkWidget")
  (c-name "gtk_rc_get_style")
  (return-type "GtkStyle*")
)

(define-function rc_get_style_by_paths
  (c-name "gtk_rc_get_style_by_paths")
  (return-type "GtkStyle*")
  (parameters
    '("GtkSettings*" "settings")
    '("const-char*" "widget_path" (null-ok) (default "NULL"))
    '("const-char*" "class_path" (null-ok) (default "NULL"))
    '("GType" "type")
  )
)

(define-function rc_reparse_all_for_settings
  (c-name "gtk_rc_reparse_all_for_settings")
  (return-type "gboolean")
  (parameters
    '("GtkSettings*" "settings")
    '("gboolean" "force_load")
  )
)

(define-function rc_reset_styles
  (c-name "gtk_rc_reset_styles")
  (return-type "none")
  (parameters
    '("GtkSettings*" "settings")
  )
)

(define-function rc_find_pixmap_in_path
  (c-name "gtk_rc_find_pixmap_in_path")
  (return-type "gchar*")
  (parameters
    '("GtkSettings*" "settings")
    '("GScanner*" "scanner")
    '("const-gchar*" "pixmap_file")
  )
)

(define-function rc_parse
  (c-name "gtk_rc_parse")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function rc_parse_string
  (c-name "gtk_rc_parse_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "rc_string")
  )
)

(define-function rc_reparse_all
  (c-name "gtk_rc_reparse_all")
  (return-type "gboolean")
)

(define-method rc_add_widget_name_style
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_add_widget_name_style")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
  (deprecated "")
)

(define-method rc_add_widget_class_style
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_add_widget_class_style")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
  (deprecated "")
)

(define-method rc_add_class_style
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_add_class_style")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
  )
  (deprecated "")
)


(define-function gtk_rc_style_get_type
  (c-name "gtk_rc_style_get_type")
  (return-type "GType")
)

(define-function gtk_rc_style_new
  (c-name "gtk_rc_style_new")
  (is-constructor-of "GtkRCStyle")
  (return-type "GtkRcStyle*")
)

(define-method copy
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_style_copy")
  (return-type "GtkRcStyle*")
  (caller-owns-return #t)
)

(define-method ref
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_style_ref")
  (return-type "none")
)

(define-method unref
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_style_unref")
  (return-type "none")
)

(define-virtual create_rc_style
  (of-object "GtkRcStyle")
  (return-type "GtkRcStyle*")
)

(define-virtual parse
  (of-object "GtkRcStyle")
  (return-type "guint")
  (parameters
    '("GtkSettings*" "settings")
    '("GScanner*" "scanner")
  )
)
(define-virtual merge
  (of-object "GtkRcStyle")
  (return-type "none")
  (parameters
    '("GtkRcStyle*" "src")
  )
)

(define-virtual create_style
  (of-object "GtkRcStyle")
  (return-type "GtkStyle*")
)

(define-function rc_find_module_in_path
  (c-name "gtk_rc_find_module_in_path")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "module_file")
  )
)

(define-function rc_get_theme_dir
  (c-name "gtk_rc_get_theme_dir")
  (return-type "gchar*")
)

(define-function rc_get_module_dir
  (c-name "gtk_rc_get_module_dir")
  (return-type "gchar*")
)

(define-function rc_get_im_module_path
  (c-name "gtk_rc_get_im_module_path")
  (return-type "gchar*")
)

(define-function rc_get_im_module_file
  (c-name "gtk_rc_get_im_module_file")
  (return-type "gchar*")
)

(define-function rc_scanner_new
  (c-name "gtk_rc_scanner_new")
  (is-constructor-of "GtkRcScanner")
  (return-type "GScanner*")
)

(define-function rc_parse_color
  (c-name "gtk_rc_parse_color")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
    '("GdkColor*" "color")
  )
)

(define-function rc_parse_state
  (c-name "gtk_rc_parse_state")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
    '("GtkStateType*" "state")
  )
)

(define-function rc_parse_priority
  (c-name "gtk_rc_parse_priority")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
    '("GtkPathPriorityType*" "priority")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkruler.h

(define-function gtk_ruler_get_type
  (c-name "gtk_ruler_get_type")
  (return-type "GType")
)

(define-method set_metric
  (of-object "GtkRuler")
  (c-name "gtk_ruler_set_metric")
  (return-type "none")
  (parameters
    '("GtkMetricType" "metric")
  )
)

(define-method set_range
  (of-object "GtkRuler")
  (c-name "gtk_ruler_set_range")
  (return-type "none")
  (parameters
    '("gdouble" "lower")
    '("gdouble" "upper")
    '("gdouble" "position")
    '("gdouble" "max_size")
  )
)

(define-method draw_ticks
  (of-object "GtkRuler")
  (c-name "gtk_ruler_draw_ticks")
  (return-type "none")
)

(define-method draw_pos
  (of-object "GtkRuler")
  (c-name "gtk_ruler_draw_pos")
  (return-type "none")
)

(define-method get_metric
  (of-object "GtkRuler")
  (c-name "gtk_ruler_get_metric")
  (return-type "GtkMetricType")
)

(define-method get_range
  (of-object "GtkRuler")
  (c-name "gtk_ruler_get_range")
  (return-type "none")
  (parameters
    '("gdouble*" "lower")
    '("gdouble*" "upper")
    '("gdouble*" "position")
    '("gdouble*" "max_size")
  )
)

(define-virtual draw_ticks
  (of-object "GtkRuler")
  (return-type "none")
)
(define-virtual draw_pos
  (of-object "GtkRuler")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkscale.h

(define-function gtk_scale_get_type
  (c-name "gtk_scale_get_type")
  (return-type "GType")
)

(define-method set_digits
  (of-object "GtkScale")
  (c-name "gtk_scale_set_digits")
  (return-type "none")
  (parameters
    '("gint" "digits")
  )
)

(define-method get_digits
  (of-object "GtkScale")
  (c-name "gtk_scale_get_digits")
  (return-type "gint")
)

(define-method set_draw_value
  (of-object "GtkScale")
  (c-name "gtk_scale_set_draw_value")
  (return-type "none")
  (parameters
    '("gboolean" "draw_value")
  )
)

(define-method get_draw_value
  (of-object "GtkScale")
  (c-name "gtk_scale_get_draw_value")
  (return-type "gboolean")
)

(define-method set_value_pos
  (of-object "GtkScale")
  (c-name "gtk_scale_set_value_pos")
  (return-type "none")
  (parameters
    '("GtkPositionType" "pos")
  )
)

(define-method get_value_pos
  (of-object "GtkScale")
  (c-name "gtk_scale_get_value_pos")
  (return-type "GtkPositionType")
)

(define-method get_layout
  (of-object "GtkScale")
  (c-name "gtk_scale_get_layout")
  (return-type "PangoLayout*")
)

(define-method get_layout_offsets
  (of-object "GtkScale")
  (c-name "gtk_scale_get_layout_offsets")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-virtual format_value
  (of-object "GtkScale")
  (return-type "gchar*")
  (parameters
    '("gdouble" "value")
  )
)

(define-virtual draw_value
  (of-object "GtkScale")
  (return-type "none")
)
(define-virtual get_layout_offsets
  (of-object "GtkScale")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkscrollbar.h

(define-function gtk_scrollbar_get_type
  (c-name "gtk_scrollbar_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkscrolledwindow.h

(define-function gtk_scrolled_window_get_type
  (c-name "gtk_scrolled_window_get_type")
  (return-type "GType")
)

(define-method set_hadjustment
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment" (null-ok))
  )
)

(define-method set_vadjustment
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment" (null-ok))
  )
)

(define-method get_hadjustment
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_vadjustment
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_hscrollbar
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_hscrollbar")
  (return-type "GtkWidget*")
)

(define-method get_vscrollbar
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_vscrollbar")
  (return-type "GtkWidget*")
)

(define-method set_policy
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_set_policy")
  (return-type "none")
  (parameters
    '("GtkPolicyType" "hscrollbar_policy")
    '("GtkPolicyType" "vscrollbar_policy")
  )
)

(define-method get_policy
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_policy")
  (return-type "none")
  (parameters
    '("GtkPolicyType*" "hscrollbar_policy")
    '("GtkPolicyType*" "vscrollbar_policy")
  )
)

(define-method set_placement
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_set_placement")
  (return-type "none")
  (parameters
    '("GtkCornerType" "window_placement")
  )
)

(define-method get_placement
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_placement")
  (return-type "GtkCornerType")
)

(define-method set_shadow_type
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "type")
  )
)

(define-method get_shadow_type
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_get_shadow_type")
  (return-type "GtkShadowType")
)

(define-method add_with_viewport
  (of-object "GtkScrolledWindow")
  (c-name "gtk_scrolled_window_add_with_viewport")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(ifdef HAVE_GTK_2_12
(define-virtual scroll_child
  (of-object "GtkScrolledWindow")
  (return-type "gboolean")
  (parameters
    '("GtkScrollType" "scroll")
    '("gboolean" "horizontal")
  )
))
(ifndef HAVE_GTK_2_12
(define-virtual scroll_child
  (of-object "GtkScrolledWindow")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll")
    '("gboolean" "horizontal")
  )
))

(define-virtual move_focus_out
  (of-object "GtkScrolledWindow")
  (return-type "none")
  (parameters
    '("GtkDirectionType" "direction")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkselection.h

(define-function gtk_target_list_new
  (c-name "gtk_target_list_new")
  (is-constructor-of "GtkTargetList")
  (return-type "GtkTargetList*")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("guint" "ntargets")
  )
)

(define-method ref
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_ref")
  (return-type "none")
)

(define-method unref
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_unref")
  (return-type "none")
)

(define-method add
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_add")
  (return-type "none")
  (parameters
    '("GdkAtom" "target")
    '("guint" "flags")
    '("guint" "info")
  )
)

(define-method add_table
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_add_table")
  (return-type "none")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("guint" "ntargets")
  )
)

(define-method remove
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_remove")
  (return-type "none")
  (parameters
    '("GdkAtom" "target")
  )
)

(define-method find
  (of-object "GtkTargetList")
  (c-name "gtk_target_list_find")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "target")
    '("guint*" "info")
  )
)

(define-method selection_owner_set
  (of-object "GtkWidget")
  (c-name "gtk_selection_owner_set")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-function selection_owner_set_for_display
  (c-name "gtk_selection_owner_set_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GtkWidget*" "widget" (null-ok))
    '("GdkAtom" "selection")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method selection_add_target
  (of-object "GtkWidget")
  (c-name "gtk_selection_add_target")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint" "info")
  )
)

(define-method selection_add_targets
  (of-object "GtkWidget")
  (c-name "gtk_selection_add_targets")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
    '("const-GtkTargetEntry*" "targets")
    '("guint" "ntargets")
  )
)

(define-method selection_clear_targets
  (of-object "GtkWidget")
  (c-name "gtk_selection_clear_targets")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-method selection_convert
  (of-object "GtkWidget")
  (c-name "gtk_selection_convert")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

(define-method set
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_set")
  (return-type "none")
  (parameters
    '("GdkAtom" "type")
    '("gint" "format")
    '("const-guchar*" "data")
    '("gint" "length")
  )
)

(define-method set_text
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_set_text")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
    '("gint" "len" (default "-1"))
  )
)

(define-method get_text
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_text")
  (return-type "guchar*")
)

(define-method get_targets
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_targets")
  (return-type "gboolean")
  (parameters
    '("GdkAtom**" "targets")
    '("gint*" "n_atoms")
  )
)

(define-method targets_include_text
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_targets_include_text")
  (return-type "gboolean")
)

(define-method selection_remove_all
  (of-object "GtkWidget")
  (c-name "gtk_selection_remove_all")
  (return-type "none")
)

(define-method selection_clear
  (of-object "GtkWidget")
  (c-name "gtk_selection_clear")
  (return-type "gboolean")
  (parameters
    '("GdkEventSelection*" "event")
  )
)

(define-function gtk_selection_data_get_type
  (c-name "gtk_selection_data_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_copy")
  (return-type "GtkSelectionData*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_free")
  (return-type "none")
)

(define-method set_pixbuf
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_set_pixbuf")
  (return-type "gboolean")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method get_pixbuf
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method set_uris
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_set_uris")
  (return-type "gboolean")
  (parameters
    '("gchar**" "uris")
  )
)

(define-method get_uris
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_get_uris")
  (return-type "gchar**")
)


(define-method targets_include_image
  (of-object "GtkSelectionData")
  (c-name "gtk_selection_data_targets_include_image")
  (return-type "gboolean")
  (parameters
    '("gboolean" "writable")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkseparator.h

(define-function gtk_separator_get_type
  (c-name "gtk_separator_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkseparatormenuitem.h

(define-function gtk_separator_menu_item_get_type
  (c-name "gtk_separator_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_separator_menu_item_new
  (c-name "gtk_separator_menu_item_new")
  (is-constructor-of "GtkSeparatorMenuItem")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkseparatortoolitem.h

(define-function gtk_separator_tool_item_get_type
  (c-name "gtk_separator_tool_item_get_type")
  (return-type "GType")
)

(define-function gtk_separator_tool_item_new
  (c-name "gtk_separator_tool_item_new")
  (is-constructor-of "GtkSeparatorToolItem")
  (return-type "GtkToolItem*")
)

(define-method get_draw
  (of-object "GtkSeparatorToolItem")
  (c-name "gtk_separator_tool_item_get_draw")
  (return-type "gboolean")
)

(define-method set_draw
  (of-object "GtkSeparatorToolItem")
  (c-name "gtk_separator_tool_item_set_draw")
  (return-type "none")
  (parameters
    '("gboolean" "draw")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtksettings.h

(define-function gtk_settings_get_type
  (c-name "gtk_settings_get_type")
  (return-type "GType")
)

(define-function settings_get_default
  (c-name "gtk_settings_get_default")
  (return-type "GtkSettings*")
)

(define-function settings_get_for_screen
  (c-name "gtk_settings_get_for_screen")
  (return-type "GtkSettings*")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-function settings_install_property
  (c-name "gtk_settings_install_property")
  (return-type "none")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-function settings_install_property_parser
  (c-name "gtk_settings_install_property_parser")
  (return-type "none")
  (parameters
    '("GParamSpec*" "pspec")
    '("GtkRcPropertyParser" "parser")
  )
)

(define-function rc_property_parse_color
  (c-name "gtk_rc_property_parse_color")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
    '("const-GString*" "gstring")
    '("GValue*" "property_value")
  )
)

(define-function rc_property_parse_enum
  (c-name "gtk_rc_property_parse_enum")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
    '("const-GString*" "gstring")
    '("GValue*" "property_value")
  )
)

(define-function rc_property_parse_flags
  (c-name "gtk_rc_property_parse_flags")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
    '("const-GString*" "gstring")
    '("GValue*" "property_value")
  )
)

(define-function rc_property_parse_requisition
  (c-name "gtk_rc_property_parse_requisition")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
    '("const-GString*" "gstring")
    '("GValue*" "property_value")
  )
)

(define-function rc_property_parse_border
  (c-name "gtk_rc_property_parse_border")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
    '("const-GString*" "gstring")
    '("GValue*" "property_value")
  )
)

(define-method set_property_value
  (of-object "GtkSettings")
  (c-name "gtk_settings_set_property_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GtkSettingsValue*" "svalue")
  )
)

(define-method set_string_property
  (of-object "GtkSettings")
  (c-name "gtk_settings_set_string_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "v_string")
    '("const-gchar*" "origin")
  )
)

(define-method set_long_property
  (of-object "GtkSettings")
  (c-name "gtk_settings_set_long_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("glong" "v_long")
    '("const-gchar*" "origin")
  )
)

(define-method set_double_property
  (of-object "GtkSettings")
  (c-name "gtk_settings_set_double_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gdouble" "v_double")
    '("const-gchar*" "origin")
  )
)


;; From /mondo/local/gtk-2.10/include/gtk-2.0/gtk/gtksignal.h

(define-function signal_newv
  (c-name "gtk_signal_newv")
  (return-type "guint")
  (parameters
    '("const-gchar*" "name")
    '("GtkSignalRunType" "signal_flags")
    '("GtkType" "object_type")
    '("guint" "function_offset")
    '("GtkSignalMarshaller" "marshaller")
    '("GtkType" "return_val")
    '("guint" "n_args")
    '("GtkType*" "args")
  )
)

(define-function signal_new
  (c-name "gtk_signal_new")
  (return-type "guint")
  (parameters
    '("const-gchar*" "name")
    '("GtkSignalRunType" "signal_flags")
    '("GtkType" "object_type")
    '("guint" "function_offset")
    '("GtkSignalMarshaller" "marshaller")
    '("GtkType" "return_val")
    '("guint" "n_args")
  )
  (varargs #t)
)

(define-function signal_emit_stop_by_name
  (c-name "gtk_signal_emit_stop_by_name")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
  )
)

(define-function signal_connect_object_while_alive
  (c-name "gtk_signal_connect_object_while_alive")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
    '("GtkSignalFunc" "func")
    '("GtkObject*" "alive_object")
  )
)

(define-function signal_connect_while_alive
  (c-name "gtk_signal_connect_while_alive")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
    '("GtkSignalFunc" "func")
    '("gpointer" "func_data")
    '("GtkObject*" "alive_object")
  )
)

(define-function signal_connect_full
  (c-name "gtk_signal_connect_full")
  (return-type "gulong")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
    '("GtkSignalFunc" "func")
    '("GtkCallbackMarshal" "unsupported")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy_func")
    '("gint" "object_signal")
    '("gint" "after")
  )
)

(define-function signal_emitv
  (c-name "gtk_signal_emitv")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("guint" "signal_id")
    '("GtkArg*" "args")
  )
)

(define-function signal_emit
  (c-name "gtk_signal_emit")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("guint" "signal_id")
  )
  (varargs #t)
)

(define-function signal_emit_by_name
  (c-name "gtk_signal_emit_by_name")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
  )
  (varargs #t)
)

(define-function signal_emitv_by_name
  (c-name "gtk_signal_emitv_by_name")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("const-gchar*" "name")
    '("GtkArg*" "args")
  )
)

(define-function signal_compat_matched
  (c-name "gtk_signal_compat_matched")
  (return-type "none")
  (parameters
    '("GtkObject*" "object")
    '("GtkSignalFunc" "func")
    '("gpointer" "data")
    '("GSignalMatchType" "match")
    '("guint" "action")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtksizegroup.h

(define-function gtk_size_group_get_type
  (c-name "gtk_size_group_get_type")
  (return-type "GType")
)

(define-method set_mode
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_set_mode")
  (return-type "none")
  (parameters
    '("GtkSizeGroupMode" "mode")
  )
)

(define-method get_mode
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_get_mode")
  (return-type "GtkSizeGroupMode")
)

(define-method set_ignore_hidden
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_set_ignore_hidden")
  (return-type "none")
  (parameters
    '("gboolean" "ignore_hidden")
  )
)

(define-method get_ignore_hidden
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_get_ignore_hidden")
  (return-type "gboolean")
)

(define-method add_widget
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_add_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method remove_widget
  (of-object "GtkSizeGroup")
  (c-name "gtk_size_group_remove_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtksocket.h

(define-function gtk_socket_get_type
  (c-name "gtk_socket_get_type")
  (return-type "GType")
)

(define-function gtk_socket_new
  (c-name "gtk_socket_new")
  (is-constructor-of "GtkSocket")
  (return-type "GtkWidget*")
)

(define-method add_id
  (of-object "GtkSocket")
  (c-name "gtk_socket_add_id")
  (return-type "none")
  (parameters
    '("GdkNativeWindow" "window_id")
  )
)

(define-method get_id
  (of-object "GtkSocket")
  (c-name "gtk_socket_get_id")
  (return-type "GdkNativeWindow")
)

(define-method steal
  (of-object "GtkSocket")
  (c-name "gtk_socket_steal")
  (return-type "none")
  (parameters
    '("GdkNativeWindow" "wid")
  )
  (deprecated "")
)

(define-virtual plug_added
  (of-object "GtkSocket")
  (return-type "none")
)
(define-virtual plug_removed
  (of-object "GtkSocket")
  (return-type "gboolean")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkspinbutton.h

(define-function gtk_spin_button_get_type
  (c-name "gtk_spin_button_get_type")
  (return-type "GType")
)

(define-method configure
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_configure")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
    '("gdouble" "climb_rate")
    '("guint" "digits")
  )
)


(define-function gtk_spin_button_new_with_range
  (c-name "gtk_spin_button_new_with_range")
  (is-constructor-of "GtkSpinButton")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")
  )
)

(define-method set_adjustment
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)

(define-method get_adjustment
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_adjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_digits
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_digits")
  (return-type "none")
  (parameters
    '("guint" "digits")
  )
)

(define-method get_digits
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_digits")
  (return-type "guint")
)

(define-method set_increments
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_increments")
  (return-type "none")
  (parameters
    '("gdouble" "step")
    '("gdouble" "page")
  )
)

(define-method get_increments
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_increments")
  (return-type "none")
  (parameters
    '("gdouble*" "step")
    '("gdouble*" "page")
  )
)

(define-method set_range
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_range")
  (return-type "none")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
  )
)

(define-method get_range
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_range")
  (return-type "none")
  (parameters
    '("gdouble*" "min")
    '("gdouble*" "max")
  )
)

(define-method get_value
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_value")
  (return-type "gdouble")
)

(define-method get_value_as_int
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_value_as_int")
  (return-type "gint")
)

(define-method set_value
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
)

(define-method set_update_policy
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_update_policy")
  (return-type "none")
  (parameters
    '("GtkSpinButtonUpdatePolicy" "policy")
  )
)

(define-method get_update_policy
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_update_policy")
  (return-type "guint")
)

(define-method set_numeric
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_numeric")
  (return-type "none")
  (parameters
    '("gboolean" "numeric")
  )
)

(define-method get_numeric
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_numeric")
  (return-type "gboolean")
)

(define-method spin
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_spin")
  (return-type "none")
  (parameters
    '("GtkSpinType" "direction")
    '("gdouble" "increment" (default "1"))
  )
)

(define-method set_wrap
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "wrap")
  )
)

(define-method get_wrap
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_wrap")
  (return-type "gboolean")
)

(define-method set_snap_to_ticks
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_set_snap_to_ticks")
  (return-type "none")
  (parameters
    '("gboolean" "snap_to_ticks")
  )
)

(define-method get_snap_to_ticks
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_get_snap_to_ticks")
  (return-type "gboolean")
)

(define-method update
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_update")
  (return-type "none")
)

(define-virtual input
  (of-object "GtkSpinButton")
  (return-type "gint")
  (parameters
    '("gdouble*" "new_value" (direction "out"))
  )
)
(define-virtual output
  (of-object "GtkSpinButton")
  (return-type "gint")
)
(define-virtual value_changed
  (of-object "GtkSpinButton")
  (return-type "none")
)
(define-virtual change_value
  (of-object "GtkSpinButton")
  (return-type "none")
  (parameters
    '("GtkScrollType" "scroll")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkstatusbar.h

(define-function gtk_statusbar_get_type
  (c-name "gtk_statusbar_get_type")
  (return-type "GType")
)

(define-function gtk_statusbar_new
  (c-name "gtk_statusbar_new")
  (is-constructor-of "GtkStatusbar")
  (return-type "GtkWidget*")
)

(define-method get_context_id
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_get_context_id")
  (return-type "guint")
  (parameters
    '("const-gchar*" "context_description")
  )
)

(define-method push
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_push")
  (return-type "guint")
  (parameters
    '("guint" "context_id")
    '("const-gchar*" "text")
  )
)

(define-method pop
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_pop")
  (return-type "none")
  (parameters
    '("guint" "context_id")
  )
)

;; Weird c-name is not used, it is overriden.  See the next entry.
(define-method remove
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_remove_compatibility")
  (return-type "none")
  (parameters
    '("guint" "context_id")
    '("guint" "message_id")
  )
  (deprecated "use gtk.Statusbar.remove_message")
)

;; Renamed because it hides gtk.Container.remove, see bug #564587.
(define-method remove_message
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_remove")
  (return-type "none")
  (parameters
    '("guint" "context_id")
    '("guint" "message_id")
  )
)

(define-method set_has_resize_grip
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_set_has_resize_grip")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_has_resize_grip
  (of-object "GtkStatusbar")
  (c-name "gtk_statusbar_get_has_resize_grip")
  (return-type "gboolean")
)

(define-virtual text_pushed
  (of-object "GtkStatusbar")
  (return-type "none")
  (parameters
    '("guint" "context_id")
    '("const-gchar*" "text")
  )
)
(define-virtual text_popped
  (of-object "GtkStatusbar")
  (return-type "none")
  (parameters
    '("guint" "context_id")
    '("const-gchar*" "text")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkstock.h

(define-function stock_add
  (c-name "gtk_stock_add")
  (return-type "none")
  (parameters
    '("const-GtkStockItem*" "items")
    '("guint" "n_items")
  )
)

(define-function stock_add_static
  (c-name "gtk_stock_add_static")
  (return-type "none")
  (parameters
    '("const-GtkStockItem*" "items")
    '("guint" "n_items")
  )
)

(define-function stock_lookup
  (c-name "gtk_stock_lookup")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkStockItem*" "item")
  )
)

(define-function stock_list_ids
  (c-name "gtk_stock_list_ids")
  (return-type "GSList*")
)

(define-method copy
  (of-object "GtkStockItem")
  (c-name "gtk_stock_item_copy")
  (return-type "GtkStockItem*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkStockItem")
  (c-name "gtk_stock_item_free")
  (return-type "none")
)

(define-function stock_set_translate_func
  (c-name "gtk_stock_set_translate_func")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
    '("GtkTranslateFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "notify")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkstyle.h

(define-function gtk_style_get_type
  (c-name "gtk_style_get_type")
  (return-type "GType")
)

(define-function gtk_style_new
  (c-name "gtk_style_new")
  (is-constructor-of "GtkStyle")
  (return-type "GtkStyle*")
)

(define-method copy
  (of-object "GtkStyle")
  (c-name "gtk_style_copy")
  (return-type "GtkStyle*")
  (caller-owns-return #t)
)

(define-method attach
  (of-object "GtkStyle")
  (c-name "gtk_style_attach")
  (return-type "GtkStyle*")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method detach
  (of-object "GtkStyle")
  (c-name "gtk_style_detach")
  (return-type "none")
)

(define-method ref
  (of-object "GtkStyle")
  (c-name "gtk_style_ref")
  (return-type "GtkStyle*")
  (deprecated "")
)

(define-method unref
  (of-object "GtkStyle")
  (c-name "gtk_style_unref")
  (return-type "none")
  (deprecated "")
)

(define-method get_font
  (of-object "GtkStyle")
  (c-name "gtk_style_get_font")
  (return-type "GdkFont*")
  (deprecated "")
)

(define-method set_font
  (of-object "GtkStyle")
  (c-name "gtk_style_set_font")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
  )
  (deprecated "")
)

(define-method set_background
  (of-object "GtkStyle")
  (c-name "gtk_style_set_background")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
  )
)

(define-method apply_default_background
  (of-object "GtkStyle")
  (c-name "gtk_style_apply_default_background")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gboolean" "set_bg")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method lookup_icon_set
  (of-object "GtkStyle")
  (c-name "gtk_style_lookup_icon_set")
  (return-type "GtkIconSet*")
  (parameters
    '("const-gchar*" "stock_id")
  )
)

(define-method render_icon
  (of-object "GtkStyle")
  (c-name "gtk_style_render_icon")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("const-GtkIconSource*" "source")
    '("GtkTextDirection" "direction")
    '("GtkStateType" "state")
    '("GtkIconSize" "size")
    '("GtkWidget*" "widget" (null-ok) (default "NULL"))
    '("const-gchar*" "detail" (null-ok) (default "NULL"))
  )
)

(define-method draw_hline
  (of-object "GtkStyle")
  (c-name "gtk_draw_hline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gint" "x1")
    '("gint" "x2")
    '("gint" "y")
  )
  (deprecated "")
)

(define-method draw_vline
  (of-object "GtkStyle")
  (c-name "gtk_draw_vline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gint" "y1")
    '("gint" "y2")
    '("gint" "x")
  )
  (deprecated "")
)

(define-method draw_shadow
  (of-object "GtkStyle")
  (c-name "gtk_draw_shadow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_polygon
  (of-object "GtkStyle")
  (c-name "gtk_draw_polygon")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkPoint*" "points")
    '("gint" "npoints")
    '("gboolean" "fill")
  )
  (deprecated "")
)

(define-method draw_arrow
  (of-object "GtkStyle")
  (c-name "gtk_draw_arrow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GtkArrowType" "arrow_type")
    '("gboolean" "fill")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_diamond
  (of-object "GtkStyle")
  (c-name "gtk_draw_diamond")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_box
  (of-object "GtkStyle")
  (c-name "gtk_draw_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_flat_box
  (of-object "GtkStyle")
  (c-name "gtk_draw_flat_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_check
  (of-object "GtkStyle")
  (c-name "gtk_draw_check")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method draw_option
  (of-object "GtkStyle")
  (c-name "gtk_draw_option")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_tab
  (of-object "GtkStyle")
  (c-name "gtk_draw_tab")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_shadow_gap
  (of-object "GtkStyle")
  (c-name "gtk_draw_shadow_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
  (deprecated "")
)

(define-method draw_box_gap
  (of-object "GtkStyle")
  (c-name "gtk_draw_box_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
  (deprecated "")
)

(define-method draw_extension
  (of-object "GtkStyle")
  (c-name "gtk_draw_extension")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
  )
  (deprecated "")
)

(define-method draw_focus
  (of-object "GtkStyle")
  (c-name "gtk_draw_focus")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method draw_slider
  (of-object "GtkStyle")
  (c-name "gtk_draw_slider")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
  (deprecated "")
)

(define-method draw_handle
  (of-object "GtkStyle")
  (c-name "gtk_draw_handle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
  (deprecated "")
)

(define-method draw_expander
  (of-object "GtkStyle")
  (c-name "gtk_draw_expander")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gint" "x")
    '("gint" "y")
    '("gboolean" "is_open")
  )
  (deprecated "")
)

(define-method draw_layout
  (of-object "GtkStyle")
  (c-name "gtk_draw_layout")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gboolean" "use_text")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")
  )
  (deprecated "")
)

(define-method draw_resize_grip
  (of-object "GtkStyle")
  (c-name "gtk_draw_resize_grip")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkWindowEdge" "edge")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "")
)

(define-method paint_hline
  (of-object "GtkStyle")
  (c-name "gtk_paint_hline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x1")
    '("gint" "x2")
    '("gint" "y")
  )
)

(define-method paint_vline
  (of-object "GtkStyle")
  (c-name "gtk_paint_vline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "y1")
    '("gint" "y2")
    '("gint" "x")
  )
)

(define-method paint_shadow
  (of-object "GtkStyle")
  (c-name "gtk_paint_shadow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_polygon
  (of-object "GtkStyle")
  (c-name "gtk_paint_polygon")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GdkPoint*" "points")
    '("gint" "npoints")
    '("gboolean" "fill")
  )
)

(define-method paint_arrow
  (of-object "GtkStyle")
  (c-name "gtk_paint_arrow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GtkArrowType" "arrow_type")
    '("gboolean" "fill")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_diamond
  (of-object "GtkStyle")
  (c-name "gtk_paint_diamond")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_box
  (of-object "GtkStyle")
  (c-name "gtk_paint_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_flat_box
  (of-object "GtkStyle")
  (c-name "gtk_paint_flat_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_check
  (of-object "GtkStyle")
  (c-name "gtk_paint_check")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_option
  (of-object "GtkStyle")
  (c-name "gtk_paint_option")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_tab
  (of-object "GtkStyle")
  (c-name "gtk_paint_tab")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_shadow_gap
  (of-object "GtkStyle")
  (c-name "gtk_paint_shadow_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
)

(define-method paint_box_gap
  (of-object "GtkStyle")
  (c-name "gtk_paint_box_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
)

(define-method paint_extension
  (of-object "GtkStyle")
  (c-name "gtk_paint_extension")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
  )
)

(define-method paint_focus
  (of-object "GtkStyle")
  (c-name "gtk_paint_focus")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method paint_slider
  (of-object "GtkStyle")
  (c-name "gtk_paint_slider")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
)

(define-method paint_handle
  (of-object "GtkStyle")
  (c-name "gtk_paint_handle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
)

(define-method paint_expander
  (of-object "GtkStyle")
  (c-name "gtk_paint_expander")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("GtkExpanderStyle" "expander_style")
  )
)

(define-method paint_layout
  (of-object "GtkStyle")
  (c-name "gtk_paint_layout")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gboolean" "use_text")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")
  )
)

(define-method paint_resize_grip
  (of-object "GtkStyle")
  (c-name "gtk_paint_resize_grip")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GdkWindowEdge" "edge")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function gtk_border_new
  (c-name "gtk_border_new")
  (is-constructor-of "GtkBorder")
  (return-type "GtkBorder")
)

(define-function gtk_border_get_type
  (c-name "gtk_border_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "GtkBorder")
  (c-name "gtk_border_copy")
  (return-type "GtkBorder*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkBorder")
  (c-name "gtk_border_free")
  (return-type "none")
)

(define-method apply_default_pixmap
  (of-object "GtkStyle")
  (c-name "gtk_style_apply_default_pixmap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gboolean" "set_bg")
    '("GdkRectangle*" "area")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "use GtkStyle.apply_default_background")
)

(define-method draw_string
  (of-object "GtkStyle")
  (c-name "gtk_draw_string")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "string")
  )
  (deprecated "")
)

(define-method paint_string
  (of-object "GtkStyle")
  (c-name "gtk_paint_string")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "string")
  )
  (deprecated "")
)

(define-function draw_insertion_cursor
  (c-name "gtk_draw_insertion_cursor")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GdkDrawable*" "drawable")
    '("GdkRectangle*" "area" (null-ok))
    '("GdkRectangle*" "location")
    '("gboolean" "is_primary")
    '("GtkTextDirection" "direction")
    '("gboolean" "draw_arrow")
  )
)

(define-virtual realize
  (of-object "GtkStyle")
  (return-type "none")
)
(define-virtual unrealize
  (of-object "GtkStyle")
  (return-type "none")
)
(define-virtual copy
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GtkStyle*" "src")
  )
)
(define-virtual clone
  (of-object "GtkStyle")
  (return-type "GtkStyle*")
)

(define-virtual init_from_rc
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GtkRcStyle*" "rc_style")
  )
)
(define-virtual set_background
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
  )
)
(define-virtual render_icon
  (of-object "GtkStyle")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-GtkIconSource*" "source")
    '("GtkTextDirection" "direction")
    '("GtkStateType" "state")
    '("GtkIconSize" "size")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
  )
)

(define-virtual draw_hline
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x1")
    '("gint" "x2")
    '("gint" "y")
  )
)
(define-virtual draw_vline
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "y1_")
    '("gint" "y2_")
    '("gint" "x")
  )
)
(define-virtual draw_shadow
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_polygon
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("GdkPoint*" "point")
    '("gint" "npoints")
    '("gboolean" "fill")
  )
)
(define-virtual draw_arrow
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("GtkArrowType" "arrow_type")
    '("gboolean" "fill")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_diamond
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_string
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "string")
  )
)
(define-virtual draw_box
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_flat_box
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_check
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_option
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_tab
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_shadow_gap
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
)
(define-virtual draw_box_gap
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")
  )
)
(define-virtual draw_extension
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
  )
)
(define-virtual draw_focus
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)
(define-virtual draw_slider
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
)
(define-virtual draw_handle
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")
  )
)
(define-virtual draw_expander
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("GtkExpanderStyle" "expander_style")
  )
)
(define-virtual draw_layout
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gboolean" "use_text")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")
  )
)
(define-virtual draw_resize_grip
  (of-object "GtkStyle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area")
    '("GtkWidget*" "widget")
    '("const-gchar*" "detail")
    '("GdkWindowEdge" "edge")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktable.h

(define-function gtk_table_get_type
  (c-name "gtk_table_get_type")
  (return-type "GType")
)

(define-method resize
  (of-object "GtkTable")
  (c-name "gtk_table_resize")
  (return-type "none")
  (parameters
    '("guint" "rows")
    '("guint" "columns")
  )
)

(define-method attach
  (of-object "GtkTable")
  (c-name "gtk_table_attach")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("guint" "left_attach")
    '("guint" "right_attach")
    '("guint" "top_attach")
    '("guint" "bottom_attach")
    '("GtkAttachOptions" "xoptions" (default "GTK_EXPAND|GTK_FILL"))
    '("GtkAttachOptions" "yoptions" (default "GTK_EXPAND|GTK_FILL"))
    '("guint" "xpadding" (default "0"))
    '("guint" "ypadding" (default "0"))
  )
)

(define-method attach_defaults
  (of-object "GtkTable")
  (c-name "gtk_table_attach_defaults")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("guint" "left_attach")
    '("guint" "right_attach")
    '("guint" "top_attach")
    '("guint" "bottom_attach")
  )
  (deprecated "use attach instead")
)

(define-method set_row_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_set_row_spacing")
  (return-type "none")
  (parameters
    '("guint" "row")
    '("guint" "spacing")
  )
)

(define-method get_row_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_get_row_spacing")
  (return-type "guint")
  (parameters
    '("guint" "row")
  )
)

(define-method set_col_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_set_col_spacing")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("guint" "spacing")
  )
)

(define-method get_col_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_get_col_spacing")
  (return-type "guint")
  (parameters
    '("guint" "column")
  )
)

(define-method set_row_spacings
  (of-object "GtkTable")
  (c-name "gtk_table_set_row_spacings")
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_default_row_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_get_default_row_spacing")
  (return-type "guint")
)

(define-method set_col_spacings
  (of-object "GtkTable")
  (c-name "gtk_table_set_col_spacings")
  (return-type "none")
  (parameters
    '("guint" "spacing")
  )
)

(define-method get_default_col_spacing
  (of-object "GtkTable")
  (c-name "gtk_table_get_default_col_spacing")
  (return-type "guint")
)

(define-method set_homogeneous
  (of-object "GtkTable")
  (c-name "gtk_table_set_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "GtkTable")
  (c-name "gtk_table_get_homogeneous")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktearoffmenuitem.h

(define-function gtk_tearoff_menu_item_get_type
  (c-name "gtk_tearoff_menu_item_get_type")
  (return-type "GType")
)

(define-function gtk_tearoff_menu_item_new
  (c-name "gtk_tearoff_menu_item_new")
  (is-constructor-of "GtkTearoffMenuItem")
  (return-type "GtkWidget*")
)


(define-function text_get_type
  (c-name "gtk_text_get_type")
  (return-type "GtkType")
)

(define-function text_new
  (c-name "gtk_text_new")
  (is-constructor-of "GtkText")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*" "hadj")
    '("GtkAdjustment*" "vadj")
  )
)

(define-method set_editable
  (of-object "GtkText")
  (c-name "gtk_text_set_editable")
  (return-type "none")
  (parameters
    '("gboolean" "editable")
  )
)

(define-method set_word_wrap
  (of-object "GtkText")
  (c-name "gtk_text_set_word_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "word_wrap")
  )
)

(define-method set_line_wrap
  (of-object "GtkText")
  (c-name "gtk_text_set_line_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "line_wrap")
  )
)

(define-method set_adjustments
  (of-object "GtkText")
  (c-name "gtk_text_set_adjustments")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadj")
    '("GtkAdjustment*" "vadj")
  )
)

(define-method set_point
  (of-object "GtkText")
  (c-name "gtk_text_set_point")
  (return-type "none")
  (parameters
    '("guint" "index")
  )
)

(define-method get_point
  (of-object "GtkText")
  (c-name "gtk_text_get_point")
  (return-type "guint")
)

(define-method get_length
  (of-object "GtkText")
  (c-name "gtk_text_get_length")
  (return-type "guint")
)

(define-method freeze
  (of-object "GtkText")
  (c-name "gtk_text_freeze")
  (return-type "none")
)

(define-method thaw
  (of-object "GtkText")
  (c-name "gtk_text_thaw")
  (return-type "none")
)

(define-method insert
  (of-object "GtkText")
  (c-name "gtk_text_insert")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("const-GdkColor*" "fore")
    '("const-GdkColor*" "back")
    '("const-char*" "chars")
    '("gint" "length")
  )
)

(define-method backward_delete
  (of-object "GtkText")
  (c-name "gtk_text_backward_delete")
  (return-type "gboolean")
  (parameters
    '("guint" "nchars")
  )
)

(define-method forward_delete
  (of-object "GtkText")
  (c-name "gtk_text_forward_delete")
  (return-type "gboolean")
  (parameters
    '("guint" "nchars")
  )
)

(define-virtual set_scroll_adjustments
  (of-object "GtkText")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextbuffer.h

(define-function gtk_text_buffer_get_type
  (c-name "gtk_text_buffer_get_type")
  (return-type "GType")
)

(define-method get_line_count
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_line_count")
  (return-type "gint")
)

(define-method get_char_count
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_char_count")
  (return-type "gint")
)

(define-method get_tag_table
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_tag_table")
  (return-type "GtkTextTagTable*")
)

(define-method set_text
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len")
  )
)

(define-method insert
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "text")
    '("gint" "len" (default "-1"))
  )
)

(define-method insert_at_cursor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_at_cursor")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len" (default "-1"))    
  )
)

(define-method insert_interactive
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_interactive")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "text")
    '("gint" "len")
    '("gboolean" "default_editable")
  )
)

(define-method insert_interactive_at_cursor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_interactive_at_cursor")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "text")
    '("gint" "len")
    '("gboolean" "default_editable")
  )
)

(define-method insert_range
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_range")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method insert_range_interactive
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_range_interactive")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gboolean" "default_editable")
  )
)

(define-method insert_with_tags
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_with_tags")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "text")
    '("gint" "len")
    '("GtkTextTag*" "first_tag")
  )
  (varargs #t)
)

(define-method insert_with_tags_by_name
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_with_tags_by_name")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "text")
    '("gint" "len")
    '("const-gchar*" "first_tag_name")
  )
  (varargs #t)
)

(define-method delete
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_delete")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
  )
)

(define-method delete_interactive
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_delete_interactive")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "start_iter")
    '("GtkTextIter*" "end_iter")
    '("gboolean" "default_editable")
  )
)

(define-method get_text
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_text")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gboolean" "include_hidden_chars" (default "TRUE"))
  )
)

(define-method get_slice
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_slice")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gboolean" "include_hidden_chars" (default "TRUE"))
  )
)

(define-method insert_pixbuf
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_pixbuf")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-method insert_child_anchor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_insert_child_anchor")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GtkTextChildAnchor*" "anchor")
  )
)

(define-method create_child_anchor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_create_child_anchor")
  (return-type "GtkTextChildAnchor*")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method create_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_create_mark")
  (return-type "GtkTextMark*")
  (parameters
    '("const-gchar*" "mark_name" (null-ok))
    '("const-GtkTextIter*" "where")
    '("gboolean" "left_gravity" (default "FALSE"))
  )
)

(define-method move_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_move_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
    '("const-GtkTextIter*" "where")
  )
)

(define-method delete_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_delete_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
  )
)

(define-method get_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_mark")
  (return-type "GtkTextMark*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method move_mark_by_name
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_move_mark_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GtkTextIter*" "where")
  )
)

(define-method delete_mark_by_name
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_delete_mark_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_insert
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_insert")
  (return-type "GtkTextMark*")
)

(define-method get_selection_bound
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_selection_bound")
  (return-type "GtkTextMark*")
)

(define-method place_cursor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_place_cursor")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "where")
  )
)

(define-method select_range
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_select_range")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "ins")
    '("const-GtkTextIter*" "bound")
  )
)

(define-method apply_tag
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_apply_tag")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method remove_tag
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_remove_tag")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method apply_tag_by_name
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_apply_tag_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method remove_tag_by_name
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_remove_tag_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method remove_all_tags
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_remove_all_tags")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method create_tag
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_create_tag")
  (return-type "GtkTextTag*")
  (parameters
    '("const-gchar*" "tag_name")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method get_iter_at_line_offset
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_line_offset")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "line_number")
    '("gint" "char_offset")
  )
)

(define-method get_iter_at_line_index
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_line_index")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "line_number")
    '("gint" "byte_index")
  )
)

(define-method get_iter_at_offset
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_offset")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "char_offset")
  )
)

(define-method get_iter_at_line
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_line")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "line_number")
  )
)

(define-method get_start_iter
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_start_iter")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method get_end_iter
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_end_iter")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method get_bounds
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_bounds")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
  )
)

(define-method get_iter_at_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_mark")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GtkTextMark*" "mark")
  )
)

(define-method get_iter_at_child_anchor
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_iter_at_child_anchor")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GtkTextChildAnchor*" "anchor")
  )
)

(define-method get_modified
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_modified")
  (return-type "gboolean")
)

(define-method set_modified
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_set_modified")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method add_selection_clipboard
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_add_selection_clipboard")
  (return-type "none")
  (parameters
    '("GtkClipboard*" "clipboard")
  )
)

(define-method remove_selection_clipboard
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_remove_selection_clipboard")
  (return-type "none")
  (parameters
    '("GtkClipboard*" "clipboard")
  )
)

(define-method cut_clipboard
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_cut_clipboard")
  (return-type "none")
  (parameters
    '("GtkClipboard*" "clipboard")
    '("gboolean" "default_editable")
  )
)

(define-method copy_clipboard
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_copy_clipboard")
  (return-type "none")
  (parameters
    '("GtkClipboard*" "clipboard")
  )
)

(define-method paste_clipboard
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_paste_clipboard")
  (return-type "none")
  (parameters
    '("GtkClipboard*" "clipboard")
    '("GtkTextIter*" "override_location" (null-ok))
    '("gboolean" "default_editable")
  )
)

(define-method get_selection_bounds
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_selection_bounds")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
  )
)

(define-method delete_selection
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_delete_selection")
  (return-type "gboolean")
  (parameters
    '("gboolean" "interactive")
    '("gboolean" "default_editable")
  )
)

(define-method begin_user_action
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_begin_user_action")
  (return-type "none")
)

(define-method end_user_action
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_end_user_action")
  (return-type "none")
)

(define-virtual insert_text
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "pos")
    '("const-gchar*" "text")
    '("gint" "length")
  )
)
(define-virtual insert_pixbuf
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "pos")
    '("GdkPixbuf*" "pixbuf")
  )
)
(define-virtual insert_child_anchor
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "pos")
    '("GtkTextChildAnchor*" "anchor")
  )
)
(define-virtual delete_range
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
  )
)
(define-virtual changed
  (of-object "GtkTextBuffer")
  (return-type "none")
)
(define-virtual modified_changed
  (of-object "GtkTextBuffer")
  (return-type "none")
)
(define-virtual mark_set
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "location")
    '("GtkTextMark*" "mark")
  )
)
(define-virtual mark_deleted
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
  )
)
(define-virtual apply_tag
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
    '("const-GtkTextIter*" "start_char")
    '("const-GtkTextIter*" "end_char")
  )
)
(define-virtual remove_tag
  (of-object "GtkTextBuffer")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
    '("const-GtkTextIter*" "start_char")
    '("const-GtkTextIter*" "end_char")
  )
)
(define-virtual begin_user_action
  (of-object "GtkTextBuffer")
  (return-type "none")
)
(define-virtual end_user_action
  (of-object "GtkTextBuffer")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextchild.h

(define-function gtk_text_child_anchor_get_type
  (c-name "gtk_text_child_anchor_get_type")
  (return-type "GType")
)

(define-function gtk_text_child_anchor_new
  (c-name "gtk_text_child_anchor_new")
  (is-constructor-of "GtkTextChildAnchor")
  (return-type "GtkTextChildAnchor*")
)

(define-method get_widgets
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_get_widgets")
  (return-type "GList*")
)

(define-method get_deleted
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_get_deleted")
  (return-type "gboolean")
)

(define-method backspace
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_backspace")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gboolean" "interactive")
    '("gboolean" "default_editable")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextdisplay.h

(define-method draw
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_draw")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GdkDrawable*" "drawable")
    '("GdkGC*" "cursor_gc")
    '("gint" "x_offset")
    '("gint" "y_offset")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GList**" "widgets")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextiter.h

(define-method get_buffer
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_buffer")
  (return-type "GtkTextBuffer*")
)

(define-method copy
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_copy")
  (return-type "GtkTextIter*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_free")
  (return-type "none")
)

(define-function gtk_text_iter_get_type
  (c-name "gtk_text_iter_get_type")
  (return-type "GType")
)

(define-method get_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_offset")
  (return-type "gint")
)

(define-method get_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_line")
  (return-type "gint")
)

(define-method get_line_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_line_offset")
  (return-type "gint")
)

(define-method get_line_index
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_line_index")
  (return-type "gint")
)

(define-method get_visible_line_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_visible_line_offset")
  (return-type "gint")
)

(define-method get_visible_line_index
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_visible_line_index")
  (return-type "gint")
)

(define-method get_char
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_char")
  (return-type "gunichar")
)

(define-method get_slice
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_slice")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "end")
  )
)

(define-method get_text
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_text")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "end")
  )
)

(define-method get_visible_slice
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_visible_slice")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "end")
  )
)

(define-method get_visible_text
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_visible_text")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "end")
  )
)

(define-method get_pixbuf
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_marks
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_marks")
  (return-type "GSList*")
)

(define-method get_child_anchor
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_child_anchor")
  (return-type "GtkTextChildAnchor*")
)

(define-method get_toggled_tags
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_toggled_tags")
  (return-type "GSList*")
  (parameters
    '("gboolean" "toggled_on")
  )
)

(define-method begins_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_begins_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))
  )
)

(define-method ends_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_ends_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))
  )
)

(define-method toggles_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_toggles_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))
  )
)

(define-method has_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_has_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag")
  )
)

(define-method get_tags
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_tags")
  (return-type "GSList*")
)

(define-method editable
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_editable")
  (return-type "gboolean")
  (parameters
    '("gboolean" "default_setting")
  )
)

(define-method can_insert
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_can_insert")
  (return-type "gboolean")
  (parameters
    '("gboolean" "default_editability")
  )
)

(define-method starts_word
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_starts_word")
  (return-type "gboolean")
)

(define-method ends_word
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_ends_word")
  (return-type "gboolean")
)

(define-method inside_word
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_inside_word")
  (return-type "gboolean")
)

(define-method starts_sentence
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_starts_sentence")
  (return-type "gboolean")
)

(define-method ends_sentence
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_ends_sentence")
  (return-type "gboolean")
)

(define-method inside_sentence
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_inside_sentence")
  (return-type "gboolean")
)

(define-method starts_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_starts_line")
  (return-type "gboolean")
)

(define-method ends_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_ends_line")
  (return-type "gboolean")
)

(define-method is_cursor_position
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_is_cursor_position")
  (return-type "gboolean")
)

(define-method get_chars_in_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_chars_in_line")
  (return-type "gint")
)

(define-method get_bytes_in_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_bytes_in_line")
  (return-type "gint")
)

(define-method get_attributes
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_attributes")
  (return-type "gboolean")
  (parameters
    '("GtkTextAttributes*" "values")
  )
)

(define-method get_language
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_language")
  (return-type "PangoLanguage*")
)

(define-method is_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_is_end")
  (return-type "gboolean")
)

(define-method is_start
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_is_start")
  (return-type "gboolean")
)

(define-method forward_char
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_char")
  (return-type "gboolean")
)

(define-method backward_char
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_char")
  (return-type "gboolean")
)

(define-method forward_chars
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_chars")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_chars
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_chars")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_line")
  (return-type "gboolean")
)

(define-method backward_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_line")
  (return-type "gboolean")
)

(define-method forward_lines
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_lines")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_lines
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_lines")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_word_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_word_end")
  (return-type "gboolean")
)

(define-method backward_word_start
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_word_start")
  (return-type "gboolean")
)

(define-method forward_word_ends
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_word_ends")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_word_starts
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_word_starts")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_visible_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_line")
  (return-type "gboolean")
)

(define-method backward_visible_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_line")
  (return-type "gboolean")
)

(define-method forward_visible_lines
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_lines")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_visible_lines
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_lines")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_visible_word_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_word_end")
  (return-type "gboolean")
)

(define-method backward_visible_word_start
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_word_start")
  (return-type "gboolean")
)

(define-method forward_visible_word_ends
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_word_ends")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_visible_word_starts
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_word_starts")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_sentence_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_sentence_end")
  (return-type "gboolean")
)

(define-method backward_sentence_start
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_sentence_start")
  (return-type "gboolean")
)

(define-method forward_sentence_ends
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_sentence_ends")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_sentence_starts
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_sentence_starts")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_cursor_position
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_cursor_position")
  (return-type "gboolean")
)

(define-method backward_cursor_position
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_cursor_position")
  (return-type "gboolean")
)

(define-method forward_cursor_positions
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_cursor_positions")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_cursor_positions
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_cursor_positions")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method forward_visible_cursor_position
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_cursor_position")
  (return-type "gboolean")
)

(define-method backward_visible_cursor_position
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_cursor_position")
  (return-type "gboolean")
)

(define-method forward_visible_cursor_positions
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_visible_cursor_positions")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method backward_visible_cursor_positions
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_visible_cursor_positions")
  (return-type "gboolean")
  (parameters
    '("gint" "count")
  )
)

(define-method set_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_offset")
  (return-type "none")
  (parameters
    '("gint" "char_offset")
  )
)

(define-method set_line
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_line")
  (return-type "none")
  (parameters
    '("gint" "line_number")
  )
)

(define-method set_line_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_line_offset")
  (return-type "none")
  (parameters
    '("gint" "char_on_line")
  )
)

(define-method set_line_index
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_line_index")
  (return-type "none")
  (parameters
    '("gint" "byte_on_line")
  )
)

(define-method forward_to_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_to_end")
  (return-type "none")
)

(define-method forward_to_line_end
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_to_line_end")
  (return-type "gboolean")
)

(define-method set_visible_line_offset
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_visible_line_offset")
  (return-type "none")
  (parameters
    '("gint" "char_on_line")
  )
)

(define-method set_visible_line_index
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_set_visible_line_index")
  (return-type "none")
  (parameters
    '("gint" "byte_on_line")
  )
)

(define-method forward_to_tag_toggle
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_to_tag_toggle")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok))
  )
)

(define-method backward_to_tag_toggle
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_to_tag_toggle")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok))
  )
)

(define-method forward_find_char
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_find_char")
  (return-type "gboolean")
  (parameters
    '("GtkTextCharPredicate" "pred")
    '("gpointer" "user_data")
    '("const-GtkTextIter*" "limit")
  )
)

(define-method backward_find_char
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_find_char")
  (return-type "gboolean")
  (parameters
    '("GtkTextCharPredicate" "pred")
    '("gpointer" "user_data")
    '("const-GtkTextIter*" "limit")
  )
)

(define-method forward_search
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_search")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
    '("GtkTextSearchFlags" "flags")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit" (null-ok))
  )
)

(define-method backward_search
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_search")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "str")
    '("GtkTextSearchFlags" "flags")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit" (null-ok))
  )
)

(define-method equal
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_equal")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "rhs")
  )
)

(define-method compare
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_compare")
  (return-type "gint")
  (parameters
    '("const-GtkTextIter*" "rhs")
  )
)

(define-method in_range
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_in_range")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method order
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_order")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "second")
  )
)

;; From /usr/include/gtk-2.0/gtk/gtktextlayout.h

(define-function gtk_text_layout_get_type
  (c-name "gtk_text_layout_get_type")
  (return-type "GType")
)

(define-function gtk_text_layout_new
  (c-name "gtk_text_layout_new")
  (is-constructor-of "GtkTextLayout")
  (return-type "GtkTextLayout*")
)

(define-method set_buffer
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_buffer")
  (return-type "none")
  (parameters
    '("GtkTextBuffer*" "buffer" (null-ok))
  )
)

(define-method get_buffer
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_buffer")
  (return-type "GtkTextBuffer*")
)

(define-method set_default_style
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_default_style")
  (return-type "none")
  (parameters
    '("GtkTextAttributes*" "values")
  )
)

(define-method set_contexts
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_contexts")
  (return-type "none")
  (parameters
    '("PangoContext*" "ltr_context")
    '("PangoContext*" "rtl_context")
  )
)

(define-method set_cursor_direction
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_cursor_direction")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "direction")
  )
)

(define-method set_keyboard_direction
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_keyboard_direction")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "keyboard_dir")
  )
)

(define-method default_style_changed
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_default_style_changed")
  (return-type "none")
)

(define-method set_screen_width
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_screen_width")
  (return-type "none")
  (parameters
    '("gint" "width")
  )
)

(define-method set_preedit_string
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_preedit_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "preedit_string")
    '("PangoAttrList*" "preedit_attrs")
    '("gint" "cursor_pos")
  )
)

(define-method set_cursor_visible
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_set_cursor_visible")
  (return-type "none")
  (parameters
    '("gboolean" "cursor_visible")
  )
)

(define-method get_cursor_visible
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_cursor_visible")
  (return-type "gboolean")
)

(define-method get_size
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method get_lines
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_lines")
  (return-type "GSList*")
  (parameters
    '("gint" "top_y")
    '("gint" "bottom_y")
    '("gint*" "first_line_y")
  )
)

(define-method wrap_loop_start
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_wrap_loop_start")
  (return-type "none")
)

(define-method wrap_loop_end
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_wrap_loop_end")
  (return-type "none")
)

(define-method get_line_display
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_line_display")
  (return-type "GtkTextLineDisplay*")
  (parameters
    '("GtkTextLine*" "line")
    '("gboolean" "size_only")
  )
)

(define-method free_line_display
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_free_line_display")
  (return-type "none")
  (parameters
    '("GtkTextLineDisplay*" "display")
  )
)

(define-method get_line_at_y
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_line_at_y")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "target_iter")
    '("gint" "y")
    '("gint*" "line_top")
  )
)

(define-method get_iter_at_pixel
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_iter_at_pixel")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_iter_at_position
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_iter_at_position")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint*" "trailing")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method invalidate
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_invalidate")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-method free_line_data
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_free_line_data")
  (return-type "none")
  (parameters
    '("GtkTextLine*" "line")
    '("GtkTextLineData*" "line_data")
  )
)

(define-method is_valid
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_is_valid")
  (return-type "gboolean")
)

(define-method validate_yrange
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_validate_yrange")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "anchor_line")
    '("gint" "y0_")
    '("gint" "y1_")
  )
)

(define-method validate
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_validate")
  (return-type "none")
  (parameters
    '("gint" "max_pixels")
  )
)

(define-method wrap
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_wrap")
  (return-type "GtkTextLineData*")
  (parameters
    '("GtkTextLine*" "line")
    '("GtkTextLineData*" "line_data")
  )
)

(define-method changed
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_changed")
  (return-type "none")
  (parameters
    '("gint" "y")
    '("gint" "old_height")
    '("gint" "new_height")
  )
)

(define-method get_iter_location
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_iter_location")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("GdkRectangle*" "rect")
  )
)

(define-method get_line_yrange
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_line_yrange")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("gint*" "y")
    '("gint*" "height")
  )
)

(define-method get_cursor_locations
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_cursor_locations")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GdkRectangle*" "strong_pos")
    '("GdkRectangle*" "weak_pos")
  )
)

(define-method clamp_iter_to_vrange
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_clamp_iter_to_vrange")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "top")
    '("gint" "bottom")
  )
)

(define-method move_iter_to_line_end
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_move_iter_to_line_end")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "direction")
  )
)

(define-method move_iter_to_previous_line
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_move_iter_to_previous_line")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method move_iter_to_next_line
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_move_iter_to_next_line")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method move_iter_to_x
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_move_iter_to_x")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "x")
  )
)

(define-method move_iter_visually
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_move_iter_visually")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "count")
  )
)

(define-method iter_starts_line
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_iter_starts_line")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
  )
)

(define-method get_iter_at_line
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_get_iter_at_line")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("GtkTextLine*" "line")
    '("gint" "byte_offset")
  )
)

(define-virtual invalidated
  (of-object "GtkTextLayout")
  (return-type "none")
)

(define-virtual changed
  (of-object "GtkTextLayout")
  (return-type "none")
  (parameters
    '("gint" "y")
    '("gint" "old_height")
    '("gint" "new_height")
  )
)

(define-virtual wrap
  (of-object "GtkTextLayout")
  (return-type "GtkTextLineData*")
  (parameters
    '("GtkTextLine*" "line")
    '("GtkTextLineData*" "line_data")
  )
)

(define-virtual get_log_attrs
  (of-object "GtkTextLayout")
  (return-type "none")
  (parameters
    '("GtkTextLine*" "line")
    '("PangoLogAttr**" "attrs")
    '("gint*" "n_attrs")
  )
)

(define-virtual invalidate
  (of-object "GtkTextLayout")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
  )
)

(define-virtual free_line_data
  (of-object "GtkTextLayout")
  (return-type "none")
  (parameters
    '("GtkTextLine*" "line")
    '("GtkTextLineData*" "line_data")
  )
)

(define-virtual allocate_child
  (of-object "GtkTextLayout")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method register_child
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_register_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkTextLayout*" "layout")
  )
)

(define-method unregister_child
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_unregister_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method queue_resize
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_queue_resize")
  (return-type "none")
  (parameters
    '("GtkTextLayout*" "layout")
  )
)

(define-function gtk_text_anchored_child_set_layout
  (c-name "gtk_text_anchored_child_set_layout")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkTextLayout*" "layout")
  )
)

(define-method spew
  (of-object "GtkTextLayout")
  (c-name "gtk_text_layout_spew")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextmark.h

(define-function gtk_text_mark_get_type
  (c-name "gtk_text_mark_get_type")
  (return-type "GType")
)

(define-method set_visible
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_set_visible")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_visible
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_get_visible")
  (return-type "gboolean")
)

(define-method get_name
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_get_name")
  (return-type "const-gchar*")
)

(define-method get_deleted
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_get_deleted")
  (return-type "gboolean")
)

(define-method get_buffer
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_get_buffer")
  (return-type "GtkTextBuffer*")
)

(define-method get_left_gravity
  (of-object "GtkTextMark")
  (c-name "gtk_text_mark_get_left_gravity")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktexttag.h

(define-function gtk_text_tag_get_type
  (c-name "gtk_text_tag_get_type")
  (return-type "GType")
)

(define-method get_priority
  (of-object "GtkTextTag")
  (c-name "gtk_text_tag_get_priority")
  (return-type "gint")
)

(define-method set_priority
  (of-object "GtkTextTag")
  (c-name "gtk_text_tag_set_priority")
  (return-type "none")
  (parameters
    '("gint" "priority")
  )
)

(define-method event
  (of-object "GtkTextTag")
  (c-name "gtk_text_tag_event")
  (return-type "gboolean")
  (parameters
    '("GObject*" "event_object")
    '("GdkEvent*" "event")
    '("const-GtkTextIter*" "iter")
  )
)

(define-virtual event
  (of-object "GtkTextTag")
  (return-type "gboolean")
  (parameters
    '("GObject*" "event_object")
    '("GdkEvent*" "event")
    '("const-GtkTextIter*" "iter")
  )
)

(define-function gtk_text_attributes_new
  (c-name "gtk_text_attributes_new")
  (is-constructor-of "GtkTextAttributes")
  (return-type "GtkTextAttributes*")
)

(define-method copy
  (of-object "GtkTextAttributes")
  (c-name "gtk_text_attributes_copy")
  (return-type "GtkTextAttributes*")
  (caller-owns-return #t)
)

(define-method copy_values
  (of-object "GtkTextAttributes")
  (c-name "gtk_text_attributes_copy_values")
  (return-type "none")
  (parameters
    '("GtkTextAttributes*" "dest")
  )
)

(define-method unref
  (of-object "GtkTextAttributes")
  (c-name "gtk_text_attributes_unref")
  (return-type "none")
)

(define-method ref
  (of-object "GtkTextAttributes")
  (c-name "gtk_text_attributes_ref")
  (return-type "none")
)

(define-function gtk_text_attributes_get_type
  (c-name "gtk_text_attributes_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktexttagtable.h

(define-function gtk_text_tag_table_get_type
  (c-name "gtk_text_tag_table_get_type")
  (return-type "GType")
)

(define-function gtk_text_tag_table_new
  (c-name "gtk_text_tag_table_new")
  (is-constructor-of "GtkTextTagTable")
  (return-type "GtkTextTagTable*")
)

(define-method add
  (of-object "GtkTextTagTable")
  (c-name "gtk_text_tag_table_add")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
  )
)

(define-method remove
  (of-object "GtkTextTagTable")
  (c-name "gtk_text_tag_table_remove")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
  )
)

(define-method lookup
  (of-object "GtkTextTagTable")
  (c-name "gtk_text_tag_table_lookup")
  (return-type "GtkTextTag*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method foreach
  (of-object "GtkTextTagTable")
  (c-name "gtk_text_tag_table_foreach")
  (return-type "none")
  (parameters
    '("GtkTextTagTableForeach" "func")
    '("gpointer" "data")
  )
)

(define-method get_size
  (of-object "GtkTextTagTable")
  (c-name "gtk_text_tag_table_get_size")
  (return-type "gint")
)

(define-virtual tag_changed
  (of-object "GtkTextTagTable")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
    '("gboolean" "size_changed")
  )
)
(define-virtual tag_added
  (of-object "GtkTextTagTable")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
  )
)
(define-virtual tag_removed
  (of-object "GtkTextTagTable")
  (return-type "none")
  (parameters
    '("GtkTextTag*" "tag")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktextview.h

(define-function gtk_text_view_get_type
  (c-name "gtk_text_view_get_type")
  (return-type "GType")
)

(define-function gtk_text_view_new
  (c-name "gtk_text_view_new")
  (is-constructor-of "GtkTextView")
  (return-type "GtkWidget*")
)


(define-method set_buffer
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_buffer")
  (return-type "none")
  (parameters
    '("GtkTextBuffer*" "buffer" (null-ok))
  )
)

(define-method get_buffer
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_buffer")
  (return-type "GtkTextBuffer*")
)

(define-method scroll_to_iter
  (of-object "GtkTextView")
  (c-name "gtk_text_view_scroll_to_iter")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gdouble" "within_margin")
    '("gboolean" "use_align" (default "FALSE"))
    '("gdouble" "xalign" (default "0.5"))
    '("gdouble" "yalign" (default "0.5"))
  )
)

(define-method scroll_to_mark
  (of-object "GtkTextView")
  (c-name "gtk_text_view_scroll_to_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
    '("gdouble" "within_margin")
    '("gboolean" "use_align" (default "FALSE"))
    '("gdouble" "xalign" (default "0.5"))
    '("gdouble" "yalign" (default "0.5"))
  )
)

(define-method scroll_mark_onscreen
  (of-object "GtkTextView")
  (c-name "gtk_text_view_scroll_mark_onscreen")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
  )
)

(define-method move_mark_onscreen
  (of-object "GtkTextView")
  (c-name "gtk_text_view_move_mark_onscreen")
  (return-type "gboolean")
  (parameters
    '("GtkTextMark*" "mark")
  )
)

(define-method place_cursor_onscreen
  (of-object "GtkTextView")
  (c-name "gtk_text_view_place_cursor_onscreen")
  (return-type "gboolean")
)

(define-method get_visible_rect
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_visible_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "visible_rect")
  )
)

(define-method set_cursor_visible
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_cursor_visible")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_cursor_visible
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_cursor_visible")
  (return-type "gboolean")
)

(define-method get_iter_location
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_iter_location")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("GdkRectangle*" "location")
  )
)

(define-method get_iter_at_location
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_iter_at_location")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_iter_at_position
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_iter_at_position")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint*" "trailing")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_line_yrange
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_line_yrange")
  (return-type "none")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("gint*" "y")
    '("gint*" "height")
  )
)

(define-method get_line_at_y
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_line_at_y")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "target_iter")
    '("gint" "y")
    '("gint*" "line_top")
  )
)

(define-method buffer_to_window_coords
  (of-object "GtkTextView")
  (c-name "gtk_text_view_buffer_to_window_coords")
  (return-type "none")
  (parameters
    '("GtkTextWindowType" "win")
    '("gint" "buffer_x")
    '("gint" "buffer_y")
    '("gint*" "window_x")
    '("gint*" "window_y")
  )
)

(define-method window_to_buffer_coords
  (of-object "GtkTextView")
  (c-name "gtk_text_view_window_to_buffer_coords")
  (return-type "none")
  (parameters
    '("GtkTextWindowType" "win")
    '("gint" "window_x")
    '("gint" "window_y")
    '("gint*" "buffer_x")
    '("gint*" "buffer_y")
  )
)

(define-method get_window
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_window")
  (return-type "GdkWindow*")
  (parameters
    '("GtkTextWindowType" "win")
  )
)

(define-method get_window_type
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_window_type")
  (return-type "GtkTextWindowType")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method set_border_window_size
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_border_window_size")
  (return-type "none")
  (parameters
    '("GtkTextWindowType" "type")
    '("gint" "size")
  )
)

(define-method get_border_window_size
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_border_window_size")
  (return-type "gint")
  (parameters
    '("GtkTextWindowType" "type")
  )
)

(define-method forward_display_line
  (of-object "GtkTextView")
  (c-name "gtk_text_view_forward_display_line")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method backward_display_line
  (of-object "GtkTextView")
  (c-name "gtk_text_view_backward_display_line")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method forward_display_line_end
  (of-object "GtkTextView")
  (c-name "gtk_text_view_forward_display_line_end")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method backward_display_line_start
  (of-object "GtkTextView")
  (c-name "gtk_text_view_backward_display_line_start")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
  )
)

(define-method starts_display_line
  (of-object "GtkTextView")
  (c-name "gtk_text_view_starts_display_line")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
  )
)

(define-method move_visually
  (of-object "GtkTextView")
  (c-name "gtk_text_view_move_visually")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gint" "count")
  )
)

(define-method add_child_at_anchor
  (of-object "GtkTextView")
  (c-name "gtk_text_view_add_child_at_anchor")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkTextChildAnchor*" "anchor")
  )
)

(define-method add_child_in_window
  (of-object "GtkTextView")
  (c-name "gtk_text_view_add_child_in_window")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkTextWindowType" "which_window")
    '("gint" "xpos")
    '("gint" "ypos")
  )
)

(define-method move_child
  (of-object "GtkTextView")
  (c-name "gtk_text_view_move_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gint" "xpos")
    '("gint" "ypos")
  )
)

(define-method set_wrap_mode
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_wrap_mode")
  (return-type "none")
  (parameters
    '("GtkWrapMode" "wrap_mode")
  )
)

(define-method get_wrap_mode
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_wrap_mode")
  (return-type "GtkWrapMode")
)

(define-method set_editable
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_editable")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_editable
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_editable")
  (return-type "gboolean")
)

(define-method set_overwrite
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_overwrite")
  (return-type "none")
  (parameters
    '("gboolean" "overwrite")
  )
)

(define-method get_overwrite
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_overwrite")
  (return-type "gboolean")
)

(define-method set_accepts_tab
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_accepts_tab")
  (return-type "none")
  (parameters
    '("gboolean" "accepts_tab")
  )
)

(define-method get_accepts_tab
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_accepts_tab")
  (return-type "gboolean")
)

(define-method set_pixels_above_lines
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_pixels_above_lines")
  (return-type "none")
  (parameters
    '("gint" "pixels_above_lines")
  )
)

(define-method get_pixels_above_lines
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_pixels_above_lines")
  (return-type "gint")
)

(define-method set_pixels_below_lines
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_pixels_below_lines")
  (return-type "none")
  (parameters
    '("gint" "pixels_below_lines")
  )
)

(define-method get_pixels_below_lines
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_pixels_below_lines")
  (return-type "gint")
)

(define-method set_pixels_inside_wrap
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_pixels_inside_wrap")
  (return-type "none")
  (parameters
    '("gint" "pixels_inside_wrap")
  )
)

(define-method get_pixels_inside_wrap
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_pixels_inside_wrap")
  (return-type "gint")
)

(define-method set_justification
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_justification")
  (return-type "none")
  (parameters
    '("GtkJustification" "justification")
  )
)

(define-method get_justification
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_justification")
  (return-type "GtkJustification")
)

(define-method set_left_margin
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_left_margin")
  (return-type "none")
  (parameters
    '("gint" "left_margin")
  )
)

(define-method get_left_margin
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_left_margin")
  (return-type "gint")
)

(define-method set_right_margin
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_right_margin")
  (return-type "none")
  (parameters
    '("gint" "right_margin")
  )
)

(define-method get_right_margin
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_right_margin")
  (return-type "gint")
)

(define-method set_indent
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_indent")
  (return-type "none")
  (parameters
    '("gint" "indent")
  )
)

(define-method get_indent
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_indent")
  (return-type "gint")
)

(define-method set_tabs
  (of-object "GtkTextView")
  (c-name "gtk_text_view_set_tabs")
  (return-type "none")
  (parameters
    '("PangoTabArray*" "tabs")
  )
)

(define-method get_tabs
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_tabs")
  (return-type "PangoTabArray*")
)

(define-method get_default_attributes
  (of-object "GtkTextView")
  (c-name "gtk_text_view_get_default_attributes")
  (return-type "GtkTextAttributes*")
)

(define-virtual set_scroll_adjustments
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)
(define-virtual populate_popup
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("GtkMenu*" "menu")
  )
)
(define-virtual move_cursor
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("GtkMovementStep" "step")
    '("gint" "count")
    '("gboolean" "extend_selection")
  )
)
(define-virtual page_horizontally
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("gint" "count")
    '("gboolean" "extend_selection")
  )
)
(define-virtual set_anchor
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual insert_at_cursor
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)
(define-virtual delete_from_cursor
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("GtkDeleteType" "type")
    '("gint" "count")
  )
)
(define-virtual backspace
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual cut_clipboard
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual copy_clipboard
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual paste_clipboard
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual toggle_overwrite
  (of-object "GtkTextView")
  (return-type "none")
)
(define-virtual move_focus
  (of-object "GtkTextView")
  (return-type "none")
  (parameters
    '("GtkDirectionType" "direction")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktipsquery.h

(define-function gtk_tips_query_get_type
  (c-name "gtk_tips_query_get_type")
  (return-type "GType")
)

(define-function gtk_tips_query_new
  (c-name "gtk_tips_query_new")
  (is-constructor-of "GtkTipsQuery")
  (return-type "GtkWidget*")
  (deprecated "")
)

(define-method start_query
  (of-object "GtkTipsQuery")
  (c-name "gtk_tips_query_start_query")
  (return-type "none")
  (deprecated "")
)

(define-method stop_query
  (of-object "GtkTipsQuery")
  (c-name "gtk_tips_query_stop_query")
  (return-type "none")
  (deprecated "")
)

(define-method set_caller
  (of-object "GtkTipsQuery")
  (c-name "gtk_tips_query_set_caller")
  (return-type "none")
  (parameters
    '("GtkWidget*" "caller")
  )
  (deprecated "")
)

(define-method set_labels
  (of-object "GtkTipsQuery")
  (c-name "gtk_tips_query_set_labels")
  (return-type "none")
  (parameters
    '("const-gchar*" "label_inactive")
    '("const-gchar*" "label_no_tip")
  )
  (deprecated "")
)

(define-virtual start_query
  (of-object "GtkTipsQuery")
  (return-type "none")
)
(define-virtual stop_query
  (of-object "GtkTipsQuery")
  (return-type "none")
)
(define-virtual widget_entered
  (of-object "GtkTipsQuery")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "tip_text")
    '("const-gchar*" "tip_private")
  )
)
(define-virtual widget_selected
  (of-object "GtkTipsQuery")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "tip_text")
    '("const-gchar*" "tip_private")
    '("GdkEventButton*" "event")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktoggleaction.h

(define-function gtk_toggle_action_get_type
  (c-name "gtk_toggle_action_get_type")
  (return-type "GType")
)

(define-method toggled
  (of-object "GtkToggleAction")
  (c-name "gtk_toggle_action_toggled")
  (return-type "none")
)

(define-method set_active
  (of-object "GtkToggleAction")
  (c-name "gtk_toggle_action_set_active")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
)

(define-method get_active
  (of-object "GtkToggleAction")
  (c-name "gtk_toggle_action_get_active")
  (return-type "gboolean")
)

(define-method set_draw_as_radio
  (of-object "GtkToggleAction")
  (c-name "gtk_toggle_action_set_draw_as_radio")
  (return-type "none")
  (parameters
    '("gboolean" "draw_as_radio")
  )
)

(define-method get_draw_as_radio
  (of-object "GtkToggleAction")
  (c-name "gtk_toggle_action_get_draw_as_radio")
  (return-type "gboolean")
)

(define-virtual toggled
  (of-object "GtkToggleAction")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktogglebutton.h

(define-function gtk_toggle_button_get_type
  (c-name "gtk_toggle_button_get_type")
  (return-type "GType")
)

(define-function gtk_toggle_button_new
  (c-name "gtk_toggle_button_new")
  (is-constructor-of "GtkToggleButton")
  (return-type "GtkWidget*")
)

(define-function gtk_toggle_button_new_with_label
  (c-name "gtk_toggle_button_new_with_label")
  (is-constructor-of "GtkToggleButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-function gtk_toggle_button_new_with_mnemonic
  (c-name "gtk_toggle_button_new_with_mnemonic")
  (is-constructor-of "GtkToggleButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method set_mode
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_set_mode")
  (return-type "none")
  (parameters
    '("gboolean" "draw_indicator")
  )
)

(define-method get_mode
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_get_mode")
  (return-type "gboolean")
)

(define-method set_active
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_set_active")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
)

(define-method get_active
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_get_active")
  (return-type "gboolean")
)

(define-method toggled
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_toggled")
  (return-type "none")
)

(define-method set_inconsistent
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_set_inconsistent")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_inconsistent
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_get_inconsistent")
  (return-type "gboolean")
)

(define-method set_state
  (of-object "GtkToggleButton")
  (c-name "gtk_toggle_button_set_state")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
  (deprecated "use GtkToggleButton.set_active")
)

(define-virtual toggled
  (of-object "GtkToggleButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktoggletoolbutton.h

(define-function gtk_toggle_tool_button_get_type
  (c-name "gtk_toggle_tool_button_get_type")
  (return-type "GType")
)

(define-function gtk_toggle_tool_button_new
  (c-name "gtk_toggle_tool_button_new")
  (is-constructor-of "GtkToggleToolButton")
  (return-type "GtkToolItem*")
)

(define-function toggle_tool_button_new_from_stock
  (c-name "gtk_toggle_tool_button_new_from_stock")
  (return-type "GtkToolItem*")
  (parameters
    '("const-gchar*" "stock_id")
  )
  (caller-owns-return #t)
)

(define-method set_active
  (of-object "GtkToggleToolButton")
  (c-name "gtk_toggle_tool_button_set_active")
  (return-type "none")
  (parameters
    '("gboolean" "is_active")
  )
)

(define-method get_active
  (of-object "GtkToggleToolButton")
  (c-name "gtk_toggle_tool_button_get_active")
  (return-type "gboolean")
)

(define-virtual toggled
  (of-object "GtkToggleToolButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktoolbar.h

(define-function gtk_toolbar_get_type
  (c-name "gtk_toolbar_get_type")
  (return-type "GType")
)

(define-function gtk_toolbar_new
  (c-name "gtk_toolbar_new")
  (is-constructor-of "GtkToolbar")
  (return-type "GtkWidget*")
)

(define-method insert
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert")
  (return-type "none")
  (parameters
    '("GtkToolItem*" "item")
    '("gint" "pos")
  )
)

(define-method get_item_index
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_item_index")
  (return-type "gint")
  (parameters
    '("GtkToolItem*" "item")
  )
)

(define-method get_n_items
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_n_items")
  (return-type "gint")
)

(define-method get_nth_item
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_nth_item")
  (return-type "GtkToolItem*")
  (parameters
    '("gint" "n")
  )
)

(define-method get_drop_index
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_drop_index")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_drop_highlight_item
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_drop_highlight_item")
  (return-type "none")
  (parameters
    '("GtkToolItem*" "tool_item" (null-ok))
    '("gint" "index")
  )
)

(define-method set_show_arrow
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_show_arrow")
  (return-type "none")
  (parameters
    '("gboolean" "show_arrow")
  )
)

(define-method get_show_arrow
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_show_arrow")
  (return-type "gboolean")
)

(define-method get_relief_style
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_relief_style")
  (return-type "GtkReliefStyle")
)

(define-method append_item
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_append_item")
  (return-type "GtkWidget*")
  (parameters
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data" (null-ok) (default "NULL"))
  )
  (deprecated "")
)

(define-method prepend_item
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_prepend_item")
  (return-type "GtkWidget*")
  (parameters
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
  )
  (deprecated "")
)

(define-method insert_item
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert_item")
  (return-type "GtkWidget*")
  (parameters
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
    '("gint" "position")
  )
  (deprecated "")
)

(define-method insert_stock
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert_stock")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "stock_id")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
    '("gint" "position")
  )
  (deprecated "")
)

(define-method append_space
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_append_space")
  (return-type "none")
  (deprecated "")
)

(define-method prepend_space
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_prepend_space")
  (return-type "none")
  (deprecated "")
)

(define-method insert_space
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert_space")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
  (deprecated "")
)

(define-method remove_space
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_remove_space")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
  (deprecated "")
)

(define-method append_element
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_append_element")
  (return-type "GtkWidget*")
  (parameters
    '("GtkToolbarChildType" "type")
    '("GtkWidget*" "widget")
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
  )
  (deprecated "")
)

(define-method prepend_element
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_prepend_element")
  (return-type "GtkWidget*")
  (parameters
    '("GtkToolbarChildType" "type")
    '("GtkWidget*" "widget")
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
  )
  (deprecated "")
)

(define-method insert_element
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert_element")
  (return-type "GtkWidget*")
  (parameters
    '("GtkToolbarChildType" "type")
    '("GtkWidget*" "widget")
    '("const-char*" "text")
    '("const-char*" "tooltip_text")
    '("const-char*" "tooltip_private_text")
    '("GtkWidget*" "icon")
    '("GtkSignalFunc" "callback")
    '("gpointer" "user_data")
    '("gint" "position")
  )
  (deprecated "")
)

(define-method append_widget
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_append_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-char*" "tooltip_text" (null-ok))
    '("const-char*" "tooltip_private_text" (null-ok))
  )
  (deprecated "")
)

(define-method prepend_widget
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_prepend_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-char*" "tooltip_text" (null-ok))
    '("const-char*" "tooltip_private_text" (null-ok))
  )
  (deprecated "")
)

(define-method insert_widget
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_insert_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-char*" "tooltip_text" (null-ok))
    '("const-char*" "tooltip_private_text" (null-ok))
    '("gint" "position")
  )
  (deprecated "")
)

(define-method set_orientation
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_orientation")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)

(define-method set_style
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_style")
  (return-type "none")
  (parameters
    '("GtkToolbarStyle" "style")
  )
)

(define-method set_icon_size
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_icon_size")
  (return-type "none")
  (parameters
    '("GtkIconSize" "icon_size")
  )
)

(define-method set_tooltips
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_set_tooltips")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method unset_style
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_unset_style")
  (return-type "none")
)

(define-method unset_icon_size
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_unset_icon_size")
  (return-type "none")
)

(define-method get_orientation
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_orientation")
  (return-type "GtkOrientation")
)

(define-method get_style
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_style")
  (return-type "GtkToolbarStyle")
)

(define-method get_icon_size
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_icon_size")
  (return-type "GtkIconSize")
)

(define-method get_tooltips
  (of-object "GtkToolbar")
  (c-name "gtk_toolbar_get_tooltips")
  (return-type "gboolean")
)

(define-virtual orientation_changed
  (of-object "GtkToolbar")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)
(define-virtual style_changed
  (of-object "GtkToolbar")
  (return-type "none")
  (parameters
    '("GtkToolbarStyle" "style")
  )
)
(define-virtual popup_context_menu
  (of-object "GtkToolbar")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "button_number")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktoolbutton.h

(define-function gtk_tool_button_get_type
  (c-name "gtk_tool_button_get_type")
  (return-type "GType")
)

(define-function gtk_tool_button_new
  (c-name "gtk_tool_button_new")
  (is-constructor-of "GtkToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkWidget*" "icon_widget" (null-ok) (default "NULL"))
    '("const-gchar*" "label" (null-ok) (default "NULL"))
  )
)

(define-function tool_button_new_from_stock
  (c-name "gtk_tool_button_new_from_stock")
  (return-type "GtkToolItem*")
  (parameters
    '("const-gchar*" "stock_id")
  )
  (caller-owns-return #t)
)

(define-method set_label
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label" (null-ok))
  )
)

(define-method get_label
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_label")
  (return-type "const-gchar*")
)

(define-method set_use_underline
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_use_underline")
  (return-type "none")
  (parameters
    '("gboolean" "use_underline")
  )
)

(define-method get_use_underline
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_use_underline")
  (return-type "gboolean")
)

(define-method set_stock_id
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_stock_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id" (null-ok))
  )
)

(define-method set_icon_name
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name" (null-ok))
  )
)

(define-method get_icon_name
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_icon_name")
  (return-type "const-gchar*")
)

(define-method get_stock_id
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_stock_id")
  (return-type "const-gchar*")
)

(define-method set_icon_widget
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_icon_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "icon_widget" (null-ok))
  )
)

(define-method get_icon_widget
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_icon_widget")
  (return-type "GtkWidget*")
)

(define-method set_label_widget
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_set_label_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "label_widget" (null-ok))
  )
)

(define-method get_label_widget
  (of-object "GtkToolButton")
  (c-name "gtk_tool_button_get_label_widget")
  (return-type "GtkWidget*")
)

(define-virtual clicked
  (of-object "GtkToolButton")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktoolitem.h

(define-function gtk_tool_item_get_type
  (c-name "gtk_tool_item_get_type")
  (return-type "GType")
)

(define-function gtk_tool_item_new
  (c-name "gtk_tool_item_new")
  (is-constructor-of "GtkToolItem")
  (return-type "GtkToolItem*")
)

(define-method set_homogeneous
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_homogeneous")
  (return-type "none")
  (parameters
    '("gboolean" "homogeneous")
  )
)

(define-method get_homogeneous
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_homogeneous")
  (return-type "gboolean")
)

(define-method set_expand
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-method get_expand
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_expand")
  (return-type "gboolean")
)

(define-method set_tooltip
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_tooltip")
  (return-type "none")
  (parameters
   ("GtkTooltips*" "tooltips")
   ("const-gchar*" "tip_text" (null-ok) (default "NULL"))
   ("const-gchar*" "tip_private" (null-ok) (default "NULL"))
  )
)

(define-method set_use_drag_window
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_use_drag_window")
  (return-type "none")
  (parameters
    '("gboolean" "use_drag_window")
  )
)

(define-method get_use_drag_window
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_use_drag_window")
  (return-type "gboolean")
)

(define-method set_visible_horizontal
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_visible_horizontal")
  (return-type "none")
  (parameters
    '("gboolean" "visible_horizontal")
  )
)

(define-method get_visible_horizontal
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_visible_horizontal")
  (return-type "gboolean")
)

(define-method set_visible_vertical
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_visible_vertical")
  (return-type "none")
  (parameters
    '("gboolean" "visible_vertical")
  )
)

(define-method get_visible_vertical
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_visible_vertical")
  (return-type "gboolean")
)

(define-method set_is_important
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_is_important")
  (return-type "none")
  (parameters
    '("gboolean" "is_important")
  )
)

(define-method get_is_important
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_is_important")
  (return-type "gboolean")
)

(define-method get_icon_size
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_icon_size")
  (return-type "GtkIconSize")
)

(define-method get_orientation
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_orientation")
  (return-type "GtkOrientation")
)

(define-method get_toolbar_style
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_toolbar_style")
  (return-type "GtkToolbarStyle")
)

(define-method get_relief_style
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_relief_style")
  (return-type "GtkReliefStyle")
)

(define-method retrieve_proxy_menu_item
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_retrieve_proxy_menu_item")
  (return-type "GtkWidget*")
)

(define-method set_proxy_menu_item
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_proxy_menu_item")
  (return-type "none")
  (parameters
   '("const-gchar*" "menu_item_id")
   '("GtkWidget*" "menu_item" (null-ok))
   )
)

(define-method get_proxy_menu_item
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_get_proxy_menu_item")
  (return-type "GtkWidget*")
  (parameters
   '("const-gchar*" "menu_item_id")
   )
)

(define-method rebuild_menu
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_rebuild_menu")
  (return-type "none")
)

(define-virtual create_menu_proxy
  (of-object "GtkToolItem")
  (return-type "gboolean")
)
(define-virtual toolbar_reconfigured
  (of-object "GtkToolItem")
  (return-type "none")
)
(define-virtual set_tooltip
  (of-object "GtkToolItem")
  (return-type "gboolean")
  (parameters
    '("GtkTooltips*" "tooltips")
    '("const-gchar*" "tip_text")
    '("const-gchar*" "tip_private")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtktooltips.h

(define-function gtk_tooltips_get_type
  (c-name "gtk_tooltips_get_type")
  (return-type "GType")
)

(define-function gtk_tooltips_new
  (c-name "gtk_tooltips_new")
  (deprecated "Use the new widget gtk.Tooltip")
  (is-constructor-of "GtkTooltips")
  (return-type "GtkTooltips*")
)

(define-method enable
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_enable")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "none")
)

(define-method disable
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_disable")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "none")
)

(define-method set_delay
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_set_delay")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "none")
  (parameters
    '("guint" "delay")
  )
)

(define-method set_tip
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_set_tip")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "tip_text" (null-ok))
    '("const-gchar*" "tip_private" (null-ok) (default "NULL"))
  )
)

(define-function tooltips_data_get
  (c-name "gtk_tooltips_data_get")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "GtkTooltipsData*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function gtk_tooltips_data_get
  (c-name "gtk_tooltips_data_get1")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "GtkTooltipsData*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-method force_window
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_force_window")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "none")
)

(define-method tooltips_get_info_from_tip_window
  (of-object "GtkWindow")
  (c-name "gtk_tooltips_get_info_from_tip_window")
  (deprecated "Use the new widget gtk.Tooltip")
  (return-type "gboolean")
  (parameters
    '("GtkTooltips**" "tooltips")
    '("GtkWidget**" "current_widget")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreednd.h

(define-function gtk_tree_drag_source_get_type
  (c-name "gtk_tree_drag_source_get_type")
  (return-type "GType")
)

(define-method row_draggable
  (of-object "GtkTreeDragSource")
  (c-name "gtk_tree_drag_source_row_draggable")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method drag_data_delete
  (of-object "GtkTreeDragSource")
  (c-name "gtk_tree_drag_source_drag_data_delete")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method drag_data_get
  (of-object "GtkTreeDragSource")
  (c-name "gtk_tree_drag_source_drag_data_get")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkSelectionData*" "selection_data")
  )
)

(define-virtual row_draggable
  (of-object "GtkTreeDragSource")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)
(define-virtual drag_data_get
  (of-object "GtkTreeDragSource")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkSelectionData*" "selection_data")
  )
)
(define-virtual drag_data_delete
  (of-object "GtkTreeDragSource")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)


(define-function gtk_tree_drag_dest_get_type
  (c-name "gtk_tree_drag_dest_get_type")
  (return-type "GType")
)

(define-method drag_data_received
  (of-object "GtkTreeDragDest")
  (c-name "gtk_tree_drag_dest_drag_data_received")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "dest")
    '("GtkSelectionData*" "selection_data")
  )
)

(define-method row_drop_possible
  (of-object "GtkTreeDragDest")
  (c-name "gtk_tree_drag_dest_row_drop_possible")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "dest_path")
    '("GtkSelectionData*" "selection_data")
  )
)

(define-method tree_set_row_drag_data
  (of-object "GtkSelectionData")
  (c-name "gtk_tree_set_row_drag_data")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "tree_model")
    '("GtkTreePath*" "path")
  )
)

(define-method tree_get_row_drag_data
  (of-object "GtkSelectionData")
  (c-name "gtk_tree_get_row_drag_data")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel**" "tree_model")
    '("GtkTreePath**" "path")
  )
)

(define-virtual drag_data_received
  (of-object "GtkTreeDragDest")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "dest")
    '("GtkSelectionData*" "selection_data")
  )
)
(define-virtual row_drop_possible
  (of-object "GtkTreeDragDest")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "dest_path")
    '("GtkSelectionData*" "selection_data")
  )
)

;; From /mondo/local/gtk-2.10/include/gtk-2.0/gtk/gtktree.h

(define-function gtk_tree_get_type
  (c-name "gtk_tree_get_type")
  (return-type "GtkType")
)

(define-function gtk_tree_new
  (c-name "gtk_tree_new")
  (is-constructor-of "GtkTree")
  (return-type "GtkWidget*")
)

(define-method append
  (of-object "GtkTree")
  (c-name "gtk_tree_append")
  (return-type "none")
  (parameters
    '("GtkWidget*" "tree_item")
  )
)

(define-method prepend
  (of-object "GtkTree")
  (c-name "gtk_tree_prepend")
  (return-type "none")
  (parameters
    '("GtkWidget*" "tree_item")
  )
)

(define-method insert
  (of-object "GtkTree")
  (c-name "gtk_tree_insert")
  (return-type "none")
  (parameters
    '("GtkWidget*" "tree_item")
    '("gint" "position")
  )
)

(define-method remove_items
  (of-object "GtkTree")
  (c-name "gtk_tree_remove_items")
  (return-type "none")
  (parameters
    '("GList*" "items")
  )
)

(define-method clear_items
  (of-object "GtkTree")
  (c-name "gtk_tree_clear_items")
  (return-type "none")
  (parameters
    '("gint" "start")
    '("gint" "end")
  )
)

(define-method select_item
  (of-object "GtkTree")
  (c-name "gtk_tree_select_item")
  (return-type "none")
  (parameters
    '("gint" "item")
  )
)

(define-method unselect_item
  (of-object "GtkTree")
  (c-name "gtk_tree_unselect_item")
  (return-type "none")
  (parameters
    '("gint" "item")
  )
)

(define-method select_child
  (of-object "GtkTree")
  (c-name "gtk_tree_select_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "tree_item")
  )
)

(define-method unselect_child
  (of-object "GtkTree")
  (c-name "gtk_tree_unselect_child")
  (return-type "none")
  (parameters
    '("GtkWidget*" "tree_item")
  )
)

(define-method child_position
  (of-object "GtkTree")
  (c-name "gtk_tree_child_position")
  (return-type "gint")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-method set_selection_mode
  (of-object "GtkTree")
  (c-name "gtk_tree_set_selection_mode")
  (return-type "none")
  (parameters
    '("GtkSelectionMode" "mode")
  )
)

(define-method set_view_mode
  (of-object "GtkTree")
  (c-name "gtk_tree_set_view_mode")
  (return-type "none")
  (parameters
    '("GtkTreeViewMode" "mode")
  )
)

(define-method set_view_lines
  (of-object "GtkTree")
  (c-name "gtk_tree_set_view_lines")
  (return-type "none")
  (parameters
    '("gboolean" "flag")
  )
)

(define-method remove_item
  (of-object "GtkTree")
  (c-name "gtk_tree_remove_item")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-virtual selection_changed
  (of-object "GtkTree")
  (return-type "none")
)

(define-virtual select_child
  (of-object "GtkTree")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

(define-virtual unselect_child
  (of-object "GtkTree")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
  )
)

;; From /mondo/local/gtk-2.10/include/gtk-2.0/gtk/gtktreeitem.h

(define-function gtk_tree_item_get_type
  (c-name "gtk_tree_item_get_type")
  (return-type "GtkType")
)

(define-function gtk_tree_item_new
  (c-name "gtk_tree_item_new")
  (is-constructor-of "GtkTreeItem")
  (return-type "GtkWidget*")
)

(define-function gtk_tree_item_new_with_label
  (c-name "gtk_tree_item_new_with_label")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method set_subtree
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_set_subtree")
  (return-type "none")
  (parameters
    '("GtkWidget*" "subtree")
  )
)

(define-method remove_subtree
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_remove_subtree")
  (return-type "none")
)

(define-method select
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_select")
  (return-type "none")
)

(define-method deselect
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_deselect")
  (return-type "none")
)

(define-method expand
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_expand")
  (return-type "none")
)

(define-method collapse
  (of-object "GtkTreeItem")
  (c-name "gtk_tree_item_collapse")
  (return-type "none")
)

(define-virtual expand
  (of-object "GtkTreeItem")
  (return-type "none")
)

(define-virtual collapse
  (of-object "GtkTreeItem")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreemodel.h

(define-function tree_path_get_type
  (c-name "gtk_tree_path_get_type")
  (return-type "GType")
)

(define-function gtk_tree_path_new
  (c-name "gtk_tree_path_new")
  (is-constructor-of "GtkTreePath")
  (return-type "GtkTreePath*")
)

(define-function tree_path_new_from_string
  (c-name "gtk_tree_path_new_from_string")
  (return-type "GtkTreePath*")
  (parameters
    '("gchar*" "path")
  )
)

(define-function tree_path_new_from_indices
  (c-name "gtk_tree_path_new_from_indices")
  (return-type "GtkTreePath*")
  (parameters
    '("gint" "first_index")
  )
  (varargs #t)
)

(define-method to_string
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_to_string")
  (return-type "gchar*")
)

(define-function tree_path_new_first
  (c-name "gtk_tree_path_new_first")
  (return-type "GtkTreePath*")
)

(define-method append_index
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_append_index")
  (return-type "none")
  (parameters
    '("gint" "index")
  )
)

(define-method prepend_index
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_prepend_index")
  (return-type "none")
  (parameters
    '("gint" "index")
  )
)

(define-method get_depth
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_get_depth")
  (return-type "gint")
)

(define-method get_indices
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_get_indices")
  (return-type "gint*")
)

(define-method free
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_free")
  (return-type "none")
)

(define-method copy
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_copy")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
)

(define-method compare
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_compare")
  (return-type "gint")
  (parameters
    '("const-GtkTreePath*" "b")
  )
)

(define-method next
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_next")
  (return-type "none")
)

(define-method prev
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_prev")
  (return-type "gint")
)

(define-method up
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_up")
  (return-type "gint")
)

(define-method down
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_down")
  (return-type "none")
)

(define-method is_ancestor
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_is_ancestor")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "descendant")
  )
)

(define-method is_descendant
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_is_descendant")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "ancestor")
  )
)

(define-function gtk_tree_row_reference_get_type
  (c-name "gtk_tree_row_reference_get_type")
  (return-type "GType")
)

(define-function gtk_tree_row_reference_new
  (c-name "gtk_tree_row_reference_new")
  (is-constructor-of "GtkTreeRowReference")
  (return-type "GtkTreeRowReference*")
  (parameters
    '("GtkTreeModel*" "model")
    '("GtkTreePath*" "path")
  )
)

(define-function gtk_tree_row_reference_new_proxy
  (c-name "gtk_tree_row_reference_new_proxy")
  (is-constructor-of "GtkTreeRowReference")
  (return-type "GtkTreeRowReference*")
  (parameters
    '("GObject*" "proxy")
    '("GtkTreeModel*" "model")
    '("GtkTreePath*" "path")
  )
)

(define-method get_path
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_get_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
)


(define-method get_model
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_get_model")
  (return-type "GtkTreeModel*")
)

(define-method valid
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_valid")
  (return-type "gboolean")
)

(define-method copy
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_copy")
  (return-type "GtkTreeRowReference*")
)

(define-method free
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_free")
  (deprecated "don't call this or Bad Things will happen")
  (return-type "none")
)

(define-function tree_row_reference_inserted
  (c-name "gtk_tree_row_reference_inserted")
  (return-type "none")
  (parameters
    '("GObject*" "proxy")
    '("GtkTreePath*" "path")
  )
)

(define-function tree_row_reference_deleted
  (c-name "gtk_tree_row_reference_deleted")
  (return-type "none")
  (parameters
    '("GObject*" "proxy")
    '("GtkTreePath*" "path")
  )
)

(define-function tree_row_reference_reordered
  (c-name "gtk_tree_row_reference_reordered")
  (return-type "none")
  (parameters
    '("GObject*" "proxy")
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
    '("gint*" "new_order")
  )
)

(define-method copy
  (of-object "GtkTreeIter")
  (c-name "gtk_tree_iter_copy")
  (return-type "GtkTreeIter*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkTreeIter")
  (c-name "gtk_tree_iter_free")
  (return-type "none")
)

(define-function gtk_tree_iter_get_type
  (c-name "gtk_tree_iter_get_type")
  (return-type "GType")
)

(define-function gtk_tree_model_get_type
  (c-name "gtk_tree_model_get_type")
  (return-type "GType")
)

(define-method get_flags
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_flags")
  (return-type "GtkTreeModelFlags")
)

(define-method get_n_columns
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_n_columns")
  (return-type "gint")
)

(define-method get_column_type
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_column_type")
  (return-type "GType")
  (parameters
    '("gint" "index")
  )
)

(define-method get_iter
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_iter")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)

(define-method get_iter_from_string
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_iter_from_string")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("const-gchar*" "path_string")
  )
)

(define-method get_string_from_iter
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_string_from_iter")
  (return-type "gchar*")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_iter_root
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_iter_first")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_iter_first
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_iter_first")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_path
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_value
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_value")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("GValue*" "value")
  )
)

(define-method iter_next
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_next")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method iter_children
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_children")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent" (null-ok))
  )
)

(define-method iter_has_child
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_has_child")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method iter_n_children
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_n_children")
  (return-type "gint")
  (parameters
    '("GtkTreeIter*" "iter" (null-ok))
  )
)

(define-method iter_nth_child
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_nth_child")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent" (null-ok))
    '("gint" "n")
  )
)

(define-method iter_parent
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_parent")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "child")
  )
)

(define-method ref_node
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_ref_node")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method unref_node
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_unref_node")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
  (varargs #t)
)

(define-method get_valist
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_valist")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("va_list" "var_args")
  )
)

(define-method foreach
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_foreach")
  (return-type "none")
  (parameters
    '("GtkTreeModelForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method row_changed
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_row_changed")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method row_inserted
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_row_inserted")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method row_has_child_toggled
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_row_has_child_toggled")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method row_deleted
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_row_deleted")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method rows_reordered
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_rows_reordered")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
    '("gint*" "new_order")
  )
)

(define-virtual row_changed
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual row_inserted
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual row_has_child_toggled
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual row_deleted
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)
(define-virtual rows_reordered
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeIter*" "iter")
    '("gint*" "new_order")
  )
)
(define-virtual get_flags
  (of-object "GtkTreeModel")
  (return-type "GtkTreeModelFlags")
)
(define-virtual get_n_columns
  (of-object "GtkTreeModel")
  (return-type "gint")
)
(define-virtual get_column_type
  (of-object "GtkTreeModel")
  (return-type "GType")
  (parameters
    '("gint" "index_")
  )
)
(define-virtual get_iter
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)
(define-virtual get_path
  (of-object "GtkTreeModel")
  (return-type "GtkTreePath*")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-virtual get_value
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("GValue*" "value")
  )
)
(define-virtual iter_next
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual iter_children
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
  )
)
(define-virtual iter_has_child
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual iter_n_children
  (of-object "GtkTreeModel")
  (return-type "gint")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual iter_nth_child
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("gint" "n")
  )
)
(define-virtual iter_parent
  (of-object "GtkTreeModel")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "child")
  )
)
(define-virtual ref_node
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)
(define-virtual unref_node
  (of-object "GtkTreeModel")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreemodelfilter.h

(define-function gtk_tree_model_filter_get_type
  (c-name "gtk_tree_model_filter_get_type")
  (return-type "GType")
)

(define-method filter_new
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_filter_new")
  (return-type "GtkTreeModel*")
  (parameters
    '("GtkTreePath*" "root" (null-ok) (default "NULL"))
  )
)

(define-method set_visible_func
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_set_visible_func")
  (return-type "none")
  (parameters
    '("GtkTreeModelFilterVisibleFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method set_modify_func
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_set_modify_func")
  (return-type "none")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")
    '("GtkTreeModelFilterModifyFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method set_visible_column
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_set_visible_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_model
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_get_model")
  (return-type "GtkTreeModel*")
)

(define-method convert_child_iter_to_iter
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_convert_child_iter_to_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "filter_iter")
    '("GtkTreeIter*" "child_iter")
  )
)

(define-method convert_iter_to_child_iter
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_convert_iter_to_child_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "child_iter")
    '("GtkTreeIter*" "filter_iter")
  )
)

(define-method convert_child_path_to_path
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_convert_child_path_to_path")
  (return-type "GtkTreePath*")
  (parameters
    '("GtkTreePath*" "child_path")
  )
)

(define-method convert_path_to_child_path
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_convert_path_to_child_path")
  (return-type "GtkTreePath*")
  (parameters
    '("GtkTreePath*" "filter_path")
  )
)

(define-method refilter
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_refilter")
  (return-type "none")
)

(define-method clear_cache
  (of-object "GtkTreeModelFilter")
  (c-name "gtk_tree_model_filter_clear_cache")
  (return-type "none")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreemodelsort.h

(define-function gtk_tree_model_sort_get_type
  (c-name "gtk_tree_model_sort_get_type")
  (return-type "GType")
)

(define-method get_model
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_get_model")
  (return-type "GtkTreeModel*")
)

(define-method convert_child_path_to_path
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_convert_child_path_to_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters
    '("GtkTreePath*" "child_path")
  )
)

(define-method convert_child_iter_to_iter
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_convert_child_iter_to_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "sort_iter" (null-ok))
    '("GtkTreeIter*" "child_iter")
  )
)

(define-method convert_path_to_child_path
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_convert_path_to_child_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters
    '("GtkTreePath*" "sorted_path")
  )
)

(define-method convert_iter_to_child_iter
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_convert_iter_to_child_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "child_iter" (null-ok))
    '("GtkTreeIter*" "sorted_iter")
  )
)

(define-method reset_default_sort_func
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_reset_default_sort_func")
  (return-type "none")
)

(define-method clear_cache
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_clear_cache")
  (return-type "none")
)

(define-method iter_is_valid
  (of-object "GtkTreeModelSort")
  (c-name "gtk_tree_model_sort_iter_is_valid")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreeselection.h

(define-function gtk_tree_selection_get_type
  (c-name "gtk_tree_selection_get_type")
  (return-type "GType")
)

(define-method set_mode
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_set_mode")
  (return-type "none")
  (parameters
    '("GtkSelectionMode" "type")
  )
)

(define-method get_mode
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_mode")
  (return-type "GtkSelectionMode")
)

(define-method set_select_function
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_set_select_function")
  (return-type "none")
  (parameters
    '("GtkTreeSelectionFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method get_user_data
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_user_data")
  (return-type "gpointer")
)

(define-method get_tree_view
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_tree_view")
  (return-type "GtkTreeView*")
)

(define-method get_selected
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_selected")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel**" "model")
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_selected_rows
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_selected_rows")
  (return-type "GList*")
  (parameters
    '("GtkTreeModel**" "model")
  )
)

(define-method count_selected_rows
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_count_selected_rows")
  (return-type "gint")
)

(define-method selected_foreach
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_selected_foreach")
  (return-type "none")
  (parameters
    '("GtkTreeSelectionForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-method select_path
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_select_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method unselect_path
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_unselect_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method select_iter
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_select_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method unselect_iter
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_unselect_iter")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method path_is_selected
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_path_is_selected")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method iter_is_selected
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_iter_is_selected")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method select_all
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_select_all")
  (return-type "none")
)

(define-method unselect_all
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_unselect_all")
  (return-type "none")
)

(define-method select_range
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_select_range")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "start_path")
    '("GtkTreePath*" "end_path")
  )
)

(define-method unselect_range
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_unselect_range")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "start_path")
    '("GtkTreePath*" "end_path")
  )
)

(define-virtual changed
  (of-object "GtkTreeSelection")
  (return-type "none")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreesortable.h

(define-function gtk_tree_sortable_get_type
  (c-name "gtk_tree_sortable_get_type")
  (return-type "GType")
)

(define-method sort_column_changed
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_sort_column_changed")
  (return-type "none")
)

(define-method get_sort_column_id
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_get_sort_column_id")
  (return-type "gboolean")
  (parameters
    '("gint*" "sort_column_id")
    '("GtkSortType*" "order")
  )
)

(define-method set_sort_column_id
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_set_sort_column_id")
  (return-type "none")
  (parameters
    '("gint" "sort_column_id")
    '("GtkSortType" "order")
  )
)

(define-method set_sort_func
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_set_sort_func")
  (return-type "none")
  (parameters
    '("gint" "sort_column_id")
    '("GtkTreeIterCompareFunc" "sort_func")
    '("gpointer" "user_data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method set_default_sort_func
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_set_default_sort_func")
  (return-type "none")
  (parameters
    '("GtkTreeIterCompareFunc" "sort_func")
    '("gpointer" "user_data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method has_default_sort_func
  (of-object "GtkTreeSortable")
  (c-name "gtk_tree_sortable_has_default_sort_func")
  (return-type "gboolean")
)

(define-virtual sort_column_changed
  (of-object "GtkTreeSortable")
  (return-type "none")
)
(define-virtual get_sort_column_id
  (of-object "GtkTreeSortable")
  (return-type "gboolean")
  (parameters
    '("gint*" "sort_column_id")
    '("GtkSortType*" "order")
  )
)
(define-virtual set_sort_column_id
  (of-object "GtkTreeSortable")
  (return-type "none")
  (parameters
    '("gint" "sort_column_id")
    '("GtkSortType" "order")
  )
)
(define-virtual set_sort_func
  (of-object "GtkTreeSortable")
  (return-type "none")
  (parameters
    '("gint" "sort_column_id")
    '("GtkTreeIterCompareFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)
(define-virtual set_default_sort_func
  (of-object "GtkTreeSortable")
  (return-type "none")
  (parameters
    '("GtkTreeIterCompareFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)
(define-virtual has_default_sort_func
  (of-object "GtkTreeSortable")
  (return-type "gboolean")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreestore.h

(define-function gtk_tree_store_get_type
  (c-name "gtk_tree_store_get_type")
  (return-type "GType")
)

(define-function gtk_tree_store_new
  (c-name "gtk_tree_store_new")
  (is-constructor-of "GtkTreeStore")
  (return-type "GtkTreeStore*")
  (parameters
    '("gint" "n_columns")
  )
  (varargs #t)
)

(define-function gtk_tree_store_newv
  (c-name "gtk_tree_store_newv")
  (is-constructor-of "GtkTreeStore")
  (return-type "GtkTreeStore*")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_column_types
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set_column_types")
  (return-type "none")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_value
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set_value")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("GValue*" "value")
  )
)

(define-method set
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
  )
  (varargs #t)
)

(define-method set_valist
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set_valist")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("va_list" "var_args")
  )
)

(define-method remove
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_remove")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method insert
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_insert")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("gint" "position")
  )
)

(define-method insert_before
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_insert_before")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("GtkTreeIter*" "sibling")
  )
)

(define-method insert_after
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_insert_after")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
    '("GtkTreeIter*" "sibling")
  )
)

(define-method prepend
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_prepend")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
  )
)

(define-method append
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_append")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "parent")
  )
)

(define-method is_ancestor
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_is_ancestor")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "descendant")
  )
)

(define-method iter_depth
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_iter_depth")
  (return-type "gint")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method clear
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_clear")
  (return-type "none")
)

(define-method iter_is_valid
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_iter_is_valid")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method reorder
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_reorder")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "parent")
    '("gint*" "new_order")
  )
)

(define-method swap
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_swap")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "a")
    '("GtkTreeIter*" "b")
  )
)

(define-method move_after
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_move_after")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "position" (null-ok))
  )
)

(define-method move_before
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_move_before")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreeIter*" "position" (null-ok))
  )
)

(define-method queue_resize
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_queue_resize")
  (return-type "none")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreeview.h

(define-function gtk_tree_view_get_type
  (c-name "gtk_tree_view_get_type")
  (return-type "GType")
)

(define-function gtk_tree_view_new
  (c-name "gtk_tree_view_new")
  (is-constructor-of "GtkTreeView")
  (return-type "GtkWidget*")
)

(define-method get_model
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_model")
  (return-type "GtkTreeModel*")
)

(define-method set_model
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "model" (null-ok) (default "NULL"))
  )
)

(define-method get_selection
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_selection")
  (return-type "GtkTreeSelection*")
)

(define-method get_hadjustment
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_hadjustment
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method get_vadjustment
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_vadjustment
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method get_headers_visible
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_headers_visible")
  (return-type "gboolean")
)

(define-method set_headers_visible
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_headers_visible")
  (return-type "none")
  (parameters
    '("gboolean" "headers_visible")
  )
)

(define-method columns_autosize
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_columns_autosize")
  (return-type "none")
)

(define-method set_headers_clickable
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_headers_clickable")
  (return-type "none")
  (parameters
    '("gboolean" "active")
  )
)

(define-method set_rules_hint
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_rules_hint")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_rules_hint
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_rules_hint")
  (return-type "gboolean")
)

(define-method append_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_append_column")
  (return-type "gint")
  (parameters
    '("GtkTreeViewColumn*" "column")
  )
)

(define-method remove_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_remove_column")
  (return-type "gint")
  (parameters
    '("GtkTreeViewColumn*" "column")
  )
)

(define-method insert_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_insert_column")
  (return-type "gint")
  (parameters
    '("GtkTreeViewColumn*" "column")
    '("gint" "position")
  )
)

(define-method insert_column_with_attributes
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_insert_column_with_attributes")
  (return-type "gint")
  (parameters
    '("gint" "position")
    '("const-gchar*" "title")
    '("GtkCellRenderer*" "cell")
  )
  (varargs #t)
)

(define-method insert_column_with_data_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_insert_column_with_data_func")
  (return-type "gint")
  (parameters
    '("gint" "position")
    '("const-gchar*" "title")
    '("GtkCellRenderer*" "cell")
    '("GtkTreeCellDataFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "dnotify")
  )
)

(define-method get_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_column")
  (return-type "GtkTreeViewColumn*")
  (parameters
    '("gint" "n")
  )
)

(define-method get_columns
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_columns")
  (return-type "GList*")
)

(define-method move_column_after
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_move_column_after")
  (return-type "none")
  (parameters
    '("GtkTreeViewColumn*" "column")
    '("GtkTreeViewColumn*" "base_column" (null-ok))
  )
)

(define-method set_expander_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_expander_column")
  (return-type "none")
  (parameters
    '("GtkTreeViewColumn*" "column")
  )
)

(define-method get_expander_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_expander_column")
  (return-type "GtkTreeViewColumn*")
)

(define-method set_column_drag_function
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_column_drag_function")
  (return-type "none")
  (parameters
    '("GtkTreeViewColumnDropFunc" "func")
    '("gpointer" "user_data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method scroll_to_point
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_scroll_to_point")
  (return-type "none")
  (parameters
    '("gint" "tree_x")
    '("gint" "tree_y")
  )
)

(define-method scroll_to_cell
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_scroll_to_cell")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "column" (null-ok) (default "NULL"))
    '("gboolean" "use_align" (default "FALSE"))
    '("gfloat" "row_align" (default "0.0"))
    '("gfloat" "col_align" (default "0.0"))
  )
)

(define-method row_activated
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_row_activated")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "column")
  )
)

(define-method expand_all
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_expand_all")
  (return-type "none")
)

(define-method collapse_all
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_collapse_all")
  (return-type "none")
)

(define-method expand_to_path
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_expand_to_path")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method expand_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_expand_row")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
    '("gboolean" "open_all")
  )
)

(define-method collapse_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_collapse_row")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method map_expanded_rows
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_map_expanded_rows")
  (return-type "none")
  (parameters
    '("GtkTreeViewMappingFunc" "func")
    '("gpointer" "data")
  )
)

(define-method row_expanded
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_row_expanded")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method set_reorderable
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_reorderable")
  (return-type "none")
  (parameters
    '("gboolean" "reorderable")
  )
)

(define-method get_reorderable
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_reorderable")
  (return-type "gboolean")
)

(define-method set_cursor
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_cursor")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "focus_column" (null-ok) (default "NULL"))
    '("gboolean" "start_editing" (default "FALSE"))
  )
)

(define-method set_cursor_on_cell
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_cursor_on_cell")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "focus_column" (null-ok) (default "NULL"))
    '("GtkCellRenderer*" "focus_cell" (null-ok) (default "NULL"))
    '("gboolean" "start_editing" (default "FALSE"))
  )
)

(define-method get_cursor
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_cursor")
  (return-type "none")
  (parameters
    '("GtkTreePath**" "path")
    '("GtkTreeViewColumn**" "focus_column")
  )
)

(define-method get_bin_window
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_bin_window")
  (return-type "GdkWindow*")
)

(define-method get_path_at_pos
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_path_at_pos")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("GtkTreePath**" "path")
    '("GtkTreeViewColumn**" "column")
    '("gint*" "cell_x")
    '("gint*" "cell_y")
  )
)

(define-method get_cell_area
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_cell_area")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "column" (null-ok))
    '("GdkRectangle*" "rect")
  )
)

(define-method get_background_area
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_background_area")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "column")
    '("GdkRectangle*" "rect")
  )
)

(define-method get_visible_rect
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_visible_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "visible_rect")
  )
)

(define-method widget_to_tree_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_widget_to_tree_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "tx")
    '("gint*" "ty")
  )
)

(define-method tree_to_widget_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_tree_to_widget_coords")
  (return-type "none")
  (parameters
    '("gint" "tx")
    '("gint" "ty")
    '("gint*" "wx")
    '("gint*" "wy")
  )
)

(define-method enable_model_drag_source
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_enable_model_drag_source")
  (return-type "none")
  (parameters
    '("GdkModifierType" "start_button_mask")
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method enable_model_drag_dest
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_enable_model_drag_dest")
  (return-type "none")
  (parameters
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")
  )
)

(define-method unset_rows_drag_source
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_unset_rows_drag_source")
  (return-type "none")
)

(define-method unset_rows_drag_dest
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_unset_rows_drag_dest")
  (return-type "none")
)

(define-method set_drag_dest_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_drag_dest_row")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewDropPosition" "pos")
  )
)

(define-method get_drag_dest_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_drag_dest_row")
  (return-type "none")
  (parameters
    '("GtkTreePath**" "path")
    '("GtkTreeViewDropPosition*" "pos")
  )
)

(define-method get_dest_row_at_pos
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_dest_row_at_pos")
  (return-type "gboolean")
  (parameters
    '("gint" "drag_x")
    '("gint" "drag_y")
    '("GtkTreePath**" "path")
    '("GtkTreeViewDropPosition*" "pos")
  )
)

(define-method create_row_drag_icon
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_create_row_drag_icon")
  (return-type "GdkPixmap*")
  (parameters
    '("GtkTreePath*" "path")
  )
)

(define-method set_enable_search
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_enable_search")
  (return-type "none")
  (parameters
    '("gboolean" "enable_search")
  )
)

(define-method get_enable_search
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_enable_search")
  (return-type "gboolean")
)

(define-method get_search_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_search_column")
  (return-type "gint")
)

(define-method set_search_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_search_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_search_equal_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_search_equal_func")
  (return-type "GtkTreeViewSearchEqualFunc")
)

(define-method set_search_equal_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_search_equal_func")
  (return-type "none")
  (parameters
    '("GtkTreeViewSearchEqualFunc" "search_equal_func")
    '("gpointer" "search_user_data")
    '("GtkDestroyNotify" "search_destroy")
  )
)

(define-method set_destroy_count_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_destroy_count_func")
  (return-type "none")
  (parameters
    '("GtkTreeDestroyCountFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method set_fixed_height_mode
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_fixed_height_mode")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_fixed_height_mode
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_fixed_height_mode")
  (return-type "gboolean")
)

(define-method set_hover_selection
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_hover_selection")
  (return-type "none")
  (parameters
    '("gboolean" "hover")
  )
)

(define-method get_hover_selection
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_hover_selection")
  (return-type "gboolean")
)

(define-method set_hover_expand
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_hover_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-method get_hover_expand
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_hover_expand")
  (return-type "gboolean")
)

(define-method get_row_separator_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_row_separator_func")
  (return-type "GtkTreeViewRowSeparatorFunc")
)

(define-method set_row_separator_func
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_row_separator_func")
  (return-type "none")
  (parameters
    '("GtkTreeViewRowSeparatorFunc" "func")
    '("gpointer" "data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method get_visible_range
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_visible_range")
  (return-type "gboolean")
  (parameters
    '("GtkTreePath**" "start_path")
    '("GtkTreePath**" "end_path")
  )
)

(define-virtual set_scroll_adjustments
  (of-object "GtkTreeView")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)
(define-virtual row_activated
  (of-object "GtkTreeView")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*" "column")
  )
)
(define-virtual test_expand_row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)
(define-virtual test_collapse_row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)
(define-virtual row_expanded
  (of-object "GtkTreeView")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)
(define-virtual row_collapsed
  (of-object "GtkTreeView")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("GtkTreePath*" "path")
  )
)
(define-virtual columns_changed
  (of-object "GtkTreeView")
  (return-type "none")
)
(define-virtual cursor_changed
  (of-object "GtkTreeView")
  (return-type "none")
)
(define-virtual move_cursor
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (parameters
    '("GtkMovementStep" "step")
    '("gint" "count")
  )
)
(define-virtual select_all
  (of-object "GtkTreeView")
  (return-type "gboolean")
)
(define-virtual unselect_all
  (of-object "GtkTreeView")
  (return-type "gboolean")
)
(define-virtual select_cursor_row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (parameters
    '("gboolean" "start_editing")
  )
)
(define-virtual toggle_cursor_row
  (of-object "GtkTreeView")
  (return-type "gboolean")
)
(define-virtual expand_collapse_cursor_row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (parameters
    '("gboolean" "logical")
    '("gboolean" "expand")
    '("gboolean" "open_all")
  )
)
(define-virtual select_cursor_parent
  (of-object "GtkTreeView")
  (return-type "gboolean")
)
(define-virtual start_interactive_search
  (of-object "GtkTreeView")
  (return-type "gboolean")
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtktreeviewcolumn.h

(define-function gtk_tree_view_column_get_type
  (c-name "gtk_tree_view_column_get_type")
  (return-type "GType")
)

(define-function gtk_tree_view_column_new
  (c-name "gtk_tree_view_column_new")
  (is-constructor-of "GtkTreeViewColumn")
  (return-type "GtkObject*")
)

(define-function gtk_tree_view_column_new_with_attributes
  (c-name "gtk_tree_view_column_new_with_attributes")
  (is-constructor-of "GtkTreeViewColumn")
  (return-type "GtkObject*")
  (parameters
    '("gchar*" "title")
    '("GtkCellRenderer*" "cell")
  )
  (varargs #t)
)

(define-method pack_start
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_pack_start")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand" (default "TRUE"))
  )
)

(define-method pack_end
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_pack_end")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
    '("gboolean" "expand" (default "TRUE"))
  )
)

(define-method clear
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_clear")
  (return-type "none")
)

(define-method get_cell_renderers
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_cell_renderers")
  (return-type "GList*")
)

(define-method add_attribute
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_add_attribute")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell_renderer")
    '("gchar*" "attribute")
    '("gint" "column")
  )
)

(define-method set_attributes
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_attributes")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell_renderer")
  )
  (varargs #t)
)

(define-method set_cell_data_func
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_cell_data_func")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell_renderer")
    '("GtkTreeCellDataFunc" "func")
    '("gpointer" "func_data")
    '("GtkDestroyNotify" "destroy")
  )
)

(define-method clear_attributes
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_clear_attributes")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell_renderer")
  )
)

(define-method set_spacing
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_spacing")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
)

(define-method get_spacing
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_spacing")
  (return-type "gint")
)

(define-method set_visible
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_visible")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_visible
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_visible")
  (return-type "gboolean")
)

(define-method set_resizable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_resizable")
  (return-type "none")
  (parameters
    '("gboolean" "resizable")
  )
)

(define-method get_resizable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_resizable")
  (return-type "gboolean")
)

(define-method set_sizing
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_sizing")
  (return-type "none")
  (parameters
    '("GtkTreeViewColumnSizing" "type")
  )
)

(define-method get_sizing
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_sizing")
  (return-type "gint")
)

(define-method get_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_width")
  (return-type "gint")
)

(define-method get_fixed_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_fixed_width")
  (return-type "gint")
)

(define-method set_fixed_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_fixed_width")
  (return-type "none")
  (parameters
    '("gint" "fixed_width")
  )
)

(define-method set_min_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_min_width")
  (return-type "none")
  (parameters
    '("gint" "min_width")
  )
)

(define-method get_min_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_min_width")
  (return-type "gint")
)

(define-method set_max_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_max_width")
  (return-type "none")
  (parameters
    '("gint" "max_width")
  )
)

(define-method get_max_width
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_max_width")
  (return-type "gint")
)

(define-method clicked
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_clicked")
  (return-type "none")
)

(define-method set_title
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_title")
  (return-type "none")
  (parameters
    '("gchar*" "title")
  )
)

(define-method get_title
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_title")
  (return-type "const-gchar*")
)

(define-method set_expand
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_expand")
  (return-type "none")
  (parameters
    '("gboolean" "expand")
  )
)

(define-method get_expand
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_expand")
  (return-type "gboolean")
)

(define-method set_clickable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_clickable")
  (return-type "none")
  (parameters
    '("gboolean" "active")
  )
)

(define-method get_clickable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_clickable")
  (return-type "gboolean")
)

(define-method set_widget
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget" (null-ok))
  )
)

(define-method get_widget
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_widget")
  (return-type "GtkWidget*")
)

(define-method set_alignment
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_alignment")
  (return-type "none")
  (parameters
    '("gfloat" "xalign")
  )
)

(define-method get_alignment
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_alignment")
  (return-type "gfloat")
)

(define-method set_reorderable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_reorderable")
  (return-type "none")
  (parameters
    '("gboolean" "reorderable")
  )
)

(define-method get_reorderable
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_reorderable")
  (return-type "gboolean")
)

(define-method set_sort_column_id
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_sort_column_id")
  (return-type "none")
  (parameters
    '("gint" "sort_column_id")
  )
)

(define-method get_sort_column_id
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_sort_column_id")
  (return-type "gint")
)

(define-method set_sort_indicator
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_sort_indicator")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_sort_indicator
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_sort_indicator")
  (return-type "gboolean")
)

(define-method set_sort_order
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_set_sort_order")
  (return-type "none")
  (parameters
    '("GtkSortType" "order")
  )
)

(define-method get_sort_order
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_sort_order")
  (return-type "GtkSortType")
)

(define-method cell_set_cell_data
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_cell_set_cell_data")
  (return-type "none")
  (parameters
    '("GtkTreeModel*" "tree_model")
    '("GtkTreeIter*" "iter")
    '("gboolean" "is_expander")
    '("gboolean" "is_expanded")
  )
)

(define-method cell_get_size
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_cell_get_size")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "cell_area")
    '("gint*" "x_offset")
    '("gint*" "y_offset")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method cell_is_visible
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_cell_is_visible")
  (return-type "gboolean")
)

(define-method focus_cell
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_focus_cell")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell")
  )
)

(define-method cell_get_position
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_cell_get_position")
  (return-type "none")
  (parameters
    '("GtkCellRenderer*" "cell_renderer")
    '("gint*" "start_pos")
    '("gint*" "width")
  )
)

(define-virtual clicked
  (of-object "GtkTreeViewColumn")
  (return-type "none")
)

;; From /mondo/local/gtk-2.10/include/gtk-2.0/gtk/gtktypebuiltins.h

(define-function gtk_accel_flags_get_type
  (c-name "gtk_accel_flags_get_type")
  (return-type "GType")
)

(define-function gtk_calendar_display_options_get_type
  (c-name "gtk_calendar_display_options_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_state_get_type
  (c-name "gtk_cell_renderer_state_get_type")
  (return-type "GType")
)

(define-function gtk_cell_renderer_mode_get_type
  (c-name "gtk_cell_renderer_mode_get_type")
  (return-type "GType")
)

(define-function gtk_cell_type_get_type
  (c-name "gtk_cell_type_get_type")
  (return-type "GType")
)

(define-function gtk_clist_drag_pos_get_type
  (c-name "gtk_clist_drag_pos_get_type")
  (return-type "GType")
)

(define-function gtk_button_action_get_type
  (c-name "gtk_button_action_get_type")
  (return-type "GType")
)

(define-function gtk_ctree_pos_get_type
  (c-name "gtk_ctree_pos_get_type")
  (return-type "GType")
)

(define-function gtk_ctree_line_style_get_type
  (c-name "gtk_ctree_line_style_get_type")
  (return-type "GType")
)

(define-function gtk_ctree_expander_style_get_type
  (c-name "gtk_ctree_expander_style_get_type")
  (return-type "GType")
)

(define-function gtk_ctree_expansion_type_get_type
  (c-name "gtk_ctree_expansion_type_get_type")
  (return-type "GType")
)

(define-function gtk_debug_flag_get_type
  (c-name "gtk_debug_flag_get_type")
  (return-type "GType")
)

(define-function gtk_dialog_flags_get_type
  (c-name "gtk_dialog_flags_get_type")
  (return-type "GType")
)

(define-function gtk_response_type_get_type
  (c-name "gtk_response_type_get_type")
  (return-type "GType")
)

(define-function gtk_dest_defaults_get_type
  (c-name "gtk_dest_defaults_get_type")
  (return-type "GType")
)

(define-function gtk_target_flags_get_type
  (c-name "gtk_target_flags_get_type")
  (return-type "GType")
)

(define-function gtk_anchor_type_get_type
  (c-name "gtk_anchor_type_get_type")
  (return-type "GType")
)

(define-function gtk_arrow_type_get_type
  (c-name "gtk_arrow_type_get_type")
  (return-type "GType")
)

(define-function gtk_attach_options_get_type
  (c-name "gtk_attach_options_get_type")
  (return-type "GType")
)

(define-function gtk_button_box_style_get_type
  (c-name "gtk_button_box_style_get_type")
  (return-type "GType")
)

(define-function gtk_curve_type_get_type
  (c-name "gtk_curve_type_get_type")
  (return-type "GType")
)

(define-function gtk_delete_type_get_type
  (c-name "gtk_delete_type_get_type")
  (return-type "GType")
)

(define-function gtk_direction_type_get_type
  (c-name "gtk_direction_type_get_type")
  (return-type "GType")
)

(define-function gtk_expander_style_get_type
  (c-name "gtk_expander_style_get_type")
  (return-type "GType")
)

(define-function gtk_icon_size_get_type
  (c-name "gtk_icon_size_get_type")
  (return-type "GType")
)

(define-function gtk_side_type_get_type
  (c-name "gtk_side_type_get_type")
  (return-type "GType")
)

(define-function gtk_text_direction_get_type
  (c-name "gtk_text_direction_get_type")
  (return-type "GType")
)

(define-function gtk_justification_get_type
  (c-name "gtk_justification_get_type")
  (return-type "GType")
)

(define-function gtk_match_type_get_type
  (c-name "gtk_match_type_get_type")
  (return-type "GType")
)

(define-function gtk_menu_direction_type_get_type
  (c-name "gtk_menu_direction_type_get_type")
  (return-type "GType")
)

(define-function gtk_metric_type_get_type
  (c-name "gtk_metric_type_get_type")
  (return-type "GType")
)

(define-function gtk_movement_step_get_type
  (c-name "gtk_movement_step_get_type")
  (return-type "GType")
)

(define-function gtk_scroll_step_get_type
  (c-name "gtk_scroll_step_get_type")
  (return-type "GType")
)

(define-function gtk_orientation_get_type
  (c-name "gtk_orientation_get_type")
  (return-type "GType")
)

(define-function gtk_corner_type_get_type
  (c-name "gtk_corner_type_get_type")
  (return-type "GType")
)

(define-function gtk_pack_type_get_type
  (c-name "gtk_pack_type_get_type")
  (return-type "GType")
)

(define-function gtk_path_priority_type_get_type
  (c-name "gtk_path_priority_type_get_type")
  (return-type "GType")
)

(define-function gtk_path_type_get_type
  (c-name "gtk_path_type_get_type")
  (return-type "GType")
)

(define-function gtk_policy_type_get_type
  (c-name "gtk_policy_type_get_type")
  (return-type "GType")
)

(define-function gtk_position_type_get_type
  (c-name "gtk_position_type_get_type")
  (return-type "GType")
)

(define-function gtk_preview_type_get_type
  (c-name "gtk_preview_type_get_type")
  (return-type "GType")
)

(define-function gtk_relief_style_get_type
  (c-name "gtk_relief_style_get_type")
  (return-type "GType")
)

(define-function gtk_resize_mode_get_type
  (c-name "gtk_resize_mode_get_type")
  (return-type "GType")
)

(define-function gtk_signal_run_type_get_type
  (c-name "gtk_signal_run_type_get_type")
  (return-type "GType")
)

(define-function gtk_scroll_type_get_type
  (c-name "gtk_scroll_type_get_type")
  (return-type "GType")
)

(define-function gtk_selection_mode_get_type
  (c-name "gtk_selection_mode_get_type")
  (return-type "GType")
)

(define-function gtk_shadow_type_get_type
  (c-name "gtk_shadow_type_get_type")
  (return-type "GType")
)

(define-function gtk_state_type_get_type
  (c-name "gtk_state_type_get_type")
  (return-type "GType")
)

(define-function gtk_submenu_direction_get_type
  (c-name "gtk_submenu_direction_get_type")
  (return-type "GType")
)

(define-function gtk_submenu_placement_get_type
  (c-name "gtk_submenu_placement_get_type")
  (return-type "GType")
)

(define-function gtk_toolbar_style_get_type
  (c-name "gtk_toolbar_style_get_type")
  (return-type "GType")
)

(define-function gtk_update_type_get_type
  (c-name "gtk_update_type_get_type")
  (return-type "GType")
)

(define-function gtk_visibility_get_type
  (c-name "gtk_visibility_get_type")
  (return-type "GType")
)

(define-function gtk_window_position_get_type
  (c-name "gtk_window_position_get_type")
  (return-type "GType")
)

(define-function gtk_window_type_get_type
  (c-name "gtk_window_type_get_type")
  (return-type "GType")
)

(define-function gtk_wrap_mode_get_type
  (c-name "gtk_wrap_mode_get_type")
  (return-type "GType")
)

(define-function gtk_sort_type_get_type
  (c-name "gtk_sort_type_get_type")
  (return-type "GType")
)

(define-function gtk_im_preedit_style_get_type
  (c-name "gtk_im_preedit_style_get_type")
  (return-type "GType")
)

(define-function gtk_im_status_style_get_type
  (c-name "gtk_im_status_style_get_type")
  (return-type "GType")
)

(define-function gtk_pack_direction_get_type
  (c-name "gtk_pack_direction_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_action_get_type
  (c-name "gtk_file_chooser_action_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_confirmation_get_type
  (c-name "gtk_file_chooser_confirmation_get_type")
  (return-type "GType")
)

(define-function gtk_file_chooser_error_get_type
  (c-name "gtk_file_chooser_error_get_type")
  (return-type "GType")
)

(define-function gtk_file_filter_flags_get_type
  (c-name "gtk_file_filter_flags_get_type")
  (return-type "GType")
)

(define-function gtk_icon_lookup_flags_get_type
  (c-name "gtk_icon_lookup_flags_get_type")
  (return-type "GType")
)

(define-function gtk_icon_theme_error_get_type
  (c-name "gtk_icon_theme_error_get_type")
  (return-type "GType")
)

(define-function gtk_icon_view_drop_position_get_type
  (c-name "gtk_icon_view_drop_position_get_type")
  (return-type "GType")
)

(define-function gtk_image_type_get_type
  (c-name "gtk_image_type_get_type")
  (return-type "GType")
)

(define-function gtk_message_type_get_type
  (c-name "gtk_message_type_get_type")
  (return-type "GType")
)

(define-function gtk_buttons_type_get_type
  (c-name "gtk_buttons_type_get_type")
  (return-type "GType")
)

(define-function gtk_notebook_tab_get_type
  (c-name "gtk_notebook_tab_get_type")
  (return-type "GType")
)

(define-function gtk_object_flags_get_type
  (c-name "gtk_object_flags_get_type")
  (return-type "GType")
)

(define-function gtk_arg_flags_get_type
  (c-name "gtk_arg_flags_get_type")
  (return-type "GType")
)

(define-function gtk_print_status_get_type
  (c-name "gtk_print_status_get_type")
  (return-type "GType")
)

(define-function gtk_print_operation_result_get_type
  (c-name "gtk_print_operation_result_get_type")
  (return-type "GType")
)

(define-function gtk_print_error_get_type
  (c-name "gtk_print_error_get_type")
  (return-type "GType")
)

(define-function gtk_private_flags_get_type
  (c-name "gtk_private_flags_get_type")
  (return-type "GType")
)

(define-function gtk_progress_bar_style_get_type
  (c-name "gtk_progress_bar_style_get_type")
  (return-type "GType")
)

(define-function gtk_progress_bar_orientation_get_type
  (c-name "gtk_progress_bar_orientation_get_type")
  (return-type "GType")
)

(define-function gtk_rc_flags_get_type
  (c-name "gtk_rc_flags_get_type")
  (return-type "GType")
)

(define-function gtk_rc_token_type_get_type
  (c-name "gtk_rc_token_type_get_type")
  (return-type "GType")
)

(define-function gtk_size_group_mode_get_type
  (c-name "gtk_size_group_mode_get_type")
  (return-type "GType")
)

(define-function gtk_spin_button_update_policy_get_type
  (c-name "gtk_spin_button_update_policy_get_type")
  (return-type "GType")
)

(define-function gtk_spin_type_get_type
  (c-name "gtk_spin_type_get_type")
  (return-type "GType")
)

(define-function gtk_text_search_flags_get_type
  (c-name "gtk_text_search_flags_get_type")
  (return-type "GType")
)

(define-function gtk_text_window_type_get_type
  (c-name "gtk_text_window_type_get_type")
  (return-type "GType")
)

(define-function gtk_toolbar_child_type_get_type
  (c-name "gtk_toolbar_child_type_get_type")
  (return-type "GType")
)

(define-function gtk_toolbar_space_style_get_type
  (c-name "gtk_toolbar_space_style_get_type")
  (return-type "GType")
)

(define-function gtk_tree_view_mode_get_type
  (c-name "gtk_tree_view_mode_get_type")
  (return-type "GType")
)

(define-function gtk_tree_model_flags_get_type
  (c-name "gtk_tree_model_flags_get_type")
  (return-type "GType")
)

(define-function gtk_tree_view_drop_position_get_type
  (c-name "gtk_tree_view_drop_position_get_type")
  (return-type "GType")
)

(define-function gtk_tree_view_column_sizing_get_type
  (c-name "gtk_tree_view_column_sizing_get_type")
  (return-type "GType")
)

(define-function gtk_ui_manager_item_type_get_type
  (c-name "gtk_ui_manager_item_type_get_type")
  (return-type "GType")
)

(define-function gtk_widget_flags_get_type
  (c-name "gtk_widget_flags_get_type")
  (return-type "GType")
)

(define-function gtk_widget_help_type_get_type
  (c-name "gtk_widget_help_type_get_type")
  (return-type "GType")
)

;; From /opt/gtk2/include/gtk-2.0/gtk/gtktypeutils.h

(define-function identifier_get_type
  (c-name "gtk_identifier_get_type")
  (return-type "GType")
)

(define-method class
  (of-object "GtkType")
  (c-name "gtk_type_class")
  (return-type "gpointer")
)

(define-method unique
  (of-object "GtkType")
  (c-name "gtk_type_unique")
  (return-type "GtkType")
  (parameters
    '("const-GtkTypeInfo*" "gtkinfo")
  )
)

(define-method new
  (of-object "GtkType")
  (c-name "gtk_type_new")
  (return-type "gpointer")
)

(define-method enum_get_values
  (of-object "GtkType")
  (c-name "gtk_type_enum_get_values")
  (return-type "GtkEnumValue*")
)

(define-method flags_get_values
  (of-object "GtkType")
  (c-name "gtk_type_flags_get_values")
  (return-type "GtkFlagValue*")
)

(define-method enum_find_value
  (of-object "GtkType")
  (c-name "gtk_type_enum_find_value")
  (return-type "GtkEnumValue*")
  (parameters
    '("const-gchar*" "value_name")
  )
)

(define-method flags_find_value
  (of-object "GtkType")
  (c-name "gtk_type_flags_find_value")
  (return-type "GtkFlagValue*")
  (parameters
    '("const-gchar*" "value_name")
  )
)

(define-function gtk_type_init
  (c-name "gtk_type_init")
  (return-type "none")
  (parameters
    '("GTypeDebugFlags" "debug_flags")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkuimanager.h

(define-function gtk_ui_manager_get_type
  (c-name "gtk_ui_manager_get_type")
  (return-type "GType")
)

(define-function gtk_ui_manager_new
  (c-name "gtk_ui_manager_new")
  (is-constructor-of "GtkUIManager")
  (return-type "GtkUIManager*")
)

(define-method set_add_tearoffs
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_set_add_tearoffs")
  (return-type "none")
  (parameters
    '("gboolean" "add_tearoffs")
  )
)

(define-method get_add_tearoffs
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_add_tearoffs")
  (return-type "gboolean")
)

(define-method insert_action_group
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_insert_action_group")
  (return-type "none")
  (parameters
    '("GtkActionGroup*" "action_group")
    '("gint" "pos" (default "-1"))
  )
)

(define-method remove_action_group
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_remove_action_group")
  (return-type "none")
  (parameters
    '("GtkActionGroup*" "action_group")
  )
)

(define-method get_action_groups
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_action_groups")
  (return-type "GList*")
)

(define-method get_accel_group
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_accel_group")
  (return-type "GtkAccelGroup*")
)

(define-method get_widget
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_widget")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method get_toplevels
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_toplevels")
  (return-type "GSList*")
  (parameters
    '("GtkUIManagerItemType" "types")
  )
)

(define-method get_action
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_action")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method add_ui_from_string
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_add_ui_from_string")
  (return-type "guint")
  (parameters
    '("const-gchar*" "buffer")
    '("gssize" "length")
    '("GError**" "error")
  )
)

(define-method add_ui_from_file
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_add_ui_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method add_ui
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_add_ui")
  (return-type "none")
  (parameters
    '("guint" "merge_id")
    '("const-gchar*" "path")
    '("const-gchar*" "name")
    '("const-gchar*" "action" (null-ok))
    '("GtkUIManagerItemType" "type")
    '("gboolean" "top")
  )
)

(define-method remove_ui
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_remove_ui")
  (return-type "none")
  (parameters
    '("guint" "merge_id")
  )
)

(define-method get_ui
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_ui")
  (return-type "gchar*")
)

(define-method ensure_update
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_ensure_update")
  (return-type "none")
)

(define-method new_merge_id
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_new_merge_id")
  (return-type "guint")
)

(define-virtual add_widget
  (of-object "GtkUIManager")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
  )
)
(define-virtual actions_changed
  (of-object "GtkUIManager")
  (return-type "none")
)
(define-virtual connect_proxy
  (of-object "GtkUIManager")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
    '("GtkWidget*" "proxy")
  )
)
(define-virtual disconnect_proxy
  (of-object "GtkUIManager")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
    '("GtkWidget*" "proxy")
  )
)
(define-virtual pre_activate
  (of-object "GtkUIManager")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)
(define-virtual post_activate
  (of-object "GtkUIManager")
  (return-type "none")
  (parameters
    '("GtkAction*" "action")
  )
)

(define-virtual get_widget
  (of-object "GtkUIManager")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-virtual get_action
  (of-object "GtkUIManager")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "path")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvbbox.h

(define-function gtk_vbutton_box_get_type
  (c-name "gtk_vbutton_box_get_type")
  (return-type "GType")
)

(define-function gtk_vbutton_box_new
  (c-name "gtk_vbutton_box_new")
  (is-constructor-of "GtkVButtonBox")
  (return-type "GtkWidget*")
)

(define-function vbutton_box_get_spacing_default
  (c-name "gtk_vbutton_box_get_spacing_default")
  (return-type "gint")
  (deprecated "")
)

(define-function vbutton_box_set_spacing_default
  (c-name "gtk_vbutton_box_set_spacing_default")
  (return-type "none")
  (parameters
    '("gint" "spacing")
  )
  (deprecated "")
)

(define-function vbutton_box_get_layout_default
  (c-name "gtk_vbutton_box_get_layout_default")
  (return-type "GtkButtonBoxStyle")
  (deprecated "")
)

(define-function vbutton_box_set_layout_default
  (c-name "gtk_vbutton_box_set_layout_default")
  (return-type "none")
  (parameters
    '("GtkButtonBoxStyle" "layout")
  )
  (deprecated "")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvbox.h

(define-function gtk_vbox_get_type
  (c-name "gtk_vbox_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkversion.h



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkviewport.h

(define-function gtk_viewport_get_type
  (c-name "gtk_viewport_get_type")
  (return-type "GType")
)

(define-method get_hadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_get_hadjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_vadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_get_vadjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_hadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method set_vadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method set_shadow_type
  (of-object "GtkViewport")
  (c-name "gtk_viewport_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "type")
  )
)

(define-method get_shadow_type
  (of-object "GtkViewport")
  (c-name "gtk_viewport_get_shadow_type")
  (return-type "GtkShadowType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvpaned.h

(define-function gtk_vpaned_get_type
  (c-name "gtk_vpaned_get_type")
  (return-type "GType")
)

(define-function gtk_vpaned_new
  (c-name "gtk_vpaned_new")
  (is-constructor-of "GtkVPaned")
  (return-type "GtkWidget*")
)

(define-virtual set_scroll_adjustments
  (of-object "GtkViewport")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "hadjustment")
    '("GtkAdjustment*" "vadjustment")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvruler.h

(define-function gtk_vruler_get_type
  (c-name "gtk_vruler_get_type")
  (return-type "GType")
)

(define-function gtk_vruler_new
  (c-name "gtk_vruler_new")
  (is-constructor-of "GtkVRuler")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvscale.h

(define-function gtk_vscale_get_type
  (c-name "gtk_vscale_get_type")
  (return-type "GType")
)


(define-function gtk_vscale_new_with_range
  (c-name "gtk_vscale_new_with_range")
  (is-constructor-of "GtkVScale")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvscrollbar.h

(define-function gtk_vscrollbar_get_type
  (c-name "gtk_vscrollbar_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkvseparator.h

(define-function gtk_vseparator_get_type
  (c-name "gtk_vseparator_get_type")
  (return-type "GType")
)

(define-function gtk_vseparator_new
  (c-name "gtk_vseparator_new")
  (is-constructor-of "GtkVSeparator")
  (return-type "GtkWidget*")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkwidget.h

(define-function gtk_widget_get_type
  (c-name "gtk_widget_get_type")
  (return-type "GType")
)

(define-function gtk_widget_new
  (c-name "gtk_widget_new")
  (is-constructor-of "GtkWidget")
  (return-type "GtkWidget*")
  (parameters
    '("GType" "type")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method ref
  (of-object "GtkWidget")
  (c-name "gtk_widget_ref")
  (return-type "GtkWidget*")
)

(define-method unref
  (of-object "GtkWidget")
  (c-name "gtk_widget_unref")
  (return-type "none")
)

(define-method destroy
  (of-object "GtkWidget")
  (c-name "gtk_widget_destroy")
  (return-type "none")
)

(define-method destroyed
  (of-object "GtkWidget")
  (c-name "gtk_widget_destroyed")
  (return-type "none")
  (parameters
    '("GtkWidget**" "widget_pointer")
  )
)

(define-method set
  (of-object "GtkWidget")
  (c-name "gtk_widget_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-method unparent
  (of-object "GtkWidget")
  (c-name "gtk_widget_unparent")
  (return-type "none")
)

(define-method show
  (of-object "GtkWidget")
  (c-name "gtk_widget_show")
  (return-type "none")
)

(define-method show_now
  (of-object "GtkWidget")
  (c-name "gtk_widget_show_now")
  (return-type "none")
)

(define-method hide
  (of-object "GtkWidget")
  (c-name "gtk_widget_hide")
  (return-type "none")
)

(define-method show_all
  (of-object "GtkWidget")
  (c-name "gtk_widget_show_all")
  (return-type "none")
)

(define-method hide_all
  (of-object "GtkWidget")
  (c-name "gtk_widget_hide_all")
  (return-type "none")
)

(define-method set_no_show_all
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_no_show_all")
  (return-type "none")
  (parameters
    '("gboolean" "no_show_all")
  )
)

(define-method get_no_show_all
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_no_show_all")
  (return-type "gboolean")
)

(define-method map
  (of-object "GtkWidget")
  (c-name "gtk_widget_map")
  (return-type "none")
)

(define-method unmap
  (of-object "GtkWidget")
  (c-name "gtk_widget_unmap")
  (return-type "none")
)

(define-method realize
  (of-object "GtkWidget")
  (c-name "gtk_widget_realize")
  (return-type "none")
)

(define-method unrealize
  (of-object "GtkWidget")
  (c-name "gtk_widget_unrealize")
  (return-type "none")
)

(define-method queue_draw
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_draw")
  (return-type "none")
)

(define-method queue_draw_area
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_draw_area")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method queue_clear
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_clear")
  (return-type "none")
  (deprecated "use GtkWidget.queue_draw")
)

(define-method queue_clear_area
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_clear_area")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "use GtkWidget.queue_draw_area")
)

(define-method queue_resize
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_resize")
  (return-type "none")
)

(define-method queue_resize_no_redraw
  (of-object "GtkWidget")
  (c-name "gtk_widget_queue_resize_no_redraw")
  (return-type "none")
)

(define-method draw
  (of-object "GtkWidget")
  (c-name "gtk_widget_draw")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "area")
  )
  (deprecated "use GtkWidget.queue_draw_area")
)

(define-method size_request
  (of-object "GtkWidget")
  (c-name "gtk_widget_size_request")
  (return-type "none")
  (parameters
    '("GtkRequisition*" "requisition")
  )
)

(define-method size_allocate
  (of-object "GtkWidget")
  (c-name "gtk_widget_size_allocate")
  (return-type "none")
  (parameters
    '("GtkAllocation*" "allocation")
  )
)

(define-method get_child_requisition
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_child_requisition")
  (return-type "none")
  (parameters
    '("GtkRequisition*" "requisition")
  )
)

(define-method add_accelerator
  (of-object "GtkWidget")
  (c-name "gtk_widget_add_accelerator")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_signal")
    '("GtkAccelGroup*" "accel_group")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
    '("GtkAccelFlags" "accel_flags")
  )
)

(define-method remove_accelerator
  (of-object "GtkWidget")
  (c-name "gtk_widget_remove_accelerator")
  (return-type "gboolean")
  (parameters
    '("GtkAccelGroup*" "accel_group")
    '("guint" "accel_key")
    '("GdkModifierType" "accel_mods")
  )
)

(define-method set_accel_path
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_accel_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "accel_path" (null-ok))
    '("GtkAccelGroup*" "accel_group" (null-ok))
  )
)

(define-method list_accel_closures
  (of-object "GtkWidget")
  (c-name "gtk_widget_list_accel_closures")
  (return-type "GList*")
)

(define-method can_activate_accel
  (of-object "GtkWidget")
  (c-name "gtk_widget_can_activate_accel")
  (return-type "gboolean")
  (parameters
    '("guint" "signal_id")
  )
)

(define-method mnemonic_activate
  (of-object "GtkWidget")
  (c-name "gtk_widget_mnemonic_activate")
  (return-type "gboolean")
  (parameters
    '("gboolean" "group_cycling")
  )
)

(define-method event
  (of-object "GtkWidget")
  (c-name "gtk_widget_event")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method send_expose
  (of-object "GtkWidget")
  (c-name "gtk_widget_send_expose")
  (return-type "gint")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method activate
  (of-object "GtkWidget")
  (c-name "gtk_widget_activate")
  (return-type "gboolean")
)

(define-method set_scroll_adjustments
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_scroll_adjustments")
  (return-type "gboolean")
  (parameters
    '("GtkAdjustment*" "hadjustment" (null-ok))
    '("GtkAdjustment*" "vadjustment" (null-ok))
  )
)

(define-method reparent
  (of-object "GtkWidget")
  (c-name "gtk_widget_reparent")
  (return-type "none")
  (parameters
    '("GtkWidget*" "new_parent")
  )
)

(define-method intersect
  (of-object "GtkWidget")
  (c-name "gtk_widget_intersect")
  (return-type "gboolean")
  (parameters
    '("GdkRectangle*" "area")
    '("GdkRectangle*" "intersection")
  )
)

(define-method region_intersect
  (of-object "GtkWidget")
  (c-name "gtk_widget_region_intersect")
  (return-type "GdkRegion*")
  (caller-owns-return #t)
  (parameters
    '("GdkRegion*" "region")
  )
)

(define-method freeze_child_notify
  (of-object "GtkWidget")
  (c-name "gtk_widget_freeze_child_notify")
  (return-type "none")
)

(define-method child_notify
  (of-object "GtkWidget")
  (c-name "gtk_widget_child_notify")
  (return-type "none")
  (parameters
    '("const-gchar*" "child_property")
  )
)

(define-method thaw_child_notify
  (of-object "GtkWidget")
  (c-name "gtk_widget_thaw_child_notify")
  (return-type "none")
)

(define-method is_focus
  (of-object "GtkWidget")
  (c-name "gtk_widget_is_focus")
  (return-type "gboolean")
)

(define-method grab_focus
  (of-object "GtkWidget")
  (c-name "gtk_widget_grab_focus")
  (return-type "none")
)

(define-method grab_default
  (of-object "GtkWidget")
  (c-name "gtk_widget_grab_default")
  (return-type "none")
)

(define-method set_name
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_name")
  (return-type "const-gchar*")
)

(define-method set_state
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_state")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
  )
)

(define-method set_sensitive
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_sensitive")
  (return-type "none")
  (parameters
    '("gboolean" "sensitive")
  )
)

(define-method set_app_paintable
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_app_paintable")
  (return-type "none")
  (parameters
    '("gboolean" "app_paintable")
  )
)

(define-method set_double_buffered
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_double_buffered")
  (return-type "none")
  (parameters
    '("gboolean" "double_buffered")
  )
)

(define-method set_redraw_on_allocate
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_redraw_on_allocate")
  (return-type "none")
  (parameters
    '("gboolean" "redraw_on_allocate")
  )
)

(define-method set_parent
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_parent")
  (return-type "none")
  (parameters
    '("GtkWidget*" "parent")
  )
)

(define-method set_parent_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_parent_window")
  (return-type "none")
  (parameters
    '("GdkWindow*" "parent_window" (null-ok))
  )
)

(define-method set_child_visible
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_child_visible")
  (return-type "none")
  (parameters
    '("gboolean" "is_visible")
  )
)

(define-method get_child_visible
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_child_visible")
  (return-type "gboolean")
)

(define-method get_parent
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_parent")
  (return-type "GtkWidget*")
)

(define-method get_parent_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_parent_window")
  (return-type "GdkWindow*")
)

(define-method child_focus
  (of-object "GtkWidget")
  (c-name "gtk_widget_child_focus")
  (return-type "gboolean")
  (parameters
    '("GtkDirectionType" "direction")
  )
)

(define-method set_size_request
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_size_request")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_size_request
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_size_request")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method set_uposition
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_uposition")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
  (deprecated "")
)

(define-method set_usize
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_usize")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
  (deprecated "use GtkWidget.set_size_request")
)

(define-method set_events
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_events")
  (return-type "none")
  (parameters
    '("gint" "events")
  )
)

(define-method add_events
  (of-object "GtkWidget")
  (c-name "gtk_widget_add_events")
  (return-type "none")
  (parameters
    '("gint" "events")
  )
)

(define-method set_extension_events
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_extension_events")
  (return-type "none")
  (parameters
    '("GdkExtensionMode" "mode")
  )
)

(define-method get_extension_events
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_extension_events")
  (return-type "GdkExtensionMode")
)

(define-method get_toplevel
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_toplevel")
  (return-type "GtkWidget*")
)

(define-method get_ancestor
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_ancestor")
  (return-type "GtkWidget*")
  (parameters
    '("GType" "widget_type")
  )
)

(define-method get_colormap
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_colormap")
  (return-type "GdkColormap*")
)

(define-method get_visual
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_screen
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_screen")
  (return-type "GdkScreen*")
)

(define-method has_screen
  (of-object "GtkWidget")
  (c-name "gtk_widget_has_screen")
  (return-type "gboolean")
)

(define-method get_display
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_root_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_root_window")
  (return-type "GdkWindow*")
)

(define-method get_settings
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_settings")
  (return-type "GtkSettings*")
)

(define-method get_clipboard
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_clipboard")
  (return-type "GtkClipboard*")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-method get_accessible
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_accessible")
  (return-type "AtkObject*")
)

(define-method set_colormap
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_events
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_events")
  (return-type "gint")
)

(define-method get_pointer
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_pointer")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method is_ancestor
  (of-object "GtkWidget")
  (c-name "gtk_widget_is_ancestor")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "ancestor")
  )
)

(define-method translate_coordinates
  (of-object "GtkWidget")
  (c-name "gtk_widget_translate_coordinates")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "dest_widget")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint*" "dest_x")
    '("gint*" "dest_y")
  )
)

(define-method hide_on_delete
  (of-object "GtkWidget")
  (c-name "gtk_widget_hide_on_delete")
  (return-type "gboolean")
)

(define-method set_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_style")
  (return-type "none")
  (parameters
    '("GtkStyle*" "style" (null-ok))
  )
)

(define-method ensure_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_ensure_style")
  (return-type "none")
)

(define-method get_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_style")
  (return-type "GtkStyle*")
)

(define-method modify_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_style")
  (return-type "none")
  (parameters
    '("GtkRcStyle*" "style")
  )
)

(define-method get_modifier_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_modifier_style")
  (return-type "GtkRcStyle*")
)

(define-method modify_fg
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_fg")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
    '("GdkColor*" "color" (null-ok))
  )
)

(define-method modify_bg
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_bg")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
    '("GdkColor*" "color" (null-ok))
  )
)

(define-method modify_text
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_text")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
    '("GdkColor*" "color" (null-ok))
  )
)

(define-method modify_base
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_base")
  (return-type "none")
  (parameters
    '("GtkStateType" "state")
    '("GdkColor*" "color" (null-ok))
  )
)

(define-method modify_font
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_font")
  (return-type "none")
  (parameters
    '("PangoFontDescription*" "font_desc" (null-ok))
  )
)

(define-method create_pango_context
  (of-object "GtkWidget")
  (c-name "gtk_widget_create_pango_context")
  (caller-owns-return #t)
  (return-type "PangoContext*")
)

(define-method get_pango_context
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_pango_context")
  (return-type "PangoContext*")
)

(define-method create_pango_layout
  (of-object "GtkWidget")
  (c-name "gtk_widget_create_pango_layout")
  (caller-owns-return #t)
  (return-type "PangoLayout*")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method render_icon
  (of-object "GtkWidget")
  (c-name "gtk_widget_render_icon")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")
    '("const-gchar*" "detail" (null-ok) (default "NULL"))
  )
)

(define-method set_composite_name
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_composite_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_composite_name
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_composite_name")
  (return-type "gchar*")
)

(define-method reset_rc_styles
  (of-object "GtkWidget")
  (c-name "gtk_widget_reset_rc_styles")
  (return-type "none")
)

(define-function widget_push_colormap
  (c-name "gtk_widget_push_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "cmap")
  )
)

(define-function widget_push_composite_child
  (c-name "gtk_widget_push_composite_child")
  (return-type "none")
)

(define-function widget_pop_composite_child
  (c-name "gtk_widget_pop_composite_child")
  (return-type "none")
)

(define-function widget_pop_colormap
  (c-name "gtk_widget_pop_colormap")
  (return-type "none")
)

(define-function widget_class_install_style_property
  (c-name "gtk_widget_class_install_style_property")
  (return-type "none")
  (parameters
    '("GtkWidgetClass*" "klass")
    '("GParamSpec*" "pspec")
  )
)

(define-function widget_class_install_style_property_parser
  (c-name "gtk_widget_class_install_style_property_parser")
  (return-type "none")
  (parameters
    '("GtkWidgetClass*" "klass")
    '("GParamSpec*" "pspec")
    '("GtkRcPropertyParser" "parser")
  )
)

(define-function widget_class_find_style_property
  (c-name "gtk_widget_class_find_style_property")
  (return-type "GParamSpec*")
  (parameters
    '("GtkWidgetClass*" "klass")
    '("const-gchar*" "property_name")
  )
)

(define-function widget_class_list_style_properties
  (c-name "gtk_widget_class_list_style_properties")
  (return-type "GParamSpec**")
  (parameters
    '("guint*" "n_properties")
  )
)

(define-method style_get_property
  (of-object "GtkWidget")
  (c-name "gtk_widget_style_get_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("GValue*" "value")
  )
)

(define-method style_get_valist
  (of-object "GtkWidget")
  (c-name "gtk_widget_style_get_valist")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-method style_get
  (of-object "GtkWidget")
  (c-name "gtk_widget_style_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-function widget_get_default_style
  (c-name "gtk_widget_get_default_style")
  (return-type "GtkStyle*")
)

(define-function widget_set_default_colormap
  (c-name "gtk_widget_set_default_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-function widget_get_default_colormap
  (c-name "gtk_widget_get_default_colormap")
  (return-type "GdkColormap*")
)

(define-function widget_get_default_visual
  (c-name "gtk_widget_get_default_visual")
  (return-type "GdkVisual*")
)

(define-method set_direction
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_direction")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "dir")
  )
)

(define-method get_direction
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_direction")
  (return-type "GtkTextDirection")
)

(define-function widget_set_default_direction
  (c-name "gtk_widget_set_default_direction")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "dir")
  )
)

(define-function widget_get_default_direction
  (c-name "gtk_widget_get_default_direction")
  (return-type "GtkTextDirection")
)

(define-method shape_combine_mask
  (of-object "GtkWidget")
  (c-name "gtk_widget_shape_combine_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "shape_mask")
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-method reset_shapes
  (of-object "GtkWidget")
  (c-name "gtk_widget_reset_shapes")
  (return-type "none")
)

(define-method path
  (of-object "GtkWidget")
  (c-name "gtk_widget_path")
  (return-type "none")
  (parameters
    '("guint*" "path_length")
    '("gchar**" "path")
    '("gchar**" "path_reversed")
  )
)

(define-method class_path
  (of-object "GtkWidget")
  (c-name "gtk_widget_class_path")
  (return-type "none")
  (parameters
    '("guint*" "path_length")
    '("gchar**" "path")
    '("gchar**" "path_reversed")
  )
)

(define-method list_mnemonic_labels
  (of-object "GtkWidget")
  (c-name "gtk_widget_list_mnemonic_labels")
  (return-type "GList*")
)

(define-method add_mnemonic_label
  (of-object "GtkWidget")
  (c-name "gtk_widget_add_mnemonic_label")
  (return-type "none")
  (parameters
    '("GtkWidget*" "label")
  )
)

(define-method remove_mnemonic_label
  (of-object "GtkWidget")
  (c-name "gtk_widget_remove_mnemonic_label")
  (return-type "none")
  (parameters
    '("GtkWidget*" "label")
  )
)

(define-virtual dispatch_child_properties_changed
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("guint" "n_pspecs")
    '("GParamSpec**" "pspecs")
  )
)
(define-virtual show
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual show_all
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual hide
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual hide_all
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual map
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual unmap
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual realize
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual unrealize
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual size_request
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkRequisition*" "requisition")
  )
)
(define-virtual size_allocate
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkAllocation*" "allocation")
  )
)
(define-virtual state_changed
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkStateType" "previous_state")
  )
)
(define-virtual parent_set
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "previous_parent")
  )
)
(define-virtual hierarchy_changed
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "previous_toplevel")
  )
)
(define-virtual style_set
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkStyle*" "previous_style" (null-ok))
  )
)
(define-virtual direction_changed
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkTextDirection" "previous_direction")
  )
)
(define-virtual grab_notify
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("gboolean" "was_grabbed")
  )
)
(define-virtual child_notify
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GParamSpec*" "pspec")
  )
)
(define-virtual mnemonic_activate
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("gboolean" "group_cycling")
  )
)
(define-virtual grab_focus
  (of-object "GtkWidget")
  (return-type "none")
)
(define-virtual focus
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GtkDirectionType" "direction")
  )
)
(define-virtual event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
  )
)
(define-virtual button_press_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventButton*" "event")
  )
)
(define-virtual button_release_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventButton*" "event")
  )
)
(define-virtual scroll_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventScroll*" "event")
  )
)
(define-virtual motion_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventMotion*" "event")
  )
)
(define-virtual delete_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventAny*" "event")
  )
)
(define-virtual destroy_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventAny*" "event")
  )
)
(define-virtual expose_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventExpose*" "event")
  )
)
(define-virtual key_press_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)
(define-virtual key_release_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)
(define-virtual enter_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventCrossing*" "event")
  )
)
(define-virtual leave_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventCrossing*" "event")
  )
)
(define-virtual configure_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventConfigure*" "event")
  )
)
(define-virtual focus_in_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventFocus*" "event")
  )
)
(define-virtual focus_out_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventFocus*" "event")
  )
)
(define-virtual map_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventAny*" "event")
  )
)
(define-virtual unmap_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventAny*" "event")
  )
)
(define-virtual property_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventProperty*" "event")
  )
)
(define-virtual selection_clear_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventSelection*" "event")
  )
)
(define-virtual selection_request_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventSelection*" "event")
  )
)
(define-virtual selection_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventSelection*" "event")
  )
)
(define-virtual proximity_in_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventProximity*" "event")
  )
)
(define-virtual proximity_out_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventProximity*" "event")
  )
)
(define-virtual visibility_notify_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventVisibility*" "event")
  )
)
(define-virtual client_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventClient*" "event")
  )
)
(define-virtual no_expose_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventAny*" "event")
  )
)
(define-virtual window_state_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventWindowState*" "event")
  )
)
(define-virtual selection_get
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkSelectionData*" "selection_data")
    '("guint" "info")
    '("guint" "time_")
  )
)
(define-virtual selection_received
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GtkSelectionData*" "selection_data")
    '("guint" "time_")
  )
)
(define-virtual drag_begin
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
  )
)
(define-virtual drag_end
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
  )
)
(define-virtual drag_data_get
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GtkSelectionData*" "selection_data")
    '("guint" "info")
    '("guint" "time_")
  )
)
(define-virtual drag_data_delete
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
  )
)
(define-virtual drag_leave
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("guint" "time_")
  )
)
(define-virtual drag_motion
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkDragContext*" "context")
    '("gint" "x")
    '("gint" "y")
    '("guint" "time_")
  )
)
(define-virtual drag_drop
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkDragContext*" "context")
    '("gint" "x")
    '("gint" "y")
    '("guint" "time_")
  )
)
(define-virtual drag_data_received
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("gint" "x")
    '("gint" "y")
    '("GtkSelectionData*" "selection_data")
    '("guint" "info")
    '("guint" "time_")
  )
)
(define-virtual popup_menu
  (of-object "GtkWidget")
  (return-type "gboolean")
)
(define-virtual show_help
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GtkWidgetHelpType" "help_type")
  )
)
(define-virtual get_accessible
  (of-object "GtkWidget")
  (return-type "AtkObject*")
)

(define-virtual screen_changed
  (of-object "GtkWidget")
  (return-type "none")
  (parameters
    '("GdkScreen*" "previous_screen")
  )
)
(define-virtual can_activate_accel
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("guint" "signal_id")
  )
)
(define-virtual grab_broken_event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (parameters
    '("GdkEventGrabBroken*" "event")
  )
)



(define-function gtk_requisition_get_type
  (c-name "gtk_requisition_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "GtkRequisition")
  (c-name "gtk_requisition_copy")
  (return-type "GtkRequisition*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "GtkRequisition")
  (c-name "gtk_requisition_free")
  (return-type "none")
)



;; From /opt/gtk2/include/gtk-2.0/gtk/gtkwindow.h

(define-function gtk_window_get_type
  (c-name "gtk_window_get_type")
  (return-type "GType")
)

(define-method set_title
  (of-object "GtkWindow")
  (c-name "gtk_window_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "GtkWindow")
  (c-name "gtk_window_get_title")
  (return-type "const-gchar*")
)

(define-method set_wmclass
  (of-object "GtkWindow")
  (c-name "gtk_window_set_wmclass")
  (return-type "none")
  (parameters
    '("const-gchar*" "wmclass_name")
    '("const-gchar*" "wmclass_class")
  )
)

(define-method set_role
  (of-object "GtkWindow")
  (c-name "gtk_window_set_role")
  (return-type "none")
  (parameters
    '("const-gchar*" "role")
  )
)

(define-method get_role
  (of-object "GtkWindow")
  (c-name "gtk_window_get_role")
  (return-type "const-gchar*")
)

(define-method add_accel_group
  (of-object "GtkWindow")
  (c-name "gtk_window_add_accel_group")
  (return-type "none")
  (parameters
    '("GtkAccelGroup*" "accel_group")
  )
)

(define-method remove_accel_group
  (of-object "GtkWindow")
  (c-name "gtk_window_remove_accel_group")
  (return-type "none")
  (parameters
    '("GtkAccelGroup*" "accel_group")
  )
)

(define-method set_position
  (of-object "GtkWindow")
  (c-name "gtk_window_set_position")
  (return-type "none")
  (parameters
    '("GtkWindowPosition" "position")
  )
)

(define-method activate_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_activate_focus")
  (return-type "gboolean")
)

(define-method set_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_set_focus")
  (return-type "none")
  (parameters
    '("GtkWidget*" "focus" (null-ok))
  )
)

(define-method get_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_get_focus")
  (return-type "GtkWidget*")
)

(define-method set_default
  (of-object "GtkWindow")
  (c-name "gtk_window_set_default")
  (return-type "none")
  (parameters
    '("GtkWidget*" "default_widget" (null-ok))
  )
)

(define-method activate_default
  (of-object "GtkWindow")
  (c-name "gtk_window_activate_default")
  (return-type "gboolean")
)

(define-method set_transient_for
  (of-object "GtkWindow")
  (c-name "gtk_window_set_transient_for")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent" (null-ok))
  )
)

(define-method get_transient_for
  (of-object "GtkWindow")
  (c-name "gtk_window_get_transient_for")
  (return-type "GtkWindow*")
)

(define-method set_type_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_set_type_hint")
  (return-type "none")
  (parameters
    '("GdkWindowTypeHint" "hint")
  )
)

(define-method get_type_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_get_type_hint")
  (return-type "GdkWindowTypeHint")
)

(define-method set_skip_taskbar_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_set_skip_taskbar_hint")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_skip_taskbar_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_get_skip_taskbar_hint")
  (return-type "gboolean")
)

(define-method set_skip_pager_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_set_skip_pager_hint")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_skip_pager_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_get_skip_pager_hint")
  (return-type "gboolean")
)


(define-method set_urgency_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_set_urgency_hint")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_urgency_hint
  (of-object "GtkWindow")
  (c-name "gtk_window_get_urgency_hint")
  (return-type "gboolean")
)

(define-method set_accept_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_set_accept_focus")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_accept_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_get_accept_focus")
  (return-type "gboolean")
)

(define-method set_destroy_with_parent
  (of-object "GtkWindow")
  (c-name "gtk_window_set_destroy_with_parent")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_destroy_with_parent
  (of-object "GtkWindow")
  (c-name "gtk_window_get_destroy_with_parent")
  (return-type "gboolean")
)

(define-method set_resizable
  (of-object "GtkWindow")
  (c-name "gtk_window_set_resizable")
  (return-type "none")
  (parameters
    '("gboolean" "resizable")
  )
)

(define-method get_resizable
  (of-object "GtkWindow")
  (c-name "gtk_window_get_resizable")
  (return-type "gboolean")
)

(define-method set_gravity
  (of-object "GtkWindow")
  (c-name "gtk_window_set_gravity")
  (return-type "none")
  (parameters
    '("GdkGravity" "gravity")
  )
)

(define-method get_gravity
  (of-object "GtkWindow")
  (c-name "gtk_window_get_gravity")
  (return-type "GdkGravity")
)

(define-method set_geometry_hints
  (of-object "GtkWindow")
  (c-name "gtk_window_set_geometry_hints")
  (return-type "none")
  (parameters
    '("GtkWidget*" "geometry_widget")
    '("GdkGeometry*" "geometry")
    '("GdkWindowHints" "geom_mask")
  )
)

(define-method set_screen
  (of-object "GtkWindow")
  (c-name "gtk_window_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GtkWindow")
  (c-name "gtk_window_get_screen")
  (return-type "GdkScreen*")
)

(define-method is_active
  (of-object "GtkWindow")
  (c-name "gtk_window_is_active")
  (return-type "gboolean")
)

(define-method has_toplevel_focus
  (of-object "GtkWindow")
  (c-name "gtk_window_has_toplevel_focus")
  (return-type "gboolean")
)

(define-method set_has_frame
  (of-object "GtkWindow")
  (c-name "gtk_window_set_has_frame")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_has_frame
  (of-object "GtkWindow")
  (c-name "gtk_window_get_has_frame")
  (return-type "gboolean")
)

(define-method set_frame_dimensions
  (of-object "GtkWindow")
  (c-name "gtk_window_set_frame_dimensions")
  (return-type "none")
  (parameters
    '("gint" "left")
    '("gint" "top")
    '("gint" "right")
    '("gint" "bottom")
  )
)

(define-method get_frame_dimensions
  (of-object "GtkWindow")
  (c-name "gtk_window_get_frame_dimensions")
  (return-type "none")
  (parameters
    '("gint*" "left")
    '("gint*" "top")
    '("gint*" "right")
    '("gint*" "bottom")
  )
)

(define-method set_decorated
  (of-object "GtkWindow")
  (c-name "gtk_window_set_decorated")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_decorated
  (of-object "GtkWindow")
  (c-name "gtk_window_get_decorated")
  (return-type "gboolean")
)

(define-method set_icon_list
  (of-object "GtkWindow")
  (c-name "gtk_window_set_icon_list")
  (return-type "none")
  (parameters
    '("GList*" "list")
  )
)

(define-method get_icon_list
  (of-object "GtkWindow")
  (c-name "gtk_window_get_icon_list")
  (return-type "GList*")
)

(define-method set_icon
  (of-object "GtkWindow")
  (c-name "gtk_window_set_icon")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "icon" (null-ok))
  )
)

(define-method set_icon_from_file
  (of-object "GtkWindow")
  (c-name "gtk_window_set_icon_from_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method get_icon
  (of-object "GtkWindow")
  (c-name "gtk_window_get_icon")
  (return-type "GdkPixbuf*")
)

(define-function window_set_default_icon_list
  (c-name "gtk_window_set_default_icon_list")
  (return-type "none")
  (parameters
    '("GList*" "list")
  )
)

(define-function window_get_default_icon_list
  (c-name "gtk_window_get_default_icon_list")
  (return-type "GList*")
)

(define-function window_set_default_icon
  (c-name "gtk_window_set_default_icon")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "icon")
  )
)

(define-function window_set_default_icon_from_file
  (c-name "gtk_window_set_default_icon_from_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-function window_set_auto_startup_notification
  (c-name "gtk_window_set_auto_startup_notification")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_modal
  (of-object "GtkWindow")
  (c-name "gtk_window_set_modal")
  (return-type "none")
  (parameters
    '("gboolean" "modal")
  )
)

(define-method get_modal
  (of-object "GtkWindow")
  (c-name "gtk_window_get_modal")
  (return-type "gboolean")
)

(define-function window_list_toplevels
  (c-name "gtk_window_list_toplevels")
  (return-type "GList*")
)

(define-method add_mnemonic
  (of-object "GtkWindow")
  (c-name "gtk_window_add_mnemonic")
  (return-type "none")
  (parameters
    '("guint" "keyval")
    '("GtkWidget*" "target")
  )
)

(define-method remove_mnemonic
  (of-object "GtkWindow")
  (c-name "gtk_window_remove_mnemonic")
  (return-type "none")
  (parameters
    '("guint" "keyval")
    '("GtkWidget*" "target")
  )
)

(define-method mnemonic_activate
  (of-object "GtkWindow")
  (c-name "gtk_window_mnemonic_activate")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
    '("GdkModifierType" "modifier")
  )
)

(define-method set_mnemonic_modifier
  (of-object "GtkWindow")
  (c-name "gtk_window_set_mnemonic_modifier")
  (return-type "none")
  (parameters
    '("GdkModifierType" "modifier")
  )
)

(define-method get_mnemonic_modifier
  (of-object "GtkWindow")
  (c-name "gtk_window_get_mnemonic_modifier")
  (return-type "GdkModifierType")
)

(define-method activate_key
  (of-object "GtkWindow")
  (c-name "gtk_window_activate_key")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)

(define-method propagate_key_event
  (of-object "GtkWindow")
  (c-name "gtk_window_propagate_key_event")
  (return-type "gboolean")
  (parameters
    '("GdkEventKey*" "event")
  )
)

(define-method present
  (of-object "GtkWindow")
  (c-name "gtk_window_present")
  (return-type "none")
)

(define-method present_with_time
  (of-object "GtkWindow")
  (c-name "gtk_window_present_with_time")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method iconify
  (of-object "GtkWindow")
  (c-name "gtk_window_iconify")
  (return-type "none")
)

(define-method deiconify
  (of-object "GtkWindow")
  (c-name "gtk_window_deiconify")
  (return-type "none")
)

(define-method stick
  (of-object "GtkWindow")
  (c-name "gtk_window_stick")
  (return-type "none")
)

(define-method unstick
  (of-object "GtkWindow")
  (c-name "gtk_window_unstick")
  (return-type "none")
)

(define-method maximize
  (of-object "GtkWindow")
  (c-name "gtk_window_maximize")
  (return-type "none")
)

(define-method unmaximize
  (of-object "GtkWindow")
  (c-name "gtk_window_unmaximize")
  (return-type "none")
)

(define-method fullscreen
  (of-object "GtkWindow")
  (c-name "gtk_window_fullscreen")
  (return-type "none")
)

(define-method unfullscreen
  (of-object "GtkWindow")
  (c-name "gtk_window_unfullscreen")
  (return-type "none")
)

(define-method set_keep_above
  (of-object "GtkWindow")
  (c-name "gtk_window_set_keep_above")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_keep_below
  (of-object "GtkWindow")
  (c-name "gtk_window_set_keep_below")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method begin_resize_drag
  (of-object "GtkWindow")
  (c-name "gtk_window_begin_resize_drag")
  (return-type "none")
  (parameters
    '("GdkWindowEdge" "edge")
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method begin_move_drag
  (of-object "GtkWindow")
  (c-name "gtk_window_begin_move_drag")
  (return-type "none")
  (parameters
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method set_policy
  (of-object "GtkWindow")
  (c-name "gtk_window_set_policy")
  (return-type "none")
  (parameters
    '("gint" "allow_shrink")
    '("gint" "allow_grow")
    '("gint" "auto_shrink")
  )
  (deprecated "use GtkWindow.set_resizable")
)

(define-method set_default_size
  (of-object "GtkWindow")
  (c-name "gtk_window_set_default_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_default_size
  (of-object "GtkWindow")
  (c-name "gtk_window_get_default_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method resize
  (of-object "GtkWindow")
  (c-name "gtk_window_resize")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_size
  (of-object "GtkWindow")
  (c-name "gtk_window_get_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method move
  (of-object "GtkWindow")
  (c-name "gtk_window_move")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_position
  (of-object "GtkWindow")
  (c-name "gtk_window_get_position")
  (return-type "none")
  (parameters
    '("gint*" "root_x")
    '("gint*" "root_y")
  )
)

(define-method parse_geometry
  (of-object "GtkWindow")
  (c-name "gtk_window_parse_geometry")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "geometry")
  )
)

(define-method reshow_with_initial_size
  (of-object "GtkWindow")
  (c-name "gtk_window_reshow_with_initial_size")
  (return-type "none")
)

(define-function gtk_window_group_get_type
  (c-name "gtk_window_group_get_type")
  (return-type "GType")
)

(define-function window_group_new
  (c-name "gtk_window_group_new")
  (is-constructor-of "GtkWindowGroup")
  (return-type "GtkWindowGroup*")
)

(define-method add_window
  (of-object "GtkWindowGroup")
  (c-name "gtk_window_group_add_window")
  (return-type "none")
  (parameters
    '("GtkWindow*" "window")
  )
)

(define-method remove_window
  (of-object "GtkWindowGroup")
  (c-name "gtk_window_group_remove_window")
  (return-type "none")
  (parameters
    '("GtkWindow*" "window")
  )
)

(define-method remove_embedded_xid
  (of-object "GtkWindow")
  (c-name "gtk_window_remove_embedded_xid")
  (return-type "none")
  (parameters
    '("guint" "xid")
  )
)

(define-method add_embedded_xid
  (of-object "GtkWindow")
  (c-name "gtk_window_add_embedded_xid")
  (return-type "none")
  (parameters
    '("guint" "xid")
  )
)

(define-method set_focus_on_map
  (of-object "GtkWindow")
  (c-name "gtk_window_set_focus_on_map")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_focus_on_map
  (of-object "GtkWindow")
  (c-name "gtk_window_get_focus_on_map")
  (return-type "gboolean")
)


(define-method set_icon_name
  (of-object "GtkWindow")
  (c-name "gtk_window_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name" (null-ok))
  )
)

(define-method get_icon_name
  (of-object "GtkWindow")
  (c-name "gtk_window_get_icon_name")
  (return-type "const-gchar*")
)


(define-function window_set_default_icon_name
  (c-name "gtk_window_set_default_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual set_focus
  (of-object "GtkWindow")
  (return-type "none")
  (parameters
    '("GtkWidget*" "focus" (null-ok))
  )
)
(define-virtual frame_event
  (of-object "GtkWindow")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
  )
)
(define-virtual activate_focus
  (of-object "GtkWindow")
  (return-type "none")
)
(define-virtual activate_default
  (of-object "GtkWindow")
  (return-type "none")
)
(define-virtual move_focus
  (of-object "GtkWindow")
  (return-type "none")
  (parameters
    '("GtkDirectionType" "direction")
  )
)
(define-virtual keys_changed
  (of-object "GtkWindow")
  (return-type "none")
)
;; -*- scheme -*-
;;
;; Note, everything should be sorted in here.

;; Boxed types ...

(define-boxed Border
  (in-module "Gtk")
  (c-name "GtkBorder")
  (gtype-id "GTK_TYPE_BORDER")
  (copy-func "gtk_border_copy")
  (release-func "gtk_border_free")
  (fields
    '("gint" "left")
    '("gint" "right")
    '("gint" "top")
    '("gint" "bottom")
  )
)

(define-boxed IconInfo
  (in-module "Gtk")
  (c-name "GtkIconInfo")
  (gtype-id "GTK_TYPE_ICON_INFO")
  (copy-func "gtk_icon_info_copy")
  (release-func "gtk_icon_info_free")
)

(define-boxed IconSet
  (in-module "Gtk")
  (c-name "GtkIconSet")
  (gtype-id "GTK_TYPE_ICON_SET")
)

(define-boxed IconSource
  (in-module "Gtk")
  (c-name "GtkIconSource")
  (gtype-id "GTK_TYPE_ICON_SOURCE")
  (copy-func "gtk_icon_source_copy")
  (release-func "gtk_icon_source_free")
)

(define-boxed Requisition
  (in-module "Gtk")
  (c-name "GtkRequisition")
  (gtype-id "GTK_TYPE_REQUISITION")
  (fields
    '("gint" "width")
    '("gint" "height")
  )
)

(define-boxed SelectionData
  (in-module "Gtk")
  (c-name "GtkSelectionData")
  (gtype-id "GTK_TYPE_SELECTION_DATA")
  (copy-func "gtk_selection_data_copy")
  (release-func "gtk_selection_data_free")
  (fields
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "type")
    '("gint" "format")
    '("guchar*" "data")
  )
)

(define-boxed TextIter
  (in-module "Gtk")
  (c-name "GtkTextIter")
  (gtype-id "GTK_TYPE_TEXT_ITER")
  (copy-func "gtk_text_iter_copy")
  (release-func "gtk_text_iter_free")
)

(define-boxed TreeIter
  (in-module "Gtk")
  (c-name "GtkTreeIter")
  (gtype-id "GTK_TYPE_TREE_ITER")
  (copy-func "gtk_tree_iter_copy")
  (release-func "gtk_tree_iter_free")
)

(define-boxed TreeRowReference
  (in-module "Gtk")
  (c-name "GtkTreeRowReference")
  (gtype-id "GTK_TYPE_TREE_ROW_REFERENCE")
  (copy-func "gtk_tree_row_reference_copy")
  (release-func "gtk_tree_row_reference_free")
)

;; Interfaces ...

(define-interface CellEditable
  (in-module "Gtk")
  (c-name "GtkCellEditable")
  (gtype-id "GTK_TYPE_CELL_EDITABLE")
  (prerequisite "GtkWidget")
)

(define-interface CellLayout
  (in-module "Gtk")
  (c-name "GtkCellLayout")
  (gtype-id "GTK_TYPE_CELL_LAYOUT")
  (prerequisite "GObject")
)

(define-interface Editable
  (in-module "Gtk")
  (c-name "GtkEditable")
  (gtype-id "GTK_TYPE_EDITABLE")
  (vtable "GtkEditableClass")
  (prerequisite "GtkWidget")
)

(define-interface FileChooser
  (in-module "Gtk")
  (c-name "GtkFileChooser")
  (gtype-id "GTK_TYPE_FILE_CHOOSER")
  (prerequisite "GtkWidget")
)

(define-interface TreeDragDest
  (in-module "Gtk")
  (c-name "GtkTreeDragDest")
  (gtype-id "GTK_TYPE_TREE_DRAG_DEST")
)

(define-interface TreeDragSource
  (in-module "Gtk")
  (c-name "GtkTreeDragSource")
  (gtype-id "GTK_TYPE_TREE_DRAG_SOURCE")
)

(define-interface TreeModel
  (in-module "Gtk")
  (c-name "GtkTreeModel")
  (gtype-id "GTK_TYPE_TREE_MODEL")
  (prerequisite "GObject")
)

(define-interface TreeSortable
  (in-module "Gtk")
  (c-name "GtkTreeSortable")
  (gtype-id "GTK_TYPE_TREE_SORTABLE")
  (prerequisite "GtkTreeModel")
  (prerequisite "GObject")
)

;; Objects ...

(define-object AboutDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkAboutDialog")
  (gtype-id "GTK_TYPE_ABOUT_DIALOG")
)

(define-object AccelGroup
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkAccelGroup")
  (gtype-id "GTK_TYPE_ACCEL_GROUP")
)

(define-object AccelLabel
  (in-module "Gtk")
  (parent "GtkLabel")
  (c-name "GtkAccelLabel")
  (gtype-id "GTK_TYPE_ACCEL_LABEL")
)

(define-object AccelMap
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkAccelMap")
  (gtype-id "GTK_TYPE_ACCEL_MAP")
)

(define-object Accessible
  (in-module "Gtk")
  (parent "AtkObject")
  (c-name "GtkAccessible")
  (gtype-id "GTK_TYPE_ACCESSIBLE")
)

(define-object Action
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkAction")
  (gtype-id "GTK_TYPE_ACTION")
)

(define-object ActionGroup
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkActionGroup")
  (gtype-id "GTK_TYPE_ACTION_GROUP")
)

(define-object Adjustment
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkAdjustment")
  (gtype-id "GTK_TYPE_ADJUSTMENT")
  (fields
    '("gfloat" "value")
    '("gfloat" "lower")
    '("gfloat" "upper")
    '("gfloat" "step_increment")
    '("gfloat" "page_increment")
    '("gfloat" "page_size")
  )
)

(define-object Alignment
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkAlignment")
  (gtype-id "GTK_TYPE_ALIGNMENT")
)

(define-object Arrow
  (in-module "Gtk")
  (parent "GtkMisc")
  (c-name "GtkArrow")
  (gtype-id "GTK_TYPE_ARROW")
)

(define-object AspectFrame
  (in-module "Gtk")
  (parent "GtkFrame")
  (c-name "GtkAspectFrame")
  (gtype-id "GTK_TYPE_ASPECT_FRAME")
)

(define-object Bin
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkBin")
  (gtype-id "GTK_TYPE_BIN")
  (fields
    '("GtkWidget*" "child")
  )
)

(define-object Box
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkBox")
  (gtype-id "GTK_TYPE_BOX")
)

(define-object Button
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkButton")
  (gtype-id "GTK_TYPE_BUTTON")
)

(define-object ButtonBox
  (in-module "Gtk")
  (parent "GtkBox")
  (c-name "GtkButtonBox")
  (gtype-id "GTK_TYPE_BUTTON_BOX")
)

(define-object Calendar
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkCalendar")
  (gtype-id "GTK_TYPE_CALENDAR")
)

(define-object CellRenderer
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkCellRenderer")
  (gtype-id "GTK_TYPE_CELL_RENDERER")
)

(define-object CellRendererCombo
  (in-module "Gtk")
  (parent "GtkCellRendererText")
  (c-name "GtkCellRendererCombo")
  (gtype-id "GTK_TYPE_CELL_RENDERER_COMBO")
)

(define-object CellRendererPixbuf
  (in-module "Gtk")
  (parent "GtkCellRenderer")
  (c-name "GtkCellRendererPixbuf")
  (gtype-id "GTK_TYPE_CELL_RENDERER_PIXBUF")
)

(define-object CellRendererProgress
  (in-module "Gtk")
  (parent "GtkCellRenderer")
  (c-name "GtkCellRendererProgress")
  (gtype-id "GTK_TYPE_CELL_RENDERER_PROGRESS")
)

(define-object CellRendererText
  (in-module "Gtk")
  (parent "GtkCellRenderer")
  (c-name "GtkCellRendererText")
  (gtype-id "GTK_TYPE_CELL_RENDERER_TEXT")
)

(define-object CellRendererToggle
  (in-module "Gtk")
  (parent "GtkCellRenderer")
  (c-name "GtkCellRendererToggle")
  (gtype-id "GTK_TYPE_CELL_RENDERER_TOGGLE")
)

(define-object CellView
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkCellView")
  (gtype-id "GTK_TYPE_CELL_VIEW")
  (implements "GtkCellLayout")
)

(define-object CheckButton
  (in-module "Gtk")
  (parent "GtkToggleButton")
  (c-name "GtkCheckButton")
  (gtype-id "GTK_TYPE_CHECK_BUTTON")
)

(define-object CheckMenuItem
  (in-module "Gtk")
  (parent "GtkMenuItem")
  (c-name "GtkCheckMenuItem")
  (gtype-id "GTK_TYPE_CHECK_MENU_ITEM")
  (fields
    '("gboolean" "active")
  )
)

(define-object Clipboard
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkClipboard")
  (gtype-id "GTK_TYPE_CLIPBOARD")
)

(define-object CList
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkCList")
  (gtype-id "GTK_TYPE_CLIST")
  (fields
    '("GList*" "selection")
    '("gint" "focus_row")
    '("gint" "rows")
    '("gint" "columns")
  )
)

(define-object ColorButton
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkColorButton")
  (gtype-id "GTK_TYPE_COLOR_BUTTON")
)

(define-object ColorSelection
  (in-module "Gtk")
  (parent "GtkVBox")
  (c-name "GtkColorSelection")
  (gtype-id "GTK_TYPE_COLOR_SELECTION")
)

(define-object ColorSelectionDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkColorSelectionDialog")
  (gtype-id "GTK_TYPE_COLOR_SELECTION_DIALOG")
  (fields
    '("GtkWidget*" "colorsel")
    '("GtkWidget*" "ok_button")
    '("GtkWidget*" "cancel_button")
    '("GtkWidget*" "help_button")
  )
)

(define-object Combo
  (in-module "Gtk")
  (parent "GtkHBox")
  (c-name "GtkCombo")
  (gtype-id "GTK_TYPE_COMBO")
  (fields
    '("GtkWidget*" "entry")
    '("GtkWidget*" "list")
  )
)

(define-object ComboBox
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkComboBox")
  (gtype-id "GTK_TYPE_COMBO_BOX")
  (implements "GtkCellEditable")
  (implements "GtkCellLayout")
)

(define-object ComboBoxEntry
  (in-module "Gtk")
  (parent "GtkComboBox")
  (c-name "GtkComboBoxEntry")
  (gtype-id "GTK_TYPE_COMBO_BOX_ENTRY")
  (implements "GtkCellEditable")
  (implements "GtkCellLayout")
)

(define-object Container
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkContainer")
  (gtype-id "GTK_TYPE_CONTAINER")
  (fields
    '("GtkWidget*" "focus_child")
    '("guint" "border_width")
    '("guint" "need_resize")
    '("guint" "resize_mode")
    '("guint" "reallocate_redraws")
    '("guint" "has_focus_chain")    
  )
)


(define-object CTree
  (in-module "Gtk")
  (parent "GtkCList")
  (c-name "GtkCTree")
  (gtype-id "GTK_TYPE_CTREE")
  (fields
    '("GList*" "selection")
  )
)

(define-object Curve
  (in-module "Gtk")
  (parent "GtkDrawingArea")
  (c-name "GtkCurve")
  (gtype-id "GTK_TYPE_CURVE")
)

(define-object Dialog
  (in-module "Gtk")
  (parent "GtkWindow")
  (c-name "GtkDialog")
  (gtype-id "GTK_TYPE_DIALOG")
  (fields
    '("GtkWidget*" "vbox")
    '("GtkWidget*" "action_area")
  )
)

(define-object DrawingArea
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkDrawingArea")
  (gtype-id "GTK_TYPE_DRAWING_AREA")
)

(define-object Entry
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkEntry")
  (gtype-id "GTK_TYPE_ENTRY")
  (implements "GtkEditable")
  (implements "GtkCellEditable")
)

(define-object EntryCompletion
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkEntryCompletion")
  (gtype-id "GTK_TYPE_ENTRY_COMPLETION")
  (implements "GtkCellLayout")
)

(define-object EventBox
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkEventBox")
  (gtype-id "GTK_TYPE_EVENT_BOX")
)

(define-object Expander
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkExpander")
  (gtype-id "GTK_TYPE_EXPANDER")
)

(define-object FileChooserButton
  (in-module "Gtk")
  (parent "GtkHBox")
  (c-name "GtkFileChooserButton")
  (gtype-id "GTK_TYPE_FILE_CHOOSER_BUTTON")
  (implements "GtkFileChooser")
)

(define-object FileChooserDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkFileChooserDialog")
  (gtype-id "GTK_TYPE_FILE_CHOOSER_DIALOG")
  (implements "GtkFileChooser")
)

(define-object FileChooserWidget
  (in-module "Gtk")
  (parent "GtkVBox")
  (c-name "GtkFileChooserWidget")
  (gtype-id "GTK_TYPE_FILE_CHOOSER_WIDGET")
  (implements "GtkFileChooser")
)

(define-object FileFilter
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkFileFilter")
  (gtype-id "GTK_TYPE_FILE_FILTER")
)

(define-object FileSelection
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkFileSelection")
  (gtype-id "GTK_TYPE_FILE_SELECTION")
  (fields
    '("GtkWidget*" "dir_list")
    '("GtkWidget*" "file_list")
    '("GtkWidget*" "selection_entry")
    '("GtkWidget*" "selection_text")
    '("GtkWidget*" "main_vbox")
    '("GtkWidget*" "ok_button")
    '("GtkWidget*" "cancel_button")
    '("GtkWidget*" "help_button")
    '("GtkWidget*" "history_pulldown")
    '("GtkWidget*" "history_menu")
    '("GtkWidget*" "fileop_dialog")
    '("GtkWidget*" "fileop_entry")
    '("gchar*"     "fileop_file")    
    '("GtkWidget*" "fileop_c_dir")
    '("GtkWidget*" "fileop_del_file")    
    '("GtkWidget*" "fileop_ren_file")        
    '("GtkWidget*" "button_area")        
    '("GtkWidget*" "action_area")
  )
)

(define-object Fixed
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkFixed")
  (gtype-id "GTK_TYPE_FIXED")
)

(define-object FontButton
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkFontButton")
  (gtype-id "GTK_TYPE_FONT_BUTTON")
)

(define-object FontSelection
  (in-module "Gtk")
  (parent "GtkVBox")
  (c-name "GtkFontSelection")
  (gtype-id "GTK_TYPE_FONT_SELECTION")
)

(define-object FontSelectionDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkFontSelectionDialog")
  (gtype-id "GTK_TYPE_FONT_SELECTION_DIALOG")
  (fields
    '("GtkWidget*" "fontsel")
    '("GtkWidget*" "main_vbox")
    '("GtkWidget*" "action_area")
    '("GtkWidget*" "ok_button")
    '("GtkWidget*" "apply_button")
    '("GtkWidget*" "cancel_button")
  )
)

(define-object Frame
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkFrame")
  (gtype-id "GTK_TYPE_FRAME")
)

(define-object GammaCurve
  (in-module "Gtk")
  (parent "GtkVBox")
  (c-name "GtkGammaCurve")
  (gtype-id "GTK_TYPE_GAMMA_CURVE")
  (fields
    '("GtkWidget*" "table")
    '("GtkWidget*" "curve")
    '("gfloat" "gamma")
    '("GtkWidget*" "gamma_dialog")
    '("GtkWidget*" "gamma_text")
  )
)

(define-object HandleBox
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkHandleBox")
  (gtype-id "GTK_TYPE_HANDLE_BOX")
)

(define-object HBox
  (in-module "Gtk")
  (parent "GtkBox")
  (c-name "GtkHBox")
  (gtype-id "GTK_TYPE_HBOX")
)

(define-object HButtonBox
  (in-module "Gtk")
  (parent "GtkButtonBox")
  (c-name "GtkHButtonBox")
  (gtype-id "GTK_TYPE_HBUTTON_BOX")
)

(define-object HPaned
  (in-module "Gtk")
  (parent "GtkPaned")
  (c-name "GtkHPaned")
  (gtype-id "GTK_TYPE_HPANED")
)

(define-object HRuler
  (in-module "Gtk")
  (parent "GtkRuler")
  (c-name "GtkHRuler")
  (gtype-id "GTK_TYPE_HRULER")
)

(define-object HScale
  (in-module "Gtk")
  (parent "GtkScale")
  (c-name "GtkHScale")
  (gtype-id "GTK_TYPE_HSCALE")
)

(define-object HScrollbar
  (in-module "Gtk")
  (parent "GtkScrollbar")
  (c-name "GtkHScrollbar")
  (gtype-id "GTK_TYPE_HSCROLLBAR")
)

(define-object HSeparator
  (in-module "Gtk")
  (parent "GtkSeparator")
  (c-name "GtkHSeparator")
  (gtype-id "GTK_TYPE_HSEPARATOR")
)

(define-object IconFactory
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkIconFactory")
  (gtype-id "GTK_TYPE_ICON_FACTORY")
)

(define-object IconTheme
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkIconTheme")
  (gtype-id "GTK_TYPE_ICON_THEME")
)

(define-object IconView
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkIconView")
  (gtype-id "GTK_TYPE_ICON_VIEW")
  (implements "GtkCellLayout")
)

(define-object Image
  (in-module "Gtk")
  (parent "GtkMisc")
  (c-name "GtkImage")
  (gtype-id "GTK_TYPE_IMAGE")
)

(define-object ImageMenuItem
  (in-module "Gtk")
  (parent "GtkMenuItem")
  (c-name "GtkImageMenuItem")
  (gtype-id "GTK_TYPE_IMAGE_MENU_ITEM")
)

(define-object IMContext
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkIMContext")
  (gtype-id "GTK_TYPE_IM_CONTEXT")
)

(define-object IMContextSimple
  (in-module "Gtk")
  (parent "GtkIMContext")
  (c-name "GtkIMContextSimple")
  (gtype-id "GTK_TYPE_IM_CONTEXT_SIMPLE")
)

(define-object IMMulticontext
  (in-module "Gtk")
  (parent "GtkIMContext")
  (c-name "GtkIMMulticontext")
  (gtype-id "GTK_TYPE_IM_MULTICONTEXT")
)

(define-object InputDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkInputDialog")
  (gtype-id "GTK_TYPE_INPUT_DIALOG")
)

(define-object Invisible
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkInvisible")
  (gtype-id "GTK_TYPE_INVISIBLE")
)

(define-object Item
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkItem")
  (gtype-id "GTK_TYPE_ITEM")
)

(define-object ItemFactory
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkItemFactory")
  (gtype-id "GTK_TYPE_ITEM_FACTORY")
)

(define-object Label
  (in-module "Gtk")
  (parent "GtkMisc")
  (c-name "GtkLabel")
  (gtype-id "GTK_TYPE_LABEL")
)

(define-object Layout
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkLayout")
  (gtype-id "GTK_TYPE_LAYOUT")
  (fields
   '("GdkWindow*" "bin_window")
   )
)

(define-object List
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkList")
  (gtype-id "GTK_TYPE_LIST")
  (fields
    '("GList*" "selection")
  )
)

(define-object ListItem
  (in-module "Gtk")
  (parent "GtkItem")
  (c-name "GtkListItem")
  (gtype-id "GTK_TYPE_LIST_ITEM")
)

(define-object ListStore
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkListStore")
  (gtype-id "GTK_TYPE_LIST_STORE")
  (implements "GtkTreeModel")
  (implements "GtkTreeDragSource")
  (implements "GtkTreeDragDest")
  (implements "GtkTreeSortable")
)

(define-object Menu
  (in-module "Gtk")
  (parent "GtkMenuShell")
  (c-name "GtkMenu")
  (gtype-id "GTK_TYPE_MENU")
)

(define-object MenuBar
  (in-module "Gtk")
  (parent "GtkMenuShell")
  (c-name "GtkMenuBar")
  (gtype-id "GTK_TYPE_MENU_BAR")
)

(define-object MenuItem
  (in-module "Gtk")
  (parent "GtkItem")
  (c-name "GtkMenuItem")
  (gtype-id "GTK_TYPE_MENU_ITEM")
)

(define-object MenuShell
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkMenuShell")
  (gtype-id "GTK_TYPE_MENU_SHELL")
)

(define-object MenuToolButton
  (in-module "Gtk")
  (parent "GtkToolButton")
  (c-name "GtkMenuToolButton")
  (gtype-id "GTK_TYPE_MENU_TOOL_BUTTON")
)

(define-object MessageDialog
  (in-module "Gtk")
  (parent "GtkDialog")
  (c-name "GtkMessageDialog")
  (gtype-id "GTK_TYPE_MESSAGE_DIALOG")
  (fields
    '("GtkWidget*" "image")
    '("GtkWidget*" "label")
  )
)

(define-object Misc
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkMisc")
  (gtype-id "GTK_TYPE_MISC")
)

(define-object Notebook
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkNotebook")
  (gtype-id "GTK_TYPE_NOTEBOOK")
  (fields
    '("GtkPositionType" "tab_pos")
  )
)

(define-object Object
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkObject")
  (gtype-id "GTK_TYPE_OBJECT")
)

(define-object OldEditable
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkOldEditable")
  (gtype-id "GTK_TYPE_OLD_EDITABLE")
  (implements "GtkEditable")
)

(define-object OptionMenu
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkOptionMenu")
  (gtype-id "GTK_TYPE_OPTION_MENU")
)

(define-object Paned
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkPaned")
  (gtype-id "GTK_TYPE_PANED")
)

(define-object Pixmap
  (in-module "Gtk")
  (parent "GtkMisc")
  (c-name "GtkPixmap")
  (gtype-id "GTK_TYPE_PIXMAP")
)

(define-object Plug
  (in-module "Gtk")
  (parent "GtkWindow")
  (c-name "GtkPlug")
  (gtype-id "GTK_TYPE_PLUG")
)

(define-object Preview
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkPreview")
  (gtype-id "GTK_TYPE_PREVIEW")
)

(define-object Progress
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkProgress")
  (gtype-id "GTK_TYPE_PROGRESS")
)

(define-object ProgressBar
  (in-module "Gtk")
  (parent "GtkProgress")
  (c-name "GtkProgressBar")
  (gtype-id "GTK_TYPE_PROGRESS_BAR")
)

(define-object RadioAction
  (in-module "Gtk")
  (parent "GtkToggleAction")
  (c-name "GtkRadioAction")
  (gtype-id "GTK_TYPE_RADIO_ACTION")
)

(define-object RadioButton
  (in-module "Gtk")
  (parent "GtkCheckButton")
  (c-name "GtkRadioButton")
  (gtype-id "GTK_TYPE_RADIO_BUTTON")
)

(define-object RadioMenuItem
  (in-module "Gtk")
  (parent "GtkCheckMenuItem")
  (c-name "GtkRadioMenuItem")
  (gtype-id "GTK_TYPE_RADIO_MENU_ITEM")
)

(define-object RadioToolButton
  (in-module "Gtk")
  (parent "GtkToggleToolButton")
  (c-name "GtkRadioToolButton")
  (gtype-id "GTK_TYPE_RADIO_TOOL_BUTTON")
)

(define-object Range
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkRange")
  (gtype-id "GTK_TYPE_RANGE")
)

(define-object RcStyle
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkRcStyle")
  (fields
    '("gchar*" "name")
    '("gchar**" "bg_pixmap_name")
    '("PangoFontDescription*" "font_desc")
    '("GdkColor*" "fg")
    '("GdkColor*" "bg")
    '("GdkColor*" "text")
    '("GdkColor*" "base")
    '("gint" "xthickness")
    '("gint" "ythickness")
  )
  (gtype-id "GTK_TYPE_RC_STYLE")
)

(define-object Ruler
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkRuler")
  (gtype-id "GTK_TYPE_RULER")
)

(define-object Scale
  (in-module "Gtk")
  (parent "GtkRange")
  (c-name "GtkScale")
  (gtype-id "GTK_TYPE_SCALE")
)

(define-object Scrollbar
  (in-module "Gtk")
  (parent "GtkRange")
  (c-name "GtkScrollbar")
  (gtype-id "GTK_TYPE_SCROLLBAR")
)

(define-object ScrolledWindow
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkScrolledWindow")
  (gtype-id "GTK_TYPE_SCROLLED_WINDOW")
)

(define-object Separator
  (in-module "Gtk")
  (parent "GtkWidget")
  (c-name "GtkSeparator")
  (gtype-id "GTK_TYPE_SEPARATOR")
)

(define-object SeparatorMenuItem
  (in-module "Gtk")
  (parent "GtkMenuItem")
  (c-name "GtkSeparatorMenuItem")
  (gtype-id "GTK_TYPE_SEPARATOR_MENU_ITEM")
)

(define-object SeparatorToolItem
  (in-module "Gtk")
  (parent "GtkToolItem")
  (c-name "GtkSeparatorToolItem")
  (gtype-id "GTK_TYPE_SEPARATOR_TOOL_ITEM")
)

(define-object Settings
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkSettings")
  (gtype-id "GTK_TYPE_SETTINGS")
)

(define-object SizeGroup
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkSizeGroup")
  (gtype-id "GTK_TYPE_SIZE_GROUP")
)

(define-object Socket
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkSocket")
  (gtype-id "GTK_TYPE_SOCKET")
)

(define-object SpinButton
  (in-module "Gtk")
  (parent "GtkEntry")
  (c-name "GtkSpinButton")
  (gtype-id "GTK_TYPE_SPIN_BUTTON")
  (implements "GtkEditable")
  (implements "GtkCellEditable")
)

(define-object Statusbar
  (in-module "Gtk")
  (parent "GtkHBox")
  (c-name "GtkStatusbar")
  (gtype-id "GTK_TYPE_STATUSBAR")
)

(define-object Table
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkTable")
  (gtype-id "GTK_TYPE_TABLE")
)

(define-object TearoffMenuItem
  (in-module "Gtk")
  (parent "GtkMenuItem")
  (c-name "GtkTearoffMenuItem")
  (gtype-id "GTK_TYPE_TEAROFF_MENU_ITEM")
)


(define-object TextBuffer
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextBuffer")
  (gtype-id "GTK_TYPE_TEXT_BUFFER")
  (fields
    '("GtkTextTagTable*" "tag_table")
  )
)

(define-object TextChildAnchor
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextChildAnchor")
  (gtype-id "GTK_TYPE_TEXT_CHILD_ANCHOR")
)

(define-object TextMark
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextMark")
  (gtype-id "GTK_TYPE_TEXT_MARK")
)

(define-object TextTag
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextTag")
  (gtype-id "GTK_TYPE_TEXT_TAG")
)

(define-object TextTagTable
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextTagTable")
  (gtype-id "GTK_TYPE_TEXT_TAG_TABLE")
)

(define-object TextView
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkTextView")
  (gtype-id "GTK_TYPE_TEXT_VIEW")
)

(define-object ToggleAction
  (in-module "Gtk")
  (parent "GtkAction")
  (c-name "GtkToggleAction")
  (gtype-id "GTK_TYPE_TOGGLE_ACTION")
)

(define-object ToggleButton
  (in-module "Gtk")
  (parent "GtkButton")
  (c-name "GtkToggleButton")
  (gtype-id "GTK_TYPE_TOGGLE_BUTTON")
  (fields
    '("gboolean" "draw_indicator")
  )
)

(define-object ToggleToolButton
  (in-module "Gtk")
  (parent "GtkToolButton")
  (c-name "GtkToggleToolButton")
  (gtype-id "GTK_TYPE_TOGGLE_TOOL_BUTTON")
)

(define-object Toolbar
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkToolbar")
  (gtype-id "GTK_TYPE_TOOLBAR")
)

(define-object ToolButton
  (in-module "Gtk")
  (parent "GtkToolItem")
  (c-name "GtkToolButton")
  (gtype-id "GTK_TYPE_TOOL_BUTTON")
)

(define-object ToolItem
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkToolItem")
  (gtype-id "GTK_TYPE_TOOL_ITEM")
)

(define-object Tooltips
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkTooltips")
  (fields
    '("GtkWidget*" "tip_window")
    '("GtkWidget*" "tip_label")
    '("GtkTooltipsData*" "active_tips_data")
    '("GList*" "tips_data_list")
    '("guint" "delay")
    '("guint" "enabled")
    '("guint" "use_sticky_delay")
    '("gint" "timer_tag")
  )
  (gtype-id "GTK_TYPE_TOOLTIPS")
)

(define-object TreeModelFilter
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTreeModelFilter")
  (gtype-id "GTK_TYPE_TREE_MODEL_FILTER")
  (implements "GtkTreeModel")
  (implements "GtkTreeDragSource")
)

(define-object TreeModelSort
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTreeModelSort")
  (gtype-id "GTK_TYPE_TREE_MODEL_SORT")
  (implements "GtkTreeModel")
  (implements "GtkTreeDragSource")
  (implements "GtkTreeSortable")
)

(define-object TreeSelection
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTreeSelection")
  (gtype-id "GTK_TYPE_TREE_SELECTION")
)

(define-object TreeStore
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTreeStore")
  (gtype-id "GTK_TYPE_TREE_STORE")
  (implements "GtkTreeModel")
  (implements "GtkTreeDragSource")
  (implements "GtkTreeDragDest")
  (implements "GtkTreeSortable")
)

(define-object TreeView
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkTreeView")
  (gtype-id "GTK_TYPE_TREE_VIEW")
)

(define-object TreeViewColumn
  (in-module "Gtk")
  (parent "GtkObject")
  (c-name "GtkTreeViewColumn")
  (gtype-id "GTK_TYPE_TREE_VIEW_COLUMN")
  (implements "GtkCellLayout")
)

(define-object UIManager
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkUIManager")
  (gtype-id "GTK_TYPE_UI_MANAGER")
)

(define-object VBox
  (in-module "Gtk")
  (parent "GtkBox")
  (c-name "GtkVBox")
  (gtype-id "GTK_TYPE_VBOX")
)

(define-object VButtonBox
  (in-module "Gtk")
  (parent "GtkButtonBox")
  (c-name "GtkVButtonBox")
  (gtype-id "GTK_TYPE_VBUTTON_BOX")
)

(define-object Viewport
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkViewport")
  (gtype-id "GTK_TYPE_VIEWPORT")
)

(define-object VPaned
  (in-module "Gtk")
  (parent "GtkPaned")
  (c-name "GtkVPaned")
  (gtype-id "GTK_TYPE_VPANED")
)

(define-object VRuler
  (in-module "Gtk")
  (parent "GtkRuler")
  (c-name "GtkVRuler")
  (gtype-id "GTK_TYPE_VRULER")
)

(define-object VScale
  (in-module "Gtk")
  (parent "GtkScale")
  (c-name "GtkVScale")
  (gtype-id "GTK_TYPE_VSCALE")
)

(define-object VScrollbar
  (in-module "Gtk")
  (parent "GtkScrollbar")
  (c-name "GtkVScrollbar")
  (gtype-id "GTK_TYPE_VSCROLLBAR")
)

(define-object VSeparator
  (in-module "Gtk")
  (parent "GtkSeparator")
  (c-name "GtkVSeparator")
  (gtype-id "GTK_TYPE_VSEPARATOR")
)

(define-object Window
  (in-module "Gtk")
  (parent "GtkBin")
  (c-name "GtkWindow")
  (gtype-id "GTK_TYPE_WINDOW")
  (fields
    '("gchar*" "title")
    '("gchar*" "wmclass_name")
    '("gchar*" "wmclass_class")
    '("gchar*" "wm_role")
    '("GtkWidget*" "focus_widget")
    '("GtkWidget*" "default_widget")
    '("GtkWindow*" "transient_parent")
;    '("GtkWindowGeometryInfo* "geometry_info")
    '("GdkWindow*" "frame")
    '("GtkWindowGroup*" "group")
    '("guint16" "configure_request_count")
    '("guint" "allow_shrink")
    '("guint" "allow_grow")
    '("guint" "configure_notify_received")
    '("guint" "need_default_position")
    '("guint" "need_default_size")
    '("guint" "position")    
    '("guint" "type")
    '("guint" "has_user_ref_count")
    '("guint" "has_focus")
    '("guint" "modal")
    '("guint" "destroy_with_parent")    
    '("guint" "has_frame")        
    '("guint" "iconify_initially")            
    '("guint" "stick_initially")                
    '("guint" "maximize_initially")    
    '("guint" "decorated")        
    '("guint" "type_hint")            
    '("guint" "gravity")
    '("guint" "frame_left")
    '("guint" "frame_top")
    '("guint" "frame_right")
    '("guint" "frame_bottom")
    '("guint" "keys_changed_handler")
    '("GdkModifierType" "mnemonic_modifier")
  )
)

(define-object WindowGroup
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkWindowGroup")
  (gtype-id "GTK_TYPE_WINDOW_GROUP")
)

;; Pointers ...

(define-pointer CTreeNode
  (in-module "Gtk")
  (c-name "GtkCTreeNode")
  (gtype-id "GTK_TYPE_CTREE_NODE")
)

;; Unsupported

(define-boxed FileInfo
  (in-module "Gtk")
  (c-name "GtkFileInfo")
  (gtype-id "GTK_TYPE_FILE_INFO")
)

(define-boxed FilePath
  (in-module "Gtk")
  (c-name "GtkFilePath")
  (gtype-id "GTK_TYPE_FILE_PATH")
)

(define-boxed TreePath
  (in-module "Gtk")
  (c-name "GtkTreePath")
  (gtype-id "GTK_TYPE_TREE_PATH")
)

(define-interface FileFolder
  (in-module "Gtk")
  (c-name "GtkFileFolder")
  (gtype-id "GTK_TYPE_FILE_FOLDER")
  (prerequisite "GObject")
)

(define-interface FileSystem
  (in-module "Gtk")
  (c-name "GtkFileSystem")
  (gtype-id "GTK_TYPE_FILE_SYSTEM")
  (prerequisite "GObject")
)

(define-object FileSystemHandle
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkFileSystemHandle")
  (gtype-id "GTK_TYPE_FILE_SYSTEM_HANDLE")
)

(define-object TextLayout
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkTextLayout")
  (gtype-id "GTK_TYPE_TEXT_LAYOUT")
)

(define-object Text
  (in-module "Gtk")
  (parent "GtkOldEditable")
  (c-name "GtkText")
  (gtype-id "GTK_TYPE_TEXT")
  (implements "GtkEditable")
)

(define-object Tree
  (in-module "Gtk")
  (parent "GtkContainer")
  (c-name "GtkTree")
  (gtype-id "GTK_TYPE_TREE")
)

(define-object TreeItem
  (in-module "Gtk")
  (parent "GtkItem")
  (c-name "GtkTreeItem")
  (gtype-id "GTK_TYPE_TREE_ITEM")
)

(define-object TipsQuery
  (in-module "Gtk")
  (parent "GtkLabel")
  (c-name "GtkTipsQuery")
  (gtype-id "GTK_TYPE_TIPS_QUERY")
)

;; -*- scheme -*-
;; THIS FILE IS GENERATED - DO NOT EDIT
(include "gtk-base.defs")
(include "gtk-2.10.defs")
(include "gtk-2.12.defs")
(include "gtk-2.14.defs")
(include "gtk-2.16.defs")
; -*- scheme -*-

(define-method flags
  (of-object "GtkObject")
  (c-name "GTK_OBJECT_FLAGS")
  (return-type "GtkWidgetFlags")
)

(define-method set_flags
  (of-object "GtkObject")
  (c-name "GTK_OBJECT_SET_FLAGS")
  (return-type "none")
  (parameters
    '("GtkWidgetFlags" "flags")
  )
)

(define-method unset_flags
  (of-object "GtkObject")
  (c-name "GTK_OBJECT_UNSET_FLAGS")
  (return-type "none")
  (parameters
    '("GtkWidgetFlags" "flags")
  )
)

(define-method get_allocation
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_allocation")
  (return-type "GtkAllocation")
)

(define-method get_selection
  (of-object "GtkList")
  (c-name "gtk_list_get_selection")
  (return-type "GList*")
)

(define-method set_all
  (of-object "GtkAdjustment")
  (c-name "gtk_adjustment_set_all")
  (return-type "none")
  (parameters
    '("gfloat" "value")
    '("gfloat" "lower")
    '("gfloat" "upper")
    '("gfloat" "step_increment")
    '("gfloat" "page_increment")
    '("gfloat" "page_size")
  )
)

;; PyGtkTreeModel

(define-object GenericTreeModel
  (in-module "PyGtk")
  (parent "GObject")
  (c-name "PyGtkGenericTreeModel")
  (gtype-id "PYGTK_TYPE_GENERIC_TREE_MODEL")
  (implements "GtkTreeModel")
)

(define-function pygtk_generic_tree_model_get_type
  (c-name "pygtk_generic_tree_model_get_type")
  (return-type "GType")
)

(define-function pygtk_generic_tree_model_new
  (c-name "pygtk_generic_tree_model_new")
  (is-constructor-of PyGtkGenericTreeModel)
  (return-type "PyGtkGenericTreeModel*")
)

;; PyGtkGenericTreeModel methods

(define-method invalidate_iters
  (of-object "PyGtkGenericTreeModel")
  (c-name "pygtk_generic_tree_model_invalidate_iters")
  (return-type "none")
)

(define-method iter_is_valid
  (of-object "PyGtkGenericTreeModel")
  (c-name "pygtk_generic_tree_model_iter_is_valid")
  (return-type "gboolean")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method get_user_data
  (of-object "PyGtkGenericTreeModel")
  (c-name "pygtk_generic_tree_model_get_user_data")
  (return-type "PyObject*")
  (parameters
    '("GtkTreeIter*" "iter")
  )
)

(define-method create_tree_iter
  (of-object "PyGtkGenericTreeModel")
  (c-name "pygtk_generic_tree_model_create_tree_iter")
  (return-type "GtkTreeIter")
  (parameters
    '("PyObject*" "user_data")
  )
)

;; PyGtkGenericCellRenderer

(define-object GenericCellRenderer
  (in-module "PyGtk")
  (parent "GtkCellRenderer")
  (c-name "PyGtkGenericCellRenderer")
  (gtype-id "PYGTK_TYPE_GENERIC_CELL_RENDERER")
)

(define-function pygtk_generic_cell_renderer_get_type
  (c-name "pygtk_generic_cell_renderer_get_type")
  (return-type "GType")
)

(define-function pygtk_generic_cell_renderer_new
  (c-name "pygtk_generic_cell_renderer_new")
  (is-constructor-of PyGtkGenericCellRenderer)
  (return-type "GtkCellRenderer*")
)

;; -*- scheme -*-
; object definitions ...
(define-object Buffer
  (in-module "GtkSourceView")
  (parent "GtkTextBuffer")
  (c-name "GtkSourceBuffer")
  (gtype-id "GTK_TYPE_SOURCE_BUFFER")
)

(define-object Language
  (in-module "GtkSourceView")
  (parent "GObject")
  (c-name "GtkSourceLanguage")
  (gtype-id "GTK_TYPE_SOURCE_LANGUAGE")
)

(define-object LanguageManager
  (in-module "GtkSourceView")
  (parent "GObject")
  (c-name "GtkSourceLanguageManager")
  (gtype-id "GTK_TYPE_SOURCE_LANGUAGE_MANAGER")
)

(define-object Mark
  (in-module "Gtk")
  (parent "GtkTextMark")
  (c-name "GtkSourceMark")
  (gtype-id "GTK_TYPE_SOURCE_MARK")
)

(define-object PrintCompositor
  (in-module "Gtk")
  (parent "GObject")
  (c-name "GtkSourcePrintCompositor")
  (gtype-id "GTK_TYPE_SOURCE_PRINT_COMPOSITOR")
)

(define-object Style
  (in-module "GtkSourceView")
  (parent "GObject")
  (c-name "GtkSourceStyle")
  (gtype-id "GTK_TYPE_SOURCE_STYLE")
)

(define-object StyleScheme
  (in-module "GtkSourceView")
  (parent "GObject")
  (c-name "GtkSourceStyleScheme")
  (gtype-id "GTK_TYPE_SOURCE_STYLE_SCHEME")
)

(define-object StyleSchemeManager
  (in-module "GtkSourceView")
  (parent "GObject")
  (c-name "GtkSourceStyleSchemeManager")
  (gtype-id "GTK_TYPE_SOURCE_STYLE_SCHEME_MANAGER")
)

(define-object View
  (in-module "GtkSourceView")
  (parent "GtkTextView")
  (c-name "GtkSourceView")
  (gtype-id "GTK_TYPE_SOURCE_VIEW")
)


;; Enumerations and flags ...

(define-flags SearchFlags
  (in-module "GtkSourceView")
  (c-name "GtkSourceSearchFlags")
  (gtype-id "GTK_TYPE_SOURCE_SEARCH_FLAGS")
)

(define-enum SmartHomeEndType
  (in-module "GtkSourceView")
  (c-name "GtkSourceSmartHomeEndType")
  (gtype-id "GTK_TYPE_SOURCE_SMART_HOME_END_TYPE")
)

;; From gtksourcebuffer.h

(define-method get_highlight_syntax
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_highlight_syntax")
  (return-type "gboolean")
)

(define-method set_highlight_syntax
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_set_highlight_syntax")
  (return-type "none")
  (parameters
    '("gboolean" "highlight")
  )
)

(define-method get_highlight_matching_brackets
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_highlight_matching_brackets")
  (return-type "gboolean")
)

(define-method set_highlight_matching_brackets
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_set_highlight_matching_brackets")
  (return-type "none")
  (parameters
    '("gboolean" "highlight")
  )
)

(define-method get_max_undo_levels
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_max_undo_levels")
  (return-type "gint")
)

(define-method set_max_undo_levels
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_set_max_undo_levels")
  (return-type "none")
  (parameters
    '("gint" "max_undo_levels")
  )
)

(define-method get_language
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_language")
  (return-type "GtkSourceLanguage*")
)

(define-method set_language
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_set_language")
  (return-type "none")
  (parameters
    '("GtkSourceLanguage*" "language" (null-ok))
  )
)

(define-method can_undo
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_can_undo")
  (return-type "gboolean")
)

(define-method can_redo
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_can_redo")
  (return-type "gboolean")
)

(define-method undo
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_undo")
  (return-type "none")
)

(define-method redo
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_redo")
  (return-type "none")
)

(define-method begin_not_undoable_action
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_begin_not_undoable_action")
  (return-type "none")
)

(define-method end_not_undoable_action
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_end_not_undoable_action")
  (return-type "none")
)

(define-method get_style_scheme
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_style_scheme")
  (return-type "GtkSourceStyleScheme*")
)

(define-method set_style_scheme
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_set_style_scheme")
  (return-type "none")
  (parameters
    '("GtkSourceStyleScheme*" "scheme")
  )
)

(define-method ensure_highlight
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_ensure_highlight")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
  )
)

(define-method create_source_mark
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_create_source_mark")
  (return-type "GtkSourceMark*")
  (parameters
    '("const-gchar*" "name" (null-ok))
    '("const-gchar*" "category")
    '("const-GtkTextIter*" "where")
  )
)

(define-method forward_iter_to_source_mark
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_forward_iter_to_source_mark")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "category" (null-ok) (default "NULL"))
  )
)

(define-method backward_iter_to_source_mark
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_backward_iter_to_source_mark")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "category" (null-ok) (default "NULL"))
  )
)

(define-method get_source_marks_at_iter
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_source_marks_at_iter")
  (return-type "GSList*")
  (parameters
    '("GtkTextIter*" "iter")
    '("const-gchar*" "category" (null-ok) (default "NULL"))
  )
)

(define-method get_source_marks_at_line
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_get_source_marks_at_line")
  (return-type "GSList*")
  (parameters
    '("gint" "line")
    '("const-gchar*" "category" (null-ok) (default "NULL"))
  )
)

(define-method remove_source_marks
  (of-object "GtkSourceBuffer")
  (c-name "gtk_source_buffer_remove_source_marks")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
    '("const-gchar*" "category" (null-ok) (default "NULL"))
  )
)



;; From gtksourceiter.h

(define-function iter_forward_search
  (c-name "gtk_source_iter_forward_search")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("const-gchar*" "str")
    '("GtkSourceSearchFlags" "flags")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit")
  )
)

(define-function iter_backward_search
  (c-name "gtk_source_iter_backward_search")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("const-gchar*" "str")
    '("GtkSourceSearchFlags" "flags")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit")
  )
)



;; From gtksourcelanguage.h

(define-method get_id
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_id")
  (return-type "const-gchar*")
)

(define-method get_name
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_name")
  (return-type "const-gchar*")
)

(define-method get_section
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_section")
  (return-type "const-gchar*")
)

(define-method get_hidden
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_hidden")
  (return-type "gboolean")
)

(define-method get_metadata
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_metadata")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_mime_types
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_mime_types")
  (return-type "gchar**")
)

(define-method get_globs
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_globs")
  (return-type "gchar**")
)

(define-method get_style_ids
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_style_ids")
  (return-type "gchar**")
)

(define-method get_style_name
  (of-object "GtkSourceLanguage")
  (c-name "gtk_source_language_get_style_name")
  (return-type "const-char*")
  (parameters
    '("const-char*" "style_id")
  )
)



;; From gtksourcelanguagemanager.h

(define-function gtk_source_language_manager_new
  (c-name "gtk_source_language_manager_new")
  (is-constructor-of "GtkSourceLanguageManager")
  (return-type "GtkSourceLanguageManager*")
)

(define-function language_manager_get_default
  (c-name "gtk_source_language_manager_get_default")
  (return-type "GtkSourceLanguageManager*")
)

(define-method get_language_ids
  (of-object "GtkSourceLanguageManager")
  (c-name "gtk_source_language_manager_get_language_ids")
  (return-type "const-gchar**")
)

(define-method get_language
  (of-object "GtkSourceLanguageManager")
  (c-name "gtk_source_language_manager_get_language")
  (return-type "GtkSourceLanguage*")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method get_search_path
  (of-object "GtkSourceLanguageManager")
  (c-name "gtk_source_language_manager_get_search_path")
  (return-type "const-gchar**")
)

(define-method set_search_path
  (of-object "GtkSourceLanguageManager")
  (c-name "gtk_source_language_manager_set_search_path")
  (return-type "none")
  (parameters
    '("gchar**" "dirs")
  )
)

(define-method guess_language
  (of-object "GtkSourceLanguageManager")
  (c-name "gtk_source_language_manager_guess_language")
  (return-type "GtkSourceLanguage*")
  (parameters
    '("const-gchar*" "filename" (null-ok) (default "NULL"))
    '("const-gchar*" "content_type" (null-ok) (default "NULL"))
  )
)



;; From gtksourcestyle.h

(define-function gtk_source_style_new
  (c-name "gtk_source_style_new")
  (is-constructor-of "GtkSourceStyle")
  (return-type "GtkSourceStyle*")
)

(define-method copy
  (of-object "GtkSourceStyle")
  (c-name "gtk_source_style_copy")
  (return-type "GtkSourceStyle*")
)


;; From gtksourcestyleschememanager.h

(define-function gtk_source_style_scheme_manager_new
  (c-name "gtk_source_style_scheme_manager_new")
  (is-constructor-of "GtkSourceStyleSchemeManager")
  (return-type "GtkSourceStyleSchemeManager*")
)

(define-function style_scheme_manager_get_default
  (c-name "gtk_source_style_scheme_manager_get_default")
  (return-type "GtkSourceStyleSchemeManager*")
)

(define-method set_search_path
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_set_search_path")
  (return-type "none")
  (parameters
    '("gchar**" "path")
  )
)

(define-method get_search_path
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_get_search_path")
  (return-type "const-gchar**")
)

(define-method append_search_path
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_append_search_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method prepend_search_path
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_prepend_search_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method get_scheme_ids
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_get_scheme_ids")
  (return-type "const-gchar**")
)

(define-method get_scheme
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_get_scheme")
  (return-type "GtkSourceStyleScheme*")
  (parameters
    '("const-gchar*" "scheme_id")
  )
)

(define-method force_rescan
  (of-object "GtkSourceStyleSchemeManager")
  (c-name "gtk_source_style_scheme_manager_force_rescan")
  (return-type "none")
)



;; From gtksourcestylescheme.h

(define-method get_id
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_id")
  (return-type "const-gchar*")
)

(define-method get_name
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_name")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_description")
  (return-type "const-gchar*")
)

(define-method get_authors
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_authors")
  (return-type "const-gchar**")
)

(define-method get_filename
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_filename")
  (return-type "const-gchar*")
)

(define-method get_style
  (of-object "GtkSourceStyleScheme")
  (c-name "gtk_source_style_scheme_get_style")
  (return-type "GtkSourceStyle*")
  (parameters
    '("const-gchar*" "style_name")
  )
)



;; From gtksourceview.h

(define-method set_show_line_numbers
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_show_line_numbers")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)

(define-method get_show_line_numbers
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_show_line_numbers")
  (return-type "gboolean")
)

(define-method set_indent_width
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_indent_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method get_indent_width
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_indent_width")
  (return-type "guint")
)

(define-method set_tab_width
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_tab_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method get_tab_width
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_tab_width")
  (return-type "guint")
)

(define-method set_auto_indent
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_auto_indent")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_auto_indent
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_auto_indent")
  (return-type "gboolean")
)

(define-method set_insert_spaces_instead_of_tabs
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_insert_spaces_instead_of_tabs")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_insert_spaces_instead_of_tabs
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_insert_spaces_instead_of_tabs")
  (return-type "gboolean")
)

(define-method set_indent_on_tab
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_indent_on_tab")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_indent_on_tab
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_indent_on_tab")
  (return-type "gboolean")
)

(define-method set_highlight_current_line
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_highlight_current_line")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)

(define-method get_highlight_current_line
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_highlight_current_line")
  (return-type "gboolean")
)

(define-method set_show_right_margin
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_show_right_margin")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)

(define-method get_show_right_margin
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_show_right_margin")
  (return-type "gboolean")
)

(define-method set_right_margin_position
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_right_margin_position")
  (return-type "none")
  (parameters
    '("guint" "pos")
  )
)

(define-method get_right_margin_position
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_right_margin_position")
  (return-type "guint")
)
(define-method set_show_line_marks
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_show_line_marks")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)

(define-method get_show_line_marks
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_show_line_marks")
  (return-type "gboolean")
)

(define-method set_mark_category_pixbuf
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_mark_category_pixbuf")
  (return-type "none")
  (parameters
    '("const-gchar*" "category")
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method get_mark_category_pixbuf
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_mark_category_pixbuf")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-gchar*" "category")
  )
)

(define-method set_mark_category_priority
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_mark_category_priority")
  (return-type "none")
  (parameters
    '("const-gchar*" "category")
    '("gint" "priority")
  )
)

(define-method get_mark_category_priority
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_mark_category_priority")
  (return-type "gint")
  (parameters
    '("const-gchar*" "category")
  )
)

(define-method set_smart_home_end
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_smart_home_end")
  (return-type "none")
  (parameters
    '("GtkSourceSmartHomeEndType" "smart_he")
  )
)

(define-method get_smart_home_end
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_smart_home_end")
  (return-type "GtkSourceSmartHomeEndType")
)

(define-method set_draw_spaces
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_draw_spaces")
  (return-type "none")
  (parameters
    '("GtkSourceDrawSpacesFlags" "flags")
  )
)

(define-method get_draw_spaces
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_draw_spaces")
  (return-type "GtkSourceDrawSpacesFlags")
)

(define-method set_mark_category_background
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_set_mark_category_background")
  (return-type "none")
  (parameters
    '("const-gchar*" "category")
    '("const-GdkColor*" "color" (null-ok))
  )
)

(define-method get_mark_category_background
  (of-object "GtkSourceView")
  (c-name "gtk_source_view_get_mark_category_background")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "category")
    '("GdkColor*" "dest")
  )
)



;; From gtksourcemark.h

(define-function gtk_source_mark_new
  (c-name "gtk_source_mark_new")
  (is-constructor-of "GtkSourceMark")
  (return-type "GtkSourceMark*")
  (parameters
    '("const-gchar*" "name" (null-ok))
    '("const-gchar*" "category")
  )
)

(define-method get_category
  (of-object "GtkSourceMark")
  (c-name "gtk_source_mark_get_category")
  (return-type "const-gchar*")
)

(define-method next
  (of-object "GtkSourceMark")
  (c-name "gtk_source_mark_next")
  (return-type "GtkSourceMark*")
  (parameters
    '("const-gchar*" "category" (null-ok))
  )
)

(define-method prev
  (of-object "GtkSourceMark")
  (c-name "gtk_source_mark_prev")
  (return-type "GtkSourceMark*")
  (parameters
    '("const-gchar*" "category" (null-ok))
  )
)



;; From gtksourceprintcompositor.h

(define-function gtk_source_print_compositor_get_type
  (c-name "gtk_source_print_compositor_get_type")
  (return-type "GType")
)

(define-function gtk_source_print_compositor_new
  (c-name "gtk_source_print_compositor_new")
  (is-constructor-of "GtkSourcePrintCompositor")
  (return-type "GtkSourcePrintCompositor*")
  (parameters
    '("GtkSourceBuffer*" "buffer")
  )
)

(define-function print_compositor_new_from_view
  (c-name "gtk_source_print_compositor_new_from_view")
  (return-type "GtkSourcePrintCompositor*")
  (parameters
    '("GtkSourceView*" "view")
  )
)

(define-method get_buffer
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_buffer")
  (return-type "GtkSourceBuffer*")
)

(define-method set_tab_width
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_tab_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method get_tab_width
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_tab_width")
  (return-type "guint")
)

(define-method set_wrap_mode
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_wrap_mode")
  (return-type "none")
  (parameters
    '("GtkWrapMode" "wrap_mode")
  )
)

(define-method get_wrap_mode
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_wrap_mode")
  (return-type "GtkWrapMode")
)

(define-method set_highlight_syntax
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_highlight_syntax")
  (return-type "none")
  (parameters
    '("gboolean" "highlight")
  )
)

(define-method get_highlight_syntax
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_highlight_syntax")
  (return-type "gboolean")
)

(define-method set_print_line_numbers
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_print_line_numbers")
  (return-type "none")
  (parameters
    '("guint" "interval")
  )
)

(define-method get_print_line_numbers
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_print_line_numbers")
  (return-type "guint")
)

(define-method set_body_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_body_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_body_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_body_font_name")
  (return-type "gchar*")
)

(define-method set_line_numbers_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_line_numbers_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name" (null-ok))
  )
)

(define-method get_line_numbers_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_line_numbers_font_name")
  (return-type "gchar*")
)

(define-method set_header_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_header_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name" (null-ok))
  )
)

(define-method get_header_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_header_font_name")
  (return-type "gchar*")
)

(define-method set_footer_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_footer_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name" (null-ok))
  )
)

(define-method get_footer_font_name
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_footer_font_name")
  (return-type "gchar*")
)

(define-method get_top_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_top_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_top_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_top_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_bottom_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_bottom_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_bottom_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_bottom_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_left_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_left_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_left_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_left_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method get_right_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_right_margin")
  (return-type "gdouble")
  (parameters
    '("GtkUnit" "unit")
  )
)

(define-method set_right_margin
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_right_margin")
  (return-type "none")
  (parameters
    '("gdouble" "margin")
    '("GtkUnit" "unit")
  )
)

(define-method set_print_header
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_print_header")
  (return-type "none")
  (parameters
    '("gboolean" "print")
  )
)

(define-method get_print_header
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_print_header")
  (return-type "gboolean")
)

(define-method set_print_footer
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_print_footer")
  (return-type "none")
  (parameters
    '("gboolean" "print")
  )
)

(define-method get_print_footer
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_print_footer")
  (return-type "gboolean")
)

(define-method set_header_format
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_header_format")
  (return-type "none")
  (parameters
    '("gboolean" "separator")
    '("const-gchar*" "left" (null-ok))
    '("const-gchar*" "center" (null-ok))
    '("const-gchar*" "right" (null-ok))
  )
)

(define-method set_footer_format
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_set_footer_format")
  (return-type "none")
  (parameters
    '("gboolean" "separator")
    '("const-gchar*" "left" (null-ok))
    '("const-gchar*" "center" (null-ok))
    '("const-gchar*" "right" (null-ok))
  )
)

(define-method get_n_pages
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_n_pages")
  (return-type "gint")
)

(define-method paginate
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_paginate")
  (return-type "gboolean")
  (parameters
    '("GtkPrintContext*" "context")
  )
)

(define-method get_pagination_progress
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_get_pagination_progress")
  (return-type "gdouble")
)

(define-method draw_page
  (of-object "GtkSourcePrintCompositor")
  (c-name "gtk_source_print_compositor_draw_page")
  (return-type "none")
  (parameters
    '("GtkPrintContext*" "context")
    '("gint" "page_nr")
  )
)


;; virtuals

(define-virtual undo
  (of-object "GtkSourceView")
  (return-type "none")
)
(define-virtual redo
  (of-object "GtkSourceView")
  (return-type "none")
)
;; -*- scheme -*-
;; THIS FILE IS GENERATED - DO NOT EDIT
(include "gtk-base-types.defs")
(include "gtk-2.10-types.defs")
(include "gtk-2.12-types.defs")
(include "gtk-2.14-types.defs")
(include "gtk-2.16-types.defs")

;; From gtkprinter.h

(define-method list_papers
  (of-object "GtkPrinter")
  (c-name "gtk_printer_list_papers")
  (return-type "GList*")
)

(define-method has_details
  (of-object "GtkPrinter")
  (c-name "gtk_printer_has_details")
  (return-type "gboolean")
)

(define-method request_details
  (of-object "GtkPrinter")
  (c-name "gtk_printer_request_details")
  (return-type "none")
)

(define-method get_capabilities
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_capabilities")
  (return-type "GtkPrintCapabilities")
)

;; From gtkprinter.h

(define-method is_paused
  (of-object "GtkPrinter")
  (c-name "gtk_printer_is_paused")
  (return-type "gboolean")
)

(define-method is_accepting_jobs
  (of-object "GtkPrinter")
  (c-name "gtk_printer_is_accepting_jobs")
  (return-type "gboolean")
)
;; -*- scheme -*-

(include "gtkunixprint-base-types.defs")

;; From gtkpagesetupunixdialog.h

(define-function gtk_page_setup_unix_dialog_get_type
  (c-name "gtk_page_setup_unix_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_page_setup_unix_dialog_new
  (c-name "gtk_page_setup_unix_dialog_new")
  (is-constructor-of "GtkPageSetupUnixDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title" (null-ok) (default "NULL"))
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
  )
)

(define-method set_page_setup
  (of-object "GtkPageSetupUnixDialog")
  (c-name "gtk_page_setup_unix_dialog_set_page_setup")
  (return-type "none")
  (parameters
    '("GtkPageSetup*" "page_setup")
  )
)

(define-method get_page_setup
  (of-object "GtkPageSetupUnixDialog")
  (c-name "gtk_page_setup_unix_dialog_get_page_setup")
  (return-type "GtkPageSetup*")
)

(define-method set_print_settings
  (of-object "GtkPageSetupUnixDialog")
  (c-name "gtk_page_setup_unix_dialog_set_print_settings")
  (return-type "none")
  (parameters
    '("GtkPrintSettings*" "print_settings")
  )
)

(define-method get_print_settings
  (of-object "GtkPageSetupUnixDialog")
  (c-name "gtk_page_setup_unix_dialog_get_print_settings")
  (return-type "GtkPrintSettings*")
)


;; From gtkprinter.h

(define-function gtk_printer_get_type
  (c-name "gtk_printer_get_type")
  (return-type "GType")
)

(define-function gtk_printer_new
  (c-name "gtk_printer_new")
  (is-constructor-of "GtkPrinter")
  (return-type "GtkPrinter*")
  (parameters
    '("const-gchar*" "name")
    '("GtkPrintBackend*" "backend")
    '("gboolean" "is_virtual")
  )
)

(define-method get_backend
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_backend")
  (return-type "GtkPrintBackend*")
)

(define-method get_name
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_name")
  (return-type "const-gchar*")
)

(define-method get_state_message
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_state_message")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_description")
  (return-type "const-gchar*")
)

(define-method get_location
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_location")
  (return-type "const-gchar*")
)

(define-method get_icon_name
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_icon_name")
  (return-type "const-gchar*")
)

(define-method get_job_count
  (of-object "GtkPrinter")
  (c-name "gtk_printer_get_job_count")
  (return-type "gint")
)

(define-method is_active
  (of-object "GtkPrinter")
  (c-name "gtk_printer_is_active")
  (return-type "gboolean")
)

(define-method is_virtual
  (of-object "GtkPrinter")
  (c-name "gtk_printer_is_virtual")
  (return-type "gboolean")
)

(define-method is_default
  (of-object "GtkPrinter")
  (c-name "gtk_printer_is_default")
  (return-type "gboolean")
)

(define-method accepts_pdf
  (of-object "GtkPrinter")
  (c-name "gtk_printer_accepts_pdf")
  (return-type "gboolean")
)

(define-method accepts_ps
  (of-object "GtkPrinter")
  (c-name "gtk_printer_accepts_ps")
  (return-type "gboolean")
)

(define-method compare
  (of-object "GtkPrinter")
  (c-name "gtk_printer_compare")
  (return-type "gint")
  (parameters
    '("GtkPrinter*" "b")
  )
)

(define-function enumerate_printers
  (c-name "gtk_enumerate_printers")
  (return-type "none")
  (parameters
    '("GtkPrinterFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
    '("gboolean" "wait")
  )
)
 
(define-virtual details_acquired
  (of-object "GtkPrinter")
  (return-type "none")
  (parameters
    '("gboolean" "success")
  )
)




;; From gtkprintjob.h

(define-function gtk_print_job_get_type
  (c-name "gtk_print_job_get_type")
  (return-type "GType")
)

(define-function gtk_print_job_new
  (c-name "gtk_print_job_new")
  (is-constructor-of "GtkPrintJob")
  (return-type "GtkPrintJob*")
  (parameters
    '("const-gchar*" "title")
    '("GtkPrinter*" "printer")
    '("GtkPrintSettings*" "settings")
    '("GtkPageSetup*" "page_setup")
  )
)

(define-method get_settings
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_settings")
  (return-type "GtkPrintSettings*")
)

(define-method get_printer
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_printer")
  (return-type "GtkPrinter*")
)

(define-method get_title
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_title")
  (return-type "const-gchar*")
)

(define-method get_status
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_status")
  (return-type "GtkPrintStatus")
)

(define-method set_source_file
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_set_source_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method get_surface
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_surface")
  (return-type "cairo_surface_t*")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_track_print_status
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_set_track_print_status")
  (return-type "none")
  (parameters
    '("gboolean" "track_status")
  )
)

(define-method get_track_print_status
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_get_track_print_status")
  (return-type "gboolean")
)

(define-method send
  (of-object "GtkPrintJob")
  (c-name "gtk_print_job_send")
  (return-type "gboolean")
  (parameters
    '("GtkPrintJobCompleteFunc" "callback")
    '("gpointer" "user_data")
    '("GDestroyNotify" "dnotify")
    '("GError**" "error")
  )
)

(define-function print_capabilities_get_type
  (c-name "gtk_print_capabilities_get_type")
  (return-type "GType")
)

(define-virtual status_changed
  (of-object "GtkPrintJob")
  (return-type "none")
)



;; From gtkprintunixdialog.h

(define-function gtk_print_unix_dialog_get_type
  (c-name "gtk_print_unix_dialog_get_type")
  (return-type "GType")
)

(define-function gtk_print_unix_dialog_new
  (c-name "gtk_print_unix_dialog_new")
  (is-constructor-of "GtkPrintUnixDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "title" (null-ok) (default "NULL"))
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
  )
)

(define-method set_page_setup
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_set_page_setup")
  (return-type "none")
  (parameters
    '("GtkPageSetup*" "page_setup")
  )
)

(define-method get_page_setup
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_get_page_setup")
  (return-type "GtkPageSetup*")
)

(define-method set_current_page
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_set_current_page")
  (return-type "none")
  (parameters
    '("gint" "current_page")
  )
)

(define-method get_current_page
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_get_current_page")
  (return-type "gint")
)

(define-method set_settings
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_set_settings")
  (return-type "none")
  (parameters
    '("GtkPrintSettings*" "settings" (null-ok) (default "NULL"))
  )
)

(define-method get_settings
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_get_settings")
  (return-type "GtkPrintSettings*")
)

(define-method get_selected_printer
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_get_selected_printer")
  (return-type "GtkPrinter*")
)

(define-method add_custom_tab
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_add_custom_tab")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("GtkWidget*" "tab_label")
  )
)

(define-method set_manual_capabilities
  (of-object "GtkPrintUnixDialog")
  (c-name "gtk_print_unix_dialog_set_manual_capabilities")
  (return-type "none")
  (parameters
    '("GtkPrintCapabilities" "capabilities")
  )
)



;; -*- scheme -*-
; object definitions ...
(define-object PageSetupUnixDialog
  (in-module "Unixprint")
  (parent "GtkDialog")
  (c-name "GtkPageSetupUnixDialog")
  (gtype-id "GTK_TYPE_PAGE_SETUP_UNIX_DIALOG")
)

(define-object PrintJob
  (in-module "Unixprint")
  (parent "GObject")
  (c-name "GtkPrintJob")
  (gtype-id "GTK_TYPE_PRINT_JOB")
)

(define-object PrintUnixDialog
  (in-module "Unixprint")
  (parent "GtkDialog")
  (c-name "GtkPrintUnixDialog")
  (gtype-id "GTK_TYPE_PRINT_UNIX_DIALOG")
)

(define-object Printer
  (in-module "Unixprint")
  (parent "GObject")
  (c-name "GtkPrinter")
  (gtype-id "GTK_TYPE_PRINTER")
)

;; Enumerations and flags ...
;; -*- scheme -*-
; object definitions ...
(define-object XML
  (in-module "Glade")
  (parent "GObject")
  (c-name "GladeXML")
  (gtype-id "GLADE_TYPE_XML")
)

;; Enumerations and flags ...


;; From /opt/gtk2/include/glade-2.0/glade/glade-init.h

(define-function require
  (c-name "glade_require")
  (return-type "none")
  (parameters
    '("const-gchar*" "library")
  )
)

(define-function provide
  (c-name "glade_provide")
  (return-type "none")
  (parameters
    '("const-gchar*" "library")
  )
)



;; From /opt/gtk2/include/glade-2.0/glade/glade-xml.h

(define-function glade_xml_get_type
  (c-name "glade_xml_get_type")
  (return-type "GType")
)

(define-function glade_xml_new
  (c-name "glade_xml_new")
  (is-constructor-of "GladeXML")
  (return-type "GladeXML*")
  (parameters
    '("const-char*" "fname")
    '("const-char*" "root" (null-ok) (default "NULL"))
    '("const-char*" "domain" (null-ok) (default "NULL"))
  )
)

(define-function xml_new_from_buffer
  (c-name "glade_xml_new_from_buffer")
  (return-type "GladeXML*")
  (parameters
    '("const-char*" "buffer")
    '("int" "size")
    '("const-char*" "root" (null-ok) (default "NULL"))
    '("const-char*" "domain" (null-ok) (default "NULL"))
  )
)

(define-method construct
  (of-object "GladeXML")
  (c-name "glade_xml_construct")
  (return-type "gboolean")
  (parameters
    '("const-char*" "fname")
    '("const-char*" "root" (null-ok) (default "NULL"))
    '("const-char*" "domain" (null-ok) (default "NULL"))
  )
)

(define-method signal_connect
  (of-object "GladeXML")
  (c-name "glade_xml_signal_connect")
  (return-type "none")
  (parameters
    '("const-char*" "handlername")
    '("GtkSignalFunc" "func")
  )
)

(define-method signal_connect_data
  (of-object "GladeXML")
  (c-name "glade_xml_signal_connect_data")
  (return-type "none")
  (parameters
    '("const-char*" "handlername")
    '("GtkSignalFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method signal_autoconnect
  (of-object "GladeXML")
  (c-name "glade_xml_signal_autoconnect")
  (return-type "none")
)

(define-method signal_connect_full
  (of-object "GladeXML")
  (c-name "glade_xml_signal_connect_full")
  (return-type "none")
  (parameters
    '("const-gchar*" "handler_name")
    '("GladeXMLConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method signal_autoconnect_full
  (of-object "GladeXML")
  (c-name "glade_xml_signal_autoconnect_full")
  (return-type "none")
  (parameters
    '("GladeXMLConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method get_widget
  (of-object "GladeXML")
  (c-name "glade_xml_get_widget")
  (return-type "GtkWidget*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method get_widget_prefix
  (of-object "GladeXML")
  (c-name "glade_xml_get_widget_prefix")
  (return-type "GList*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method relative_file
  (of-object "GladeXML")
  (c-name "glade_xml_relative_file")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function get_widget_name
  (c-name "glade_get_widget_name")
  (return-type "const-char*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function get_widget_tree
  (c-name "glade_get_widget_tree")
  (return-type "GladeXML*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function set_custom_handler
  (c-name "glade_set_custom_handler")
  (return-type "none")
  (parameters
    '("GladeXMLCustomWidgetHandler" "handler")
    '("gpointer" "user_data")
  )
)


;; pylibglade2 extras

(define-function bindtextdomain
  (c-name "glade_bindtextdomain")
  (return-type "char*")
  (parameters
    '("const-char*" "domainname")
    '("const-char*" "dirname" (null-ok) (default "NULL"))
  )
)

(define-function textdomain
  (c-name "glade_textdomain")
  (return-type "char*")
  (parameters
    '("const-char*" "domainname")
  )
)

(define-function set_custom_widget_callbacks
  (c-name "glade_set_custom_widget_callbacks")
  (return-type "none")
)
;; From /opt/gnome-devel/include/pango-1.0/pango/pangocairo.h

(define-interface CairoFontMap
  (in-module "Pango")
  (c-name "PangoCairoFontMap")
  (gtype-id "PANGO_TYPE_CAIRO_FONT_MAP")
  (prerequisite "PangoFontMap")
)

(define-function font_map_get_type
  (c-name "pango_cairo_font_map_get_type")
  (return-type "GType")
)

(define-function cairo_font_map_new
  (c-name "pango_cairo_font_map_new")
  (return-type "PangoFontMap*")
)

(define-function cairo_font_map_get_default
  (c-name "pango_cairo_font_map_get_default")
  (return-type "PangoFontMap*")
)

(define-method set_resolution
  (of-object "PangoCairoFontMap")
  (c-name "pango_cairo_font_map_set_resolution")
  (return-type "none")
  (parameters
    '("double" "dpi")
  )
)

(define-method get_resolution
  (of-object "PangoCairoFontMap")
  (c-name "pango_cairo_font_map_get_resolution")
  (return-type "double")
)

(define-method create_context
  (of-object "PangoCairoFontMap")
  (c-name "pango_cairo_font_map_create_context")
  (return-type "PangoContext*")
)

(define-function update_context
  (c-name "pango_cairo_update_context")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoContext*" "context")
  )
)

(define-function context_set_font_options
  (c-name "pango_cairo_context_set_font_options")
  (return-type "none")
  (parameters
    '("PangoContext*" "context")
    '("const-cairo_font_options_t*" "options")
  )
)

(define-function context_get_font_options
  (c-name "pango_cairo_context_get_font_options")
  (return-type "const-cairo_font_options_t*")
  (parameters
    '("PangoContext*" "context")
  )
)

(define-function context_set_resolution
  (c-name "pango_cairo_context_set_resolution")
  (return-type "none")
  (parameters
    '("PangoContext*" "context")
    '("double" "dpi")
  )
)

(define-function context_get_resolution
  (c-name "pango_cairo_context_get_resolution")
  (return-type "double")
  (parameters
    '("PangoContext*" "context")
  )
)

(define-function create_layout
  (c-name "pango_cairo_create_layout")
  (return-type "PangoLayout*")
  (parameters
    '("cairo_t*" "cr")
  )
)

(define-function update_layout
  (c-name "pango_cairo_update_layout")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoLayout*" "layout")
  )
)

(define-function show_glyph_string
  (c-name "pango_cairo_show_glyph_string")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoFont*" "font")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-function show_layout_line
  (c-name "pango_cairo_show_layout_line")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoLayoutLine*" "line")
  )
)

(define-function show_layout
  (c-name "pango_cairo_show_layout")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoLayout*" "layout")
  )
)

(define-function glyph_string_path
  (c-name "pango_cairo_glyph_string_path")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoFont*" "font")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-function layout_line_path
  (c-name "pango_cairo_layout_line_path")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoLayoutLine*" "line")
  )
)

(define-function layout_path
  (c-name "pango_cairo_layout_path")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("PangoLayout*" "layout")
  )
)

(define-function error_underline_path
  (c-name "pango_cairo_error_underline_path")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("double" "x")
    '("double" "y")
    '("double" "width")
    '("double" "height")
  )
)

(define-function show_error_underline
  (c-name "pango_cairo_show_error_underline")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("double" "x")
    '("double" "y")
    '("double" "width")
    '("double" "height")
  )
)
;; -*- scheme -*-

(include "pango-types.defs")

;; From /opt/gtk2/include/pango-1.0/pango/pango-attributes.h

(define-function pango_color_get_type
  (c-name "pango_color_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "PangoColor")
  (c-name "pango_color_copy")
  (return-type "PangoColor*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoColor")
  (c-name "pango_color_free")
  (return-type "none")
)

(define-function color_parse
  (c-name "pango_color_parse")
  (is-constructor-of "PangoColor")
  (return-type "gboolean")
  (parameters
    '("const-char*" "spec")
  )
)

(define-method to_string
  (of-object "PangoColor")
  (c-name "pango_color_to_string")
  (return-type "gchar*")
)

(define-function pango_attr_type_register
  (c-name "pango_attr_type_register")
  (return-type "PangoAttrType")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method copy
  (of-object "PangoAttribute")
  (c-name "pango_attribute_copy")
  (return-type "PangoAttribute*")
  (caller-owns-return #t)
)

(define-method destroy
  (of-object "PangoAttribute")
  (c-name "pango_attribute_destroy")
  (return-type "none")
)

(define-method equal
  (of-object "PangoAttribute")
  (c-name "pango_attribute_equal")
  (return-type "gboolean")
  (parameters
    '("const-PangoAttribute*" "attr2")
  )
)

(define-function AttrLanguage
  (c-name "pango_attr_language_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoLanguage*" "language")
  )
)

(define-function AttrFamily
  (c-name "pango_attr_family_new")
  (return-type "PangoAttribute*")
  (parameters
    '("const-char*" "family")
  )
)

(define-function AttrForeground
  (c-name "pango_attr_foreground_new")
  (return-type "PangoAttribute*")
  (parameters
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
  )
)

(define-function AttrBackground
  (c-name "pango_attr_background_new")
  (return-type "PangoAttribute*")
  (parameters
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
  )
)

(define-function AttrSize
  (c-name "pango_attr_size_new")
  (return-type "PangoAttribute*")
  (parameters
    '("int" "size")
  )
)

(define-function AttrSizeAbsolute
  (c-name "pango_attr_size_new_absolute")
  (return-type "PangoAttribute*")
  (parameters
    '("int" "size")
  )
)

(define-function AttrStyle
  (c-name "pango_attr_style_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoStyle" "style")
  )
)

(define-function AttrWeight
  (c-name "pango_attr_weight_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoWeight" "weight")
  )
)

(define-function AttrVariant
  (c-name "pango_attr_variant_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoVariant" "variant")
  )
)

(define-function AttrStretch
  (c-name "pango_attr_stretch_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoStretch" "stretch")
  )
)

(define-function AttrFontDesc
  (c-name "pango_attr_font_desc_new")
  (return-type "PangoAttribute*")
  (parameters
    '("const-PangoFontDescription*" "desc")
  )
)

(define-function AttrUnderline
  (c-name "pango_attr_underline_new")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoUnderline" "underline")
  )
)

(define-function AttrUnderlineColor
  (c-name "pango_attr_underline_color_new")
  (return-type "PangoAttribute*")
  (parameters
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
  )
)

(define-function AttrStrikethrough
  (c-name "pango_attr_strikethrough_new")
  (return-type "PangoAttribute*")
  (parameters
    '("gboolean" "strikethrough")
  )
)

(define-function AttrStrikethroughColor
  (c-name "pango_attr_strikethrough_color_new")
  (return-type "PangoAttribute*")
  (parameters
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
  )
)

(define-function AttrRise
  (c-name "pango_attr_rise_new")
  (return-type "PangoAttribute*")
  (parameters
    '("int" "rise")
  )
)

(define-function AttrScale
  (c-name "pango_attr_scale_new")
  (return-type "PangoAttribute*")
  (parameters
    '("double" "scale_factor")
  )
)

(define-function AttrFallback
  (c-name "pango_attr_fallback_new")
  (return-type "PangoAttribute*")
  (parameters
    '("gboolean" "fallback")
  )
)

(define-function AttrLetterSpacing
  (c-name "pango_attr_letter_spacing_new")
  (return-type "PangoAttribute*")
  (parameters
    '("int" "letter_spacing")
  )
)

(define-function AttrShape
  (c-name "pango_attr_shape_new")
  (return-type "PangoAttribute*")
  (parameters
    '("const-PangoRectangle*" "ink_rect")
    '("const-PangoRectangle*" "logical_rect")
  )
)

(define-function attr_shape_new_with_data
  (c-name "pango_attr_shape_new_with_data")
  (return-type "PangoAttribute*")
  (parameters
    '("const-PangoRectangle*" "ink_rect")
    '("const-PangoRectangle*" "logical_rect")
    '("gpointer" "data")
    '("PangoAttrDataCopyFunc" "copy_func")
    '("GDestroyNotify" "destroy_func")
  )
)

(define-function attr_gravity_new
  (c-name "pango_attr_gravity_new")
  (is-constructor-of "PangoAttrGravity")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoGravity" "gravity")
  )
)

(define-function attr_gravity_hint_new
  (c-name "pango_attr_gravity_hint_new")
  (is-constructor-of "PangoAttrGravityHint")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoGravityHint" "hint")
  )
)

(define-function pango_attr_list_get_type
  (c-name "pango_attr_list_get_type")
  (return-type "GType")
)

(define-function pango_attr_list_new
  (c-name "pango_attr_list_new")
  (return-type "PangoAttrList*")
  (is-constructor-of "PangoAttrList")
)

(define-method ref
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_ref")
  (return-type "none")
)

(define-method unref
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_unref")
  (return-type "none")
)

(define-method copy
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_copy")
  (return-type "PangoAttrList*")
  (caller-owns-return #t)
)

(define-method insert
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_insert")
  (return-type "none")
  (parameters
    '("PangoAttribute*" "attr")
  )
)

(define-method insert_before
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_insert_before")
  (return-type "none")
  (parameters
    '("PangoAttribute*" "attr")
  )
)

(define-method change
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_change")
  (return-type "none")
  (parameters
    '("PangoAttribute*" "attr")
  )
)

(define-method splice
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_splice")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "other")
    '("gint" "pos")
    '("gint" "len")
  )
)

(define-method filter
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_filter")
  (return-type "PangoAttrList*")
  (caller-owns-return #t)
  (parameters
    '("PangoAttrFilterFunc" "func")
    '("gpointer" "data")
  )
)

(define-method get_iterator
  (of-object "PangoAttrList")
  (c-name "pango_attr_list_get_iterator")
  (return-type "PangoAttrIterator*")
  (caller-owns-return #t)
)

(define-method range
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_range")
  (return-type "none")
  (parameters
    '("gint*" "start")
    '("gint*" "end")
  )
)

(define-method next
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_next")
  (return-type "gboolean")
)

(define-method copy
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_copy")
  (return-type "PangoAttrIterator*")
  (caller-owns-return #t)
)

(define-method destroy
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_destroy")
  (return-type "none")
)

(define-method get
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_get")
  (return-type "PangoAttribute*")
  (parameters
    '("PangoAttrType" "type")
  )
)

(define-method get_font
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_get_font")
  (return-type "none")
  (parameters
    '("PangoFontDescription*" "desc")
    '("PangoLanguage**" "language")
    '("GSList**" "extra_attrs")
  )
)

(define-method get_attrs
  (of-object "PangoAttrIterator")
  (c-name "pango_attr_iterator_get_attrs")
  (return-type "GSList*")
)

(define-function parse_markup
  (c-name "pango_parse_markup")
  (return-type "gboolean")
  (parameters
    '("const-char*" "markup_text")
    '("int" "length")
    '("gunichar" "accel_marker")
    '("PangoAttrList**" "attr_list")
    '("char**" "text")
    '("gunichar*" "accel_char")
    '("GError**" "error")
  )
)

(define-virtual copy
  (of-object "PangoAttr")
  (return-type "PangoAttribute*")
)

(define-virtual destroy
  (of-object "PangoAttr")
  (return-type "none")
)

(define-virtual equal
  (of-object "PangoAttr")
  (return-type "gboolean")
  (parameters
    '("const-PangoAttribute*" "attr2")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-break.h

(define-function break
  (c-name "pango_break")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
    '("PangoAnalysis*" "analysis")
    '("PangoLogAttr*" "attrs")
  )
)

(define-function find_paragraph_boundary
  (c-name "pango_find_paragraph_boundary")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
    '("gint*" "paragraph_delimiter_index")
    '("gint*" "next_paragraph_start")
  )
)

(define-function get_log_attrs
  (c-name "pango_get_log_attrs")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("int" "length")
    '("int" "level")
    '("PangoLanguage*" "language")
    '("PangoLogAttr*" "log_attrs")
  )
)

(define-function default_break
  (c-name "pango_default_break")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("int" "length")
    '("PangoAnalysis*" "analysis")
    '("PangoLogAttr*" "attrs")
    '("int" "attrs_len")
  )
)
 


;; From /opt/gtk2/include/pango-1.0/pango/pango-context.h

(define-function context_get_type
  (c-name "pango_context_get_type")
  (return-type "GType")
)

(define-function pango_context_new
  (c-name "pango_context_new")
  (return-type "PangoContext*")
  (is-constructor-of "PangoContext")
)

(define-method add_font_map
  (of-object "PangoContext")
  (c-name "pango_context_set_font_map")
  (return-type "none")
  (parameters
    '("PangoFontMap*" "font_map")
  )
)

(define-method get_font_map
  (of-object "PangoContext")
  (c-name "pango_context_get_font_map")
  (return-type "PangoFontMap*")
)

(define-method list_families
  (of-object "PangoContext")
  (c-name "pango_context_list_families")
  (return-type "none")
  (parameters
    '("PangoFontFamily***" "families")
    '("int*" "n_families")
  )
)

(define-method load_font
  (of-object "PangoContext")
  (c-name "pango_context_load_font")
  (return-type "PangoFont*")
  (caller-owns-return #t)
  (parameters
    '("const-PangoFontDescription*" "desc")
  )
)

(define-method load_fontset
  (of-object "PangoContext")
  (c-name "pango_context_load_fontset")
  (return-type "PangoFontset*")
  (caller-owns-return #t)
  (parameters
    '("const-PangoFontDescription*" "desc")
    '("PangoLanguage*" "language")
  )
)

(define-method get_metrics
  (of-object "PangoContext")
  (c-name "pango_context_get_metrics")
  (return-type "PangoFontMetrics*")
  (caller-owns-return #t)
  (parameters
    '("const-PangoFontDescription*" "desc")
    '("PangoLanguage*" "language" (null-ok) (default "NULL"))
  )
)

(define-method set_font_description
  (of-object "PangoContext")
  (c-name "pango_context_set_font_description")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "desc")
  )
)

(define-method get_font_description
  (of-object "PangoContext")
  (c-name "pango_context_get_font_description")
  (return-type "PangoFontDescription*")
)

(define-method get_language
  (of-object "PangoContext")
  (c-name "pango_context_get_language")
  (return-type "PangoLanguage*")
)

(define-method set_language
  (of-object "PangoContext")
  (c-name "pango_context_set_language")
  (return-type "none")
  (parameters
    '("PangoLanguage*" "language")
  )
)

(define-method set_base_dir
  (of-object "PangoContext")
  (c-name "pango_context_set_base_dir")
  (return-type "none")
  (parameters
    '("PangoDirection" "direction")
  )
)

(define-method get_base_dir
  (of-object "PangoContext")
  (c-name "pango_context_get_base_dir")
  (return-type "PangoDirection")
)

(define-method set_matrix
  (of-object "PangoContext")
  (c-name "pango_context_set_matrix")
  (return-type "none")
  (parameters
    '("const-PangoMatrix*" "matrix")
  )
)

(define-method get_matrix
  (of-object "PangoContext")
  (c-name "pango_context_get_matrix")
  (return-type "const-PangoMatrix*")
)

(define-method set_base_gravity
  (of-object "PangoContext")
  (c-name "pango_context_set_base_gravity")
  (return-type "none")
  (parameters
    '("PangoGravity" "gravity")
  )
)

(define-method get_base_gravity
  (of-object "PangoContext")
  (c-name "pango_context_get_base_gravity")
  (return-type "PangoGravity")
)

(define-method get_gravity
  (of-object "PangoContext")
  (c-name "pango_context_get_gravity")
  (return-type "PangoGravity")
)

(define-method set_gravity_hint
  (of-object "PangoContext")
  (c-name "pango_context_set_gravity_hint")
  (return-type "none")
  (parameters
    '("PangoGravityHint" "hint")
  )
)

(define-method get_gravity_hint
  (of-object "PangoContext")
  (c-name "pango_context_get_gravity_hint")
  (return-type "PangoGravityHint")
)

(define-function itemize
  (c-name "pango_itemize")
  (return-type "GList*")
  (parameters
    '("PangoContext*" "context")
    '("const-char*" "text")
    '("int" "start_index")
    '("int" "length")
    '("PangoAttrList*" "attrs")
    '("PangoAttrIterator*" "cached_iter" (null-ok) (default "NULL"))
  )
)

(define-function itemize_with_base_dir
  (c-name "pango_itemize_with_base_dir")
  (return-type "GList*")
  (parameters
    '("PangoContext*" "context")
    '("PangoDirection" "base_dir")
    '("const-char*" "text")
    '("int" "start_index")
    '("int" "length")
    '("PangoAttrList*" "attrs")
    '("PangoAttrIterator*" "cached_iter")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-coverage.h

(define-function coverage_new
  (c-name "pango_coverage_new")
  (is-constructor-of "PangoCoverage")
  (return-type "PangoCoverage*")
)

(define-method ref
  (of-object "PangoCoverage")
  (c-name "pango_coverage_ref")
  (return-type "PangoCoverage*")
)

(define-method unref
  (of-object "PangoCoverage")
  (c-name "pango_coverage_unref")
  (return-type "none")
)

(define-method copy
  (of-object "PangoCoverage")
  (c-name "pango_coverage_copy")
  (return-type "PangoCoverage*")
  (caller-owns-return #t)
)

(define-method get
  (of-object "PangoCoverage")
  (c-name "pango_coverage_get")
  (return-type "PangoCoverageLevel")
  (parameters
    '("int" "index")
  )
)

(define-method set
  (of-object "PangoCoverage")
  (c-name "pango_coverage_set")
  (return-type "none")
  (parameters
    '("int" "index")
    '("PangoCoverageLevel" "level")
  )
)

(define-method max
  (of-object "PangoCoverage")
  (c-name "pango_coverage_max")
  (return-type "none")
  (parameters
    '("PangoCoverage*" "other")
  )
)

(define-method to_bytes
  (of-object "PangoCoverage")
  (c-name "pango_coverage_to_bytes")
  (return-type "none")
  (parameters
    '("guchar**" "bytes")
    '("int*" "n_bytes")
  )
)

(define-function coverage_from_bytes
  (c-name "pango_coverage_from_bytes")
  (is-constructor-of "PangoCoverage")
  (return-type "PangoCoverage*")
  (parameters
    '("guchar*" "bytes")
    '("int" "n_bytes")
  )
)



;; From pango-engine.h

(ifdef PANGO_ENABLE_ENGINE

(define-function engine_get_type
  (c-name "pango_engine_get_type")
  (return-type "GType")
)

(define-function engine_lang_get_type
  (c-name "pango_engine_lang_get_type")
  (return-type "GType")
)

(define-function engine_shape_get_type
  (c-name "pango_engine_shape_get_type")
  (return-type "GType")
)

(define-virtual script_break
  (of-object "PangoEngineLang")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("int" "len")
    '("PangoAnalysis*" "analysis")
    '("PangoLogAttr*" "attrs")
    '("int" "attrs_len")
  )
)

(define-virtual script_shape
  (of-object "PangoEngineShape")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("const-char*" "text")
    '("int" "length")
    '("PangoAnalysis*" "analysis")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-virtual covers
  (of-object "PangoEngineShape")
  (return-type "PangoCoverageLevel")
  (parameters
    '("PangoFont*" "font")
    '("PangoLanguage*" "language")
    '("gunichar" "wc")
  )
)
) ;; PANGO_ENABLE_ENGINE


;; From pango-enum-types.h

(define-function attr_type_get_type
  (c-name "pango_attr_type_get_type")
  (return-type "GType")
)

(define-function underline_get_type
  (c-name "pango_underline_get_type")
  (return-type "GType")
)

(define-function coverage_level_get_type
  (c-name "pango_coverage_level_get_type")
  (return-type "GType")
)

(define-function style_get_type
  (c-name "pango_style_get_type")
  (return-type "GType")
)

(define-function variant_get_type
  (c-name "pango_variant_get_type")
  (return-type "GType")
)

(define-function weight_get_type
  (c-name "pango_weight_get_type")
  (return-type "GType")
)

(define-function stretch_get_type
  (c-name "pango_stretch_get_type")
  (return-type "GType")
)

(define-function font_mask_get_type
  (c-name "pango_font_mask_get_type")
  (return-type "GType")
)

(define-function alignment_get_type
  (c-name "pango_alignment_get_type")
  (return-type "GType")
)

(define-function wrap_mode_get_type
  (c-name "pango_wrap_mode_get_type")
  (return-type "GType")
)

(define-function ellipsize_mode_get_type
  (c-name "pango_ellipsize_mode_get_type")
  (return-type "GType")
)

(define-function render_part_get_type
  (c-name "pango_render_part_get_type")
  (return-type "GType")
)

(define-function script_get_type
  (c-name "pango_script_get_type")
  (return-type "GType")
)

(define-function tab_align_get_type
  (c-name "pango_tab_align_get_type")
  (return-type "GType")
)

(define-function direction_get_type
  (c-name "pango_direction_get_type")
  (return-type "GType")
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-font.h


(define-function font_description_get_type
  (c-name "pango_font_description_get_type")
  (return-type "GType")
)

(define-function pango_font_description_new
  (c-name "pango_font_description_new")
  (is-constructor-of "PangoFontDescription")
  (return-type "PangoFontDescription*")
)

(define-method copy
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_copy")
  (return-type "PangoFontDescription*")
  (caller-owns-return #t)
)

(define-method copy_static
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_copy_static")
  (return-type "PangoFontDescription*")
  (deprecated "use copy pango.FontDescription.copy instead")
)

(define-method hash
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_hash")
  (return-type "guint")
)

(define-method equal
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_equal")
  (return-type "gboolean")
  (parameters
    '("const-PangoFontDescription*" "desc2")
  )
)

(define-method free
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_free")
  (return-type "none")
)

(define-function pango_font_descriptions_free
  (c-name "pango_font_descriptions_free")
  (return-type "none")
  (parameters
    '("PangoFontDescription**" "descs")
    '("int" "n_descs")
  )
)

(define-method set_family
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_family")
  (return-type "none")
  (parameters
    '("const-char*" "family")
  )
)

(define-method set_family_static
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_family_static")
  (return-type "none")
  (parameters
    '("const-char*" "family")
  )
  (deprecated "use copy pango.FontDescription.set_family instead")
)

(define-method get_family
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_family")
  (return-type "const-char*")
)

(define-method set_style
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_style")
  (return-type "none")
  (parameters
    '("PangoStyle" "style")
  )
)

(define-method get_style
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_style")
  (return-type "PangoStyle")
)

(define-method set_variant
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_variant")
  (return-type "none")
  (parameters
    '("PangoVariant" "variant")
  )
)

(define-method get_variant
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_variant")
  (return-type "PangoVariant")
)

(define-method set_weight
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_weight")
  (return-type "none")
  (parameters
    '("PangoWeight" "weight")
  )
)

(define-method get_weight
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_weight")
  (return-type "PangoWeight")
)

(define-method set_stretch
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_stretch")
  (return-type "none")
  (parameters
    '("PangoStretch" "stretch")
  )
)

(define-method get_stretch
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_stretch")
  (return-type "PangoStretch")
)

(define-method set_size
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_size")
  (return-type "none")
  (parameters
    '("gint" "size")
  )
)

(define-method get_size
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_size")
  (return-type "gint")
)

(define-method set_absolute_size
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_absolute_size")
  (return-type "none")
  (parameters
    '("double" "size")
  )
)

(define-method get_size_is_absolute
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_size_is_absolute")
  (return-type "gboolean")
)

(define-method set_gravity
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_set_gravity")
  (return-type "none")
  (parameters
    '("PangoGravity" "gravity")
  )
)

(define-method get_gravity
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_gravity")
  (return-type "PangoGravity")
)

(define-method get_set_fields
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_get_set_fields")
  (return-type "PangoFontMask")
)

(define-method unset_fields
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_unset_fields")
  (return-type "none")
  (parameters
    '("PangoFontMask" "to_unset")
  )
)

(define-method merge
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_merge")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "desc_to_merge")
    '("gboolean" "replace_existing")
  )
)

(define-method merge_static
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_merge_static")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "desc_to_merge")
    '("gboolean" "replace_existing")
  )
  (deprecated "use copy pango.FontDescription.merge instead")
)

(define-method better_match
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_better_match")
  (return-type "gboolean")
  (parameters
    '("const-PangoFontDescription*" "old_match" (null-ok) (default "NULL"))
    '("const-PangoFontDescription*" "new_match")
  )
)

(define-function pango_font_description_from_string
  (c-name "pango_font_description_from_string")
  (is-constructor-of "PangoFontDescription")
  (return-type "PangoFontDescription*")
  (parameters
    '("const-char*" "str")
  )
)

(define-method to_string
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_to_string")
  (return-type "char*")
)

(define-method to_filename
  (of-object "PangoFontDescription")
  (c-name "pango_font_description_to_filename")
  (return-type "char*")
)

(define-function pango_font_metrics_get_type
  (c-name "pango_font_metrics_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_ref")
  (return-type "PangoFontMetrics*")
)

(define-method unref
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_unref")
  (return-type "none")
)

(define-method get_ascent
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_ascent")
  (return-type "int")
)

(define-method get_descent
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_descent")
  (return-type "int")
)

(define-method get_approximate_char_width
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_approximate_char_width")
  (return-type "int")
)

(define-method get_approximate_digit_width
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_approximate_digit_width")
  (return-type "int")
)

(define-method get_underline_position
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_underline_position")
  (return-type "int")
)

(define-method get_underline_thickness
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_underline_thickness")
  (return-type "int")
)

(define-method get_strikethrough_position
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_strikethrough_position")
  (return-type "int")
)

(define-method get_strikethrough_thickness
  (of-object "PangoFontMetrics")
  (c-name "pango_font_metrics_get_strikethrough_thickness")
  (return-type "int")
)

(ifdef PANGO_ENABLE_BACKEND

(define-function font_metrics_new
  (c-name "pango_font_metrics_new")
  (is-constructor-of "PangoFontMetrics")
  (return-type "PangoFontMetrics*")
)
) ;; PANGO_ENABLE_BACKEND

(define-function pango_font_family_get_type
  (c-name "pango_font_family_get_type")
  (return-type "GType")
)

(define-method list_faces
  (of-object "PangoFontFamily")
  (c-name "pango_font_family_list_faces")
  (return-type "none")
  (parameters
    '("PangoFontFace***" "faces")
    '("int*" "n_faces")
  )
)

(define-method get_name
  (of-object "PangoFontFamily")
  (c-name "pango_font_family_get_name")
  (return-type "const-char*")
)

(define-method is_monospace
  (of-object "PangoFontFamily")
  (c-name "pango_font_family_is_monospace")
  (return-type "gboolean")
)

(define-function pango_font_face_get_type
  (c-name "pango_font_face_get_type")
  (return-type "GType")
)

(define-method describe
  (of-object "PangoFontFace")
  (c-name "pango_font_face_describe")
  (return-type "PangoFontDescription*")
  (caller-owns-return #t)
)

(define-method get_face_name
  (of-object "PangoFontFace")
  (c-name "pango_font_face_get_face_name")
  (return-type "const-char*")
)

(define-method list_sizes
  (of-object "PangoFontFace")
  (c-name "pango_font_face_list_sizes")
  (return-type "none")
  (parameters
    '("int**" "sizes")
    '("int*" "n_sizes")
  )
)

(define-function pango_font_get_type
  (c-name "pango_font_get_type")
  (return-type "GType")
)

(define-method describe
  (of-object "PangoFont")
  (c-name "pango_font_describe")
  (return-type "PangoFontDescription*")
  (caller-owns-return #t)
)

(define-method get_coverage
  (of-object "PangoFont")
  (c-name "pango_font_get_coverage")
  (return-type "PangoCoverage*")
  (caller-owns-return #t)
  (parameters
    '("PangoLanguage*" "language")
  )
)

(define-method find_shaper
  (of-object "PangoFont")
  (c-name "pango_font_find_shaper")
  (return-type "PangoEngineShape*")
  (parameters
    '("PangoLanguage*" "language")
    '("guint32" "ch")
  )
)

(define-method get_metrics
  (of-object "PangoFont")
  (c-name "pango_font_get_metrics")
  (return-type "PangoFontMetrics*")
  (caller-owns-return #t)
  (parameters
    '("PangoLanguage*" "language" (null-ok) (default "NULL"))
  )
)

(define-method get_glyph_extents
  (of-object "PangoFont")
  (c-name "pango_font_get_glyph_extents")
  (return-type "none")
  (parameters
    '("PangoGlyph" "glyph")
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_font_map
  (of-object "PangoFont")
  (c-name "pango_font_get_font_map")
  (return-type "PangoFontMap*")
)
 
(define-virtual list_faces
  (of-object "PangoFontFamily")
  (return-type "none")
  (parameters
    '("PangoFontFace***" "faces")
    '("int*" "n_faces")
  )
)

(define-virtual get_name
  (of-object "PangoFontFamily")
  (return-type "const-char*")
)

(define-virtual is_monospace
  (of-object "PangoFontFamily")
  (return-type "gboolean")
)

(define-virtual get_face_name
  (of-object "PangoFontFace")
  (return-type "const-char*")
)

(define-virtual describe
  (of-object "PangoFontFace")
  (return-type "PangoFontDescription*")
)

(define-virtual list_sizes
  (of-object "PangoFontFace")
  (return-type "none")
  (parameters
    '("int**" "sizes")
    '("int*" "n_sizes")
  )
)

(define-virtual describe
  (of-object "PangoFont")
  (return-type "PangoFontDescription*")
)

(define-virtual get_coverage
  (of-object "PangoFont")
  (return-type "PangoCoverage*")
  (parameters
    '("PangoLanguage*" "lang")
  )
)

(define-virtual find_shaper
  (of-object "PangoFont")
  (return-type "PangoEngineShape*")
  (parameters
    '("PangoLanguage*" "lang")
    '("guint32" "ch")
  )
)

(define-virtual get_glyph_extents
  (of-object "PangoFont")
  (return-type "none")
  (parameters
    '("PangoGlyph" "glyph")
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-virtual get_metrics
  (of-object "PangoFont")
  (return-type "PangoFontMetrics*")
  (parameters
    '("PangoLanguage*" "language")
  )
)

(define-virtual get_font_map
  (of-object "PangoFont")
  (return-type "PangoFontMap*")
)





;; From /opt/gtk2/include/pango-1.0/pango/pango-fontmap.h

(define-function font_map_get_type
  (c-name "pango_font_map_get_type")
  (return-type "GType")
)

(define-method load_font
  (of-object "PangoFontMap")
  (c-name "pango_font_map_load_font")
  (return-type "PangoFont*")
  (caller-owns-return #t)
  (parameters
    '("PangoContext*" "context")
    '("const-PangoFontDescription*" "desc")
  )
)

(define-method load_fontset
  (of-object "PangoFontMap")
  (c-name "pango_font_map_load_fontset")
  (return-type "PangoFontset*")
  (caller-owns-return #t)
  (parameters
    '("PangoContext*" "context")
    '("const-PangoFontDescription*" "desc")
    '("PangoLanguage*" "language")
  )
)

(define-method list_families
  (of-object "PangoFontMap")
  (c-name "pango_font_map_list_families")
  (return-type "none")
  (parameters
    '("PangoFontFamily***" "families")
    '("int*" "n_families")
  )
)

(define-method get_shape_engine_type
  (of-object "PangoFontMap")
  (c-name "pango_font_map_get_shape_engine_type")
  (return-type "const-char*")
)

(define-method create_context
  (of-object "PangoFontMap")
  (c-name "pango_font_map_create_context")
  (return-type "PangoContext*")
  (caller-owns-return #t)
)

(define-virtual load_font
  (of-object "PangoFontMap")
  (return-type "PangoFont*")
  (parameters
    '("PangoContext*" "context")
    '("const-PangoFontDescription*" "desc")
  )
)

(define-virtual list_families
  (of-object "PangoFontMap")
  (return-type "none")
  (parameters
    '("PangoFontFamily***" "families")
    '("int*" "n_families")
  )
)

(define-virtual load_fontset
  (of-object "PangoFontMap")
  (return-type "PangoFontset*")
  (parameters
    '("PangoContext*" "context")
    '("const-PangoFontDescription*" "desc")
    '("PangoLanguage*" "language")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-fontset.h

(define-function fontset_get_type
  (c-name "pango_fontset_get_type")
  (return-type "GType")
)

(define-method get_font
  (of-object "PangoFontset")
  (c-name "pango_fontset_get_font")
  (return-type "PangoFont*")
  (caller-owns-return #t)
  (parameters
    '("guint" "wc")
  )
)

(define-method get_metrics
  (of-object "PangoFontset")
  (c-name "pango_fontset_get_metrics")
  (return-type "PangoFontMetrics*")
  (caller-owns-return #t)
)

(define-method foreach
  (of-object "PangoFontset")
  (c-name "pango_fontset_foreach")
  (return-type "none")
  (parameters
    '("PangoFontsetForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-function fontset_simple_get_type
  (c-name "pango_fontset_simple_get_type")
  (return-type "GType")
)

(define-function pango_fontset_simple_new
  (c-name "pango_fontset_simple_new")
  (is-constructor-of "PangoFontsetSimple")
  (return-type "PangoFontsetSimple*")
  (parameters
    '("PangoLanguage*" "language")
  )
)

(define-method append
  (of-object "PangoFontsetSimple")
  (c-name "pango_fontset_simple_append")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
  )
)

(define-method size
  (of-object "PangoFontsetSimple")
  (c-name "pango_fontset_simple_size")
  (return-type "int")
)

(define-virtual get_font
  (of-object "PangoFontset")
  (return-type "PangoFont*")
  (parameters
    '("guint" "wc")
  )
)

(define-virtual get_metrics
  (of-object "PangoFontset")
  (return-type "PangoFontMetrics*")
)

(define-virtual get_language
  (of-object "PangoFontset")
  (return-type "PangoLanguage*")
)

(define-virtual foreach
  (of-object "PangoFontset")
  (return-type "none")
  (parameters
    '("PangoFontsetForeachFunc" "func")
    '("gpointer" "data")
  )
)



;; From pango-gravity.h

(define-function gravity_to_rotation
  (c-name "pango_gravity_to_rotation")
  (return-type "double")
  (parameters
    '("PangoGravity" "gravity")
  )
)

(define-function gravity_get_for_matrix
  (c-name "pango_gravity_get_for_matrix")
  (return-type "PangoGravity")
  (parameters
    '("const-PangoMatrix*" "matrix")
  )
)

(define-function gravity_get_for_script
  (c-name "pango_gravity_get_for_script")
  (return-type "PangoGravity")
  (parameters
    '("PangoScript" "script")
    '("PangoGravity" "base_gravity")
    '("PangoGravityHint" "hint")
  )
)



;; From pango-glyph-item.h

(define-method split
  (of-object "PangoGlyphItem")
  (c-name "pango_glyph_item_split")
  (return-type "PangoGlyphItem*")
  (caller-owns-return #t)
  (parameters
    '("const-char*" "text")
    '("int" "split_index")
  )
)

(define-method free
  (of-object "PangoGlyphItem")
  (c-name "pango_glyph_item_free")
  (return-type "none")
)

(define-method apply_attrs
  (of-object "PangoGlyphItem")
  (c-name "pango_glyph_item_apply_attrs")
  (return-type "GSList*")
  (parameters
    '("const-char*" "text")
    '("PangoAttrList*" "list")
  )
)

(define-method letter_space
  (of-object "PangoGlyphItem")
  (c-name "pango_glyph_item_letter_space")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("PangoLogAttr*" "log_attrs")
    '("int" "letter_spacing")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-glyph.h

(define-function pango_glyph_string_new
  (c-name "pango_glyph_string_new")
  (is-constructor-of "PangoGlyphString")
  (return-type "PangoGlyphString*")
)

(define-method set_size
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_set_size")
  (return-type "none")
  (parameters
    '("gint" "new_len")
  )
)

(define-function pango_glyph_string_get_type
  (c-name "pango_glyph_string_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_copy")
  (return-type "PangoGlyphString*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_free")
  (return-type "none")
)

(define-method extents
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_extents")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method extents_range
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_extents_range")
  (return-type "none")
  (parameters
    '("int" "start")
    '("int" "end")
    '("PangoFont*" "font")
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_logical_widths
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_get_logical_widths")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("int" "length")
    '("int" "embedding_level")
    '("int*" "logical_widths")
  )
)

(define-method index_to_x
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_index_to_x")
  (return-type "none")
  (parameters
    '("char*" "text")
    '("int" "length")
    '("PangoAnalysis*" "analysis")
    '("int" "index")
    '("gboolean" "trailing")
    '("int*" "x_pos")
  )
)

(define-method x_to_index
  (of-object "PangoGlyphString")
  (c-name "pango_glyph_string_x_to_index")
  (return-type "none")
  (parameters
    '("char*" "text")
    '("int" "length")
    '("PangoAnalysis*" "analysis")
    '("int" "x_pos")
    '("int*" "index")
    '("int*" "trailing")
  )
)

(define-function shape
  (c-name "pango_shape")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
    '("PangoAnalysis*" "analysis")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-function reorder_items
  (c-name "pango_reorder_items")
  (return-type "GList*")
  (parameters
    '("GList*" "logical_items")
  )
)



;; From pango-item.h

(define-function item_get_type
  (c-name "pango_item_get_type")
  (return-type "GType")
)

(define-function item_new
  (c-name "pango_item_new")
  (is-constructor-of "PangoItem")
  (return-type "PangoItem*")
)

(define-method copy
  (of-object "PangoItem")
  (c-name "pango_item_copy")
  (return-type "PangoItem*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoItem")
  (c-name "pango_item_free")
  (return-type "none")
)

(define-method split
  (of-object "PangoItem")
  (c-name "pango_item_split")
  (return-type "PangoItem*")
  (caller-owns-return #t)
  (parameters
    '("int" "split_index")
    '("int" "split_offset")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-layout.h

(define-function pango_layout_get_type
  (c-name "pango_layout_get_type")
  (return-type "GType")
)

(define-function pango_layout_new
  (c-name "pango_layout_new")
  (is-constructor-of "PangoLayout")
  (return-type "PangoLayout*")
  (parameters
    '("PangoContext*" "context")
  )
)

(define-method copy
  (of-object "PangoLayout")
  (c-name "pango_layout_copy")
  (return-type "PangoLayout*")
  (caller-owns-return #t)
)

(define-method get_context
  (of-object "PangoLayout")
  (c-name "pango_layout_get_context")
  (return-type "PangoContext*")
)

(define-method set_attributes
  (of-object "PangoLayout")
  (c-name "pango_layout_set_attributes")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "PangoLayout")
  (c-name "pango_layout_get_attributes")
  (return-type "PangoAttrList*")
)

(define-method set_text
  (of-object "PangoLayout")
  (c-name "pango_layout_set_text")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("int" "length")
  )
)

(define-method get_text
  (of-object "PangoLayout")
  (c-name "pango_layout_get_text")
  (return-type "const-char*")
)

(define-method set_markup
  (of-object "PangoLayout")
  (c-name "pango_layout_set_markup")
  (return-type "none")
  (parameters
    '("const-char*" "markup")
    '("int" "length")
  )
)

(define-method set_markup_with_accel
  (of-object "PangoLayout")
  (c-name "pango_layout_set_markup_with_accel")
  (return-type "none")
  (parameters
    '("const-char*" "markup")
    '("int" "length")
    '("gunichar" "accel_marker")
    '("gunichar*" "accel_char")
  )
)

(define-method set_font_description
  (of-object "PangoLayout")
  (c-name "pango_layout_set_font_description")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "desc" (null-ok))
  )
)

(define-method get_font_description
  (of-object "PangoLayout")
  (c-name "pango_layout_get_font_description")
  (return-type "const-PangoFontDescription*")
)

(define-method set_width
  (of-object "PangoLayout")
  (c-name "pango_layout_set_width")
  (return-type "none")
  (parameters
    '("int" "width")
  )
)

(define-method get_width
  (of-object "PangoLayout")
  (c-name "pango_layout_get_width")
  (return-type "int")
)

(define-method set_wrap
  (of-object "PangoLayout")
  (c-name "pango_layout_set_wrap")
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap")
  )
)

(define-method get_wrap
  (of-object "PangoLayout")
  (c-name "pango_layout_get_wrap")
  (return-type "PangoWrapMode")
)

(define-method is_wrapped
  (of-object "PangoLayout")
  (c-name "pango_layout_is_wrapped")
  (return-type "gboolean")
)

(define-method set_indent
  (of-object "PangoLayout")
  (c-name "pango_layout_set_indent")
  (return-type "none")
  (parameters
    '("int" "indent")
  )
)

(define-method get_indent
  (of-object "PangoLayout")
  (c-name "pango_layout_get_indent")
  (return-type "int")
)

(define-method set_spacing
  (of-object "PangoLayout")
  (c-name "pango_layout_set_spacing")
  (return-type "none")
  (parameters
    '("int" "spacing")
  )
)

(define-method get_spacing
  (of-object "PangoLayout")
  (c-name "pango_layout_get_spacing")
  (return-type "int")
)

(define-method set_justify
  (of-object "PangoLayout")
  (c-name "pango_layout_set_justify")
  (return-type "none")
  (parameters
    '("gboolean" "justify")
  )
)

(define-method get_justify
  (of-object "PangoLayout")
  (c-name "pango_layout_get_justify")
  (return-type "gboolean")
)

(define-method set_auto_dir
  (of-object "PangoLayout")
  (c-name "pango_layout_set_auto_dir")
  (return-type "none")
  (parameters
    '("gboolean" "auto_dir")
  )
)

(define-method get_auto_dir
  (of-object "PangoLayout")
  (c-name "pango_layout_get_auto_dir")
  (return-type "gboolean")
)

(define-method set_alignment
  (of-object "PangoLayout")
  (c-name "pango_layout_set_alignment")
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_alignment
  (of-object "PangoLayout")
  (c-name "pango_layout_get_alignment")
  (return-type "PangoAlignment")
)

(define-method set_tabs
  (of-object "PangoLayout")
  (c-name "pango_layout_set_tabs")
  (return-type "none")
  (parameters
    '("PangoTabArray*" "tabs" (null-ok))
  )
)

(define-method get_tabs
  (of-object "PangoLayout")
  (c-name "pango_layout_get_tabs")
  (return-type "PangoTabArray*")
  (caller-owns-return #t)
)

(define-method set_single_paragraph_mode
  (of-object "PangoLayout")
  (c-name "pango_layout_set_single_paragraph_mode")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_single_paragraph_mode
  (of-object "PangoLayout")
  (c-name "pango_layout_get_single_paragraph_mode")
  (return-type "gboolean")
)

(define-method set_ellipsize
  (of-object "PangoLayout")
  (c-name "pango_layout_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "ellipsize")
  )
)

(define-method get_ellipsize
  (of-object "PangoLayout")
  (c-name "pango_layout_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

(define-method is_ellipsized
  (of-object "PangoLayout")
  (c-name "pango_layout_is_ellipsized")
  (return-type "gboolean")
)

(define-method get_unknown_glyphs_count
  (of-object "PangoLayout")
  (c-name "pango_layout_get_unknown_glyphs_count")
  (return-type "int")
)

(define-method context_changed
  (of-object "PangoLayout")
  (c-name "pango_layout_context_changed")
  (return-type "none")
)

(define-method get_log_attrs
  (of-object "PangoLayout")
  (c-name "pango_layout_get_log_attrs")
  (return-type "none")
  (parameters
    '("PangoLogAttr**" "attrs")
    '("gint*" "n_attrs")
  )
)

(define-method index_to_pos
  (of-object "PangoLayout")
  (c-name "pango_layout_index_to_pos")
  (return-type "none")
  (parameters
    '("int" "index")
    '("PangoRectangle*" "pos")
  )
)

(define-method get_cursor_pos
  (of-object "PangoLayout")
  (c-name "pango_layout_get_cursor_pos")
  (return-type "none")
  (parameters
    '("int" "index")
    '("PangoRectangle*" "strong_pos")
    '("PangoRectangle*" "weak_pos")
  )
)

(define-method move_cursor_visually
  (of-object "PangoLayout")
  (c-name "pango_layout_move_cursor_visually")
  (return-type "none")
  (parameters
    '("gboolean" "strong")
    '("int" "old_index")
    '("int" "old_trailing")
    '("int" "direction")
    '("int*" "new_index")
    '("int*" "new_trailing")
  )
)

(define-method xy_to_index
  (of-object "PangoLayout")
  (c-name "pango_layout_xy_to_index")
  (return-type "gboolean")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int*" "index")
    '("int*" "trailing")
  )
)

(define-method get_extents
  (of-object "PangoLayout")
  (c-name "pango_layout_get_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_pixel_extents
  (of-object "PangoLayout")
  (c-name "pango_layout_get_pixel_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_size
  (of-object "PangoLayout")
  (c-name "pango_layout_get_size")
  (return-type "none")
  (parameters
    '("int*" "width")
    '("int*" "height")
  )
)

(define-method get_pixel_size
  (of-object "PangoLayout")
  (c-name "pango_layout_get_pixel_size")
  (return-type "none")
  (parameters
    '("int*" "width")
    '("int*" "height")
  )
)

(define-method get_line_count
  (of-object "PangoLayout")
  (c-name "pango_layout_get_line_count")
  (return-type "int")
)

(define-method get_line
  (of-object "PangoLayout")
  (c-name "pango_layout_get_line")
  (return-type "PangoLayoutLine*")
  (parameters
    '("int" "line")
  )
)

(define-method get_line_readonly
  (of-object "PangoLayout")
  (c-name "pango_layout_get_line_readonly")
  (return-type "PangoLayoutLine*")
  (parameters
    '("int" "line")
  )
)

(define-method get_lines
  (of-object "PangoLayout")
  (c-name "pango_layout_get_lines")
  (return-type "GSList*")
)

(define-method get_lines_readonly
  (of-object "PangoLayout")
  (c-name "pango_layout_get_lines_readonly")
  (return-type "GSList*")
)

(define-function layout_line_get_type
  (c-name "pango_layout_line_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_ref")
  (return-type "PangoLayoutLine*")
)

(define-method unref
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_unref")
  (return-type "none")
)

(define-method x_to_index
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_x_to_index")
  (return-type "gboolean")
  (parameters
    '("int" "x_pos")
    '("int*" "index")
    '("int*" "trailing")
  )
)

(define-method index_to_x
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_index_to_x")
  (return-type "none")
  (parameters
    '("int" "index")
    '("gboolean" "trailing")
    '("int*" "x_pos")
  )
)

(define-method get_x_ranges
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_get_x_ranges")
  (return-type "none")
  (parameters
    '("int" "start_index")
    '("int" "end_index")
    '("int**" "ranges")
    '("int*" "n_ranges")
  )
)

(define-method get_extents
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_get_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_pixel_extents
  (of-object "PangoLayoutLine")
  (c-name "pango_layout_line_get_pixel_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-function pango_layout_iter_get_type
  (c-name "pango_layout_iter_get_type")
  (return-type "GType")
)

(define-method get_iter
  (of-object "PangoLayout")
  (c-name "pango_layout_get_iter")
  (return-type "PangoLayoutIter*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_free")
  (return-type "none")
)

(define-method get_index
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_index")
  (return-type "int")
)

(define-method get_run
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_run")
  (return-type "PangoLayoutRun*")
)

(define-method get_run_readonly
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_run_readonly")
  (return-type "PangoLayoutRun*")
)

(define-method get_line
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_line")
  (return-type "PangoLayoutLine*")
)

(define-method get_line_readonly
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_line_readonly")
  (return-type "PangoLayoutLine*")
)

(define-method at_last_line
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_at_last_line")
  (return-type "gboolean")
)

(define-method next_char
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_next_char")
  (return-type "gboolean")
)

(define-method next_cluster
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_next_cluster")
  (return-type "gboolean")
)

(define-method next_run
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_next_run")
  (return-type "gboolean")
)

(define-method next_line
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_next_line")
  (return-type "gboolean")
)

(define-method get_char_extents
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_char_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_cluster_extents
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_cluster_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_run_extents
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_run_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_line_extents
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_line_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_line_yrange
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_line_yrange")
  (return-type "none")
  (parameters
    '("int*" "y0")
    '("int*" "y1")
  )
)

(define-method get_layout_extents
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_layout_extents")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-method get_baseline
  (of-object "PangoLayoutIter")
  (c-name "pango_layout_iter_get_baseline")
  (return-type "int")
)



;; From pango-modules.h

(ifdef PANGO_ENABLE_BACKEND

(define-function find_map
  (c-name "pango_find_map")
  (return-type "PangoMap*")
  (parameters
    '("PangoLanguage*" "language")
    '("guint" "engine_type_id")
    '("guint" "render_type_id")
  )
)

(define-method get_engine
  (of-object "PangoMap")
  (c-name "pango_map_get_engine")
  (return-type "PangoEngine*")
  (parameters
    '("PangoScript" "script")
  )
)

(define-method get_engines
  (of-object "PangoMap")
  (c-name "pango_map_get_engines")
  (return-type "none")
  (parameters
    '("PangoScript" "script")
    '("GSList**" "exact_engines")
    '("GSList**" "fallback_engines")
  )
)

(define-function module_register
  (c-name "pango_module_register")
  (return-type "none")
  (parameters
    '("PangoIncludedModule*" "module")
  )
)
) ;; PANGO_ENABLE_BACKEND


;; From /home/jdahlin/dev/gtk-2.8/pango/pango/pango-renderer.h

(define-function pango_renderer_get_type
  (c-name "pango_renderer_get_type")
  (return-type "GType")
)

(define-method draw_layout
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_layout")
  (return-type "none")
  (parameters
    '("PangoLayout*" "layout")
    '("int" "x")
    '("int" "y")
  )
)

(define-method draw_layout_line
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_layout_line")
  (return-type "none")
  (parameters
    '("PangoLayoutLine*" "line")
    '("int" "x")
    '("int" "y")
  )
)

(define-method draw_glyphs
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_glyphs")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("PangoGlyphString*" "glyphs")
    '("int" "x")
    '("int" "y")
  )
)

(define-method draw_rectangle
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_rectangle")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method draw_error_underline
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_error_underline")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method draw_trapezoid
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_trapezoid")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("double" "y1_")
    '("double" "x11")
    '("double" "x21")
    '("double" "y2")
    '("double" "x12")
    '("double" "x22")
  )
)

(define-method draw_glyph
  (of-object "PangoRenderer")
  (c-name "pango_renderer_draw_glyph")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("PangoGlyph" "glyph")
    '("double" "x")
    '("double" "y")
  )
)

(define-method activate
  (of-object "PangoRenderer")
  (c-name "pango_renderer_activate")
  (return-type "none")
)

(define-method deactivate
  (of-object "PangoRenderer")
  (c-name "pango_renderer_deactivate")
  (return-type "none")
)

(define-method part_changed
  (of-object "PangoRenderer")
  (c-name "pango_renderer_part_changed")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
  )
)

(define-method set_color
  (of-object "PangoRenderer")
  (c-name "pango_renderer_set_color")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("const-PangoColor*" "color")
  )
)

(define-method get_color
  (of-object "PangoRenderer")
  (c-name "pango_renderer_get_color")
  (return-type "PangoColor*")
  (parameters
    '("PangoRenderPart" "part")
  )
)

(define-method set_matrix
  (of-object "PangoRenderer")
  (c-name "pango_renderer_set_matrix")
  (return-type "none")
  (parameters
    '("const-PangoMatrix*" "matrix")
  )
)

(define-method get_matrix
  (of-object "PangoRenderer")
  (c-name "pango_renderer_get_matrix")
  (return-type "const-PangoMatrix*")
)

(define-virtual draw_glyphs
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("PangoGlyphString*" "glyphs")
    '("int" "x")
    '("int" "y")
  )
)

(define-virtual draw_rectangle
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual draw_error_underline
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual draw_shape
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoAttrShape*" "attr")
    '("int" "x")
    '("int" "y")
  )
)

(define-virtual draw_trapezoid
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
    '("double" "y1_")
    '("double" "x11")
    '("double" "x21")
    '("double" "y2")
    '("double" "x12")
    '("double" "x22")
  )
)

(define-virtual draw_glyph
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoFont*" "font")
    '("PangoGlyph" "glyph")
    '("double" "x")
    '("double" "y")
  )
)

(define-virtual part_changed
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part")
  )
)

(define-virtual begin
  (of-object "PangoRenderer")
  (return-type "none")
)

(define-virtual end
  (of-object "PangoRenderer")
  (return-type "none")
)

(define-virtual prepare_run
  (of-object "PangoRenderer")
  (return-type "none")
  (parameters
    '("PangoLayoutRun*" "run")
  )
)

;; From pango-script.h

(define-function script_for_unichar
  (c-name "pango_script_for_unichar")
  (return-type "PangoScript")
  (parameters
    '("gunichar" "ch")
  )
)

(define-function script_iter_new
  (c-name "pango_script_iter_new")
  (is-constructor-of "PangoScriptIter")
  (return-type "PangoScriptIter*")
  (parameters
    '("const-char*" "text")
    '("int" "length")
  )
)

(define-method get_range
  (of-object "PangoScriptIter")
  (c-name "pango_script_iter_get_range")
  (return-type "none")
  (parameters
    '("const-char**" "start")
    '("const-char**" "end")
    '("PangoScript*" "script")
  )
)

(define-method next
  (of-object "PangoScriptIter")
  (c-name "pango_script_iter_next")
  (return-type "gboolean")
)

(define-method free
  (of-object "PangoScriptIter")
  (c-name "pango_script_iter_free")
  (return-type "none")
)

(define-function get_sample_language
  (c-name "pango_script_get_sample_language")
  (return-type "PangoLanguage*")
  (parameters
    '("PangoScript" "script")
  )
)

(define-method includes_script
  (of-object "PangoLanguage")
  (c-name "pango_language_includes_script")
  (return-type "gboolean")
  (parameters
    '("PangoScript" "script")
  )
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-tabs.h

(define-function pango_tab_array_new
  (c-name "pango_tab_array_new")
  (is-constructor-of "PangoTabArray")
  (return-type "PangoTabArray*")
  (parameters
    '("gint" "initial_size")
    '("gboolean" "positions_in_pixels")
  )
)

(define-function pango_tab_array_new_with_positions
  (c-name "pango_tab_array_new_with_positions")
  (is-constructor-of "PangoTabArray")
  (return-type "PangoTabArray*")
  (parameters
    '("gint" "size")
    '("gboolean" "positions_in_pixels")
    '("PangoTabAlign" "first_alignment")
    '("gint" "first_position")
  )
  (varargs #t)
)

(define-function pango_tab_array_get_type
  (c-name "pango_tab_array_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_copy")
  (return-type "PangoTabArray*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_free")
  (return-type "none")
)

(define-method get_size
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_get_size")
  (return-type "gint")
)

(define-method resize
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_resize")
  (return-type "none")
  (parameters
    '("gint" "new_size")
  )
)

(define-method set_tab
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_set_tab")
  (return-type "none")
  (parameters
    '("gint" "tab_index")
    '("PangoTabAlign" "alignment")
    '("gint" "location")
  )
)

(define-method get_tab
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_get_tab")
  (return-type "none")
  (parameters
    '("gint" "tab_index")
    '("PangoTabAlign*" "alignment")
    '("gint*" "location")
  )
)

(define-method get_tabs
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_get_tabs")
  (return-type "none")
  (parameters
    '("PangoTabAlign**" "alignments")
    '("gint**" "locations")
  )
)

(define-method get_positions_in_pixels
  (of-object "PangoTabArray")
  (c-name "pango_tab_array_get_positions_in_pixels")
  (return-type "gboolean")
)



;; From /opt/gtk2/include/pango-1.0/pango/pango-types.h

(define-function matrix_get_type
  (c-name "pango_matrix_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "PangoMatrix")
  (c-name "pango_matrix_copy")
  (return-type "PangoMatrix*")
  (caller-owns-return #t)
)

(define-method free
  (of-object "PangoMatrix")
  (c-name "pango_matrix_free")
  (return-type "none")
)

(define-method translate
  (of-object "PangoMatrix")
  (c-name "pango_matrix_translate")
  (return-type "none")
  (parameters
    '("double" "tx")
    '("double" "ty")
  )
)

(define-method scale
  (of-object "PangoMatrix")
  (c-name "pango_matrix_scale")
  (return-type "none")
  (parameters
    '("double" "scale_x")
    '("double" "scale_y")
  )
)

(define-method rotate
  (of-object "PangoMatrix")
  (c-name "pango_matrix_rotate")
  (return-type "none")
  (parameters
    '("double" "degrees")
  )
)

(define-method concat
  (of-object "PangoMatrix")
  (c-name "pango_matrix_concat")
  (return-type "none")
  (parameters
    '("const-PangoMatrix*" "new_matrix")
  )
)

(define-method transform_point
  (of-object "PangoMatrix")
  (c-name "pango_matrix_transform_point")
  (return-type "none")
  (parameters
    '("double*" "x")
    '("double*" "y")
  )
)

(define-method transform_distance
  (of-object "PangoMatrix")
  (c-name "pango_matrix_transform_distance")
  (return-type "none")
  (parameters
    '("double*" "dx")
    '("double*" "dy")
  )
)

(define-method transform_rectangle
  (of-object "PangoMatrix")
  (c-name "pango_matrix_transform_rectangle")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "rect")
  )
)

(define-method transform_pixel_rectangle
  (of-object "PangoMatrix")
  (c-name "pango_matrix_transform_pixel_rectangle")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "rect")
  )
)

(define-function language_get_type
  (c-name "pango_language_get_type")
  (return-type "GType")
)

(define-function pango_language_from_string
  (is-constructor-of "PangoLanguage")
  (c-name "pango_language_from_string")
  (return-type "PangoLanguage*")
  (parameters
    '("const-char*" "language")
  )
)

(define-function pango_language_from_string
  (c-name "pango_language_from_string1")
  (return-type "PangoLanguage*")
  (parameters
    '("const-char*" "language")
  )
  (deprecated "use pango.Language instead")
)

(define-function pango_language_matches
  (c-name "pango_language_matches1")
  (return-type "gboolean")
  (parameters
    '("PangoLanguage*" "language" (null-ok))
    '("const-char*" "range_list")
  )
  (deprecated "use pango.Language.matches instead")
)

(define-method matches
  (of-object "PangoLanguage")
  (c-name "pango_language_matches")
  (return-type "gboolean")
  (parameters
    '("const-char*" "range_list")
  )
)

(define-method to_string
  (of-object "PangoLanguage")
  (c-name "pango_language_to_string")
  (return-type "const-char*")
)

(define-function get_mirror_char
  (c-name "pango_get_mirror_char")
  (return-type "gboolean")
  (parameters
    '("gunichar" "ch")
    '("gunichar*" "mirrored_ch")
  )
  (deprecated "deprecated")
)
 
(define-function unichar_direction
  (c-name "pango_unichar_direction")
  (return-type "PangoDirection")
  (parameters
    '("gunichar" "ch")
  )
)

(define-function find_base_dir
  (c-name "pango_find_base_dir")
  (return-type "PangoDirection")
  (parameters
    '("const-gchar*" "text")
    '("gint" "length")
  )
)

(define-function extents_to_pixels
  (c-name "pango_extents_to_pixels")
  (return-type "none")
  (parameters
    '("PangoRectangle*" "ink_rect")
    '("PangoRectangle*" "logical_rect")
  )
)

(define-function units_from_double
  (c-name "pango_units_from_double")
  (return-type "int")
  (parameters
    '("double" "d")
  )
)

(define-function units_to_double
  (c-name "pango_units_to_double")
  (return-type "double")
  (parameters
    '("int" "i")
  )
)

;;

(define-function PIXELS
  (c-name "PANGO_PIXELS")
  (return-type "gint")
  (parameters
    '("gint" "size")
   )
 )


;; From pango-utils.h

(ifdef USE_PANGO_UTILS

(define-function split_file_list
  (c-name "pango_split_file_list")
  (return-type "char**")
  (parameters
    '("const-char*" "str")
  )
)

(define-function trim_string
  (c-name "pango_trim_string")
  (return-type "char*")
  (parameters
    '("const-char*" "str")
  )
)

(define-function read_line
  (c-name "pango_read_line")
  (return-type "gint")
  (parameters
    '("FILE*" "stream")
    '("GString*" "str")
  )
)

(define-function skip_space
  (c-name "pango_skip_space")
  (return-type "gboolean")
  (parameters
    '("const-char**" "pos")
  )
)

(define-function scan_word
  (c-name "pango_scan_word")
  (return-type "gboolean")
  (parameters
    '("const-char**" "pos")
    '("GString*" "out")
  )
)

(define-function scan_string
  (c-name "pango_scan_string")
  (return-type "gboolean")
  (parameters
    '("const-char**" "pos")
    '("GString*" "out")
  )
)

(define-function scan_int
  (c-name "pango_scan_int")
  (return-type "gboolean")
  (parameters
    '("const-char**" "pos")
    '("int*" "out")
  )
)

(define-function config_key_get
  (c-name "pango_config_key_get")
  (return-type "char*")
  (parameters
    '("const-char*" "key")
  )
)

(define-function lookup_aliases
  (c-name "pango_lookup_aliases")
  (return-type "none")
  (parameters
    '("const-char*" "fontname")
    '("char***" "families")
    '("int*" "n_families")
  )
)

(define-function parse_enum
  (c-name "pango_parse_enum")
  (return-type "gboolean")
  (parameters
    '("GType" "type")
    '("const-char*" "str")
    '("int*" "value")
    '("gboolean" "warn")
    '("char**" "possible_values")
  )
)

(define-function parse_style
  (c-name "pango_parse_style")
  (return-type "gboolean")
  (parameters
    '("const-char*" "str")
    '("PangoStyle*" "style")
    '("gboolean" "warn")
  )
)

(define-function parse_variant
  (c-name "pango_parse_variant")
  (return-type "gboolean")
  (parameters
    '("const-char*" "str")
    '("PangoVariant*" "variant")
    '("gboolean" "warn")
  )
)

(define-function parse_weight
  (c-name "pango_parse_weight")
  (return-type "gboolean")
  (parameters
    '("const-char*" "str")
    '("PangoWeight*" "weight")
    '("gboolean" "warn")
  )
)

(define-function parse_stretch
  (c-name "pango_parse_stretch")
  (return-type "gboolean")
  (parameters
    '("const-char*" "str")
    '("PangoStretch*" "stretch")
    '("gboolean" "warn")
  )
)

(define-function get_sysconf_subdirectory
  (c-name "pango_get_sysconf_subdirectory")
  (return-type "const-char*")
)

(define-function get_lib_subdirectory
  (c-name "pango_get_lib_subdirectory")
  (return-type "const-char*")
)

(define-function log2vis_get_embedding_levels
  (c-name "pango_log2vis_get_embedding_levels")
  (return-type "guint8*")
  (parameters
    '("const-gchar*" "text")
    '("int" "length")
    '("PangoDirection*" "pbase_dir")
  )
)

(define-method get_sample_string
  (of-object "PangoLanguage")
  (c-name "pango_language_get_sample_string")
  (return-type "const-char*")
)

(define-function language_get_default
  (c-name "pango_language_get_default")
  (return-type "PangoLanguage*")
)

(define-function is_zero_width
  (c-name "pango_is_zero_width")
  (return-type "gboolean")
  (parameters
    '("gunichar" "ch")
  )
)
) ;; USE_PANGO_UTILS

(define-function version
  (c-name "pango_version")
  (return-type "int")
)

(define-function version_string
  (c-name "pango_version_string")
  (return-type "const-char*")
)

(define-function version_check
  (c-name "pango_version_check")
  (return-type "const-char*")
  (parameters
    '("int" "required_major")
    '("int" "required_minor")
    '("int" "required_micro")
  )
)


;; -*- scheme -*-
;; boxed definitions ...

(define-boxed AttrList
  (in-module "Pango")
  (c-name "PangoAttrList")
  (gtype-id "PANGO_TYPE_ATTR_LIST")
  (copy-func "pango_attr_list_ref")
  (release-func "pango_attr_list_unref")
)

(define-boxed Color
  (in-module "Pango")
  (c-name "PangoColor")
  (gtype-id "PANGO_TYPE_COLOR")
  (copy-func "pango_color_copy")
  (release-func "pango_color_free")
  (fields
    '("guint16" "red")
    '("guint16" "green")
    '("guint16" "blue")
  )
)

(define-boxed FontDescription
  (in-module "Pango")
  (c-name "PangoFontDescription")
  (gtype-id "PANGO_TYPE_FONT_DESCRIPTION")
  (copy-func "pango_font_description_copy")
  (release-func "pango_font_description_free")
)

(define-boxed FontMetrics
  (in-module "Pango")
  (c-name "PangoFontMetrics")
  (gtype-id "PANGO_TYPE_FONT_METRICS")
  (copy-func "pango_font_metrics_ref")
  (release-func "pango_font_metrics_unref")
)

(define-boxed GlyphString
  (in-module "Pango")
  (c-name "PangoGlyphString")
  (gtype-id "PANGO_TYPE_GLYPH_STRING")
  (copy-func "pango_glyph_string_copy")
  (release-func "pango_glyph_string_free")
  (fields
    '("gint" "num_glyphs")
    '("PangoGlyphInfo*" "glyphs")
    '("gint*" "log_clusters")
  )
)

(define-boxed Item
  (in-module "Pango")
  (c-name "PangoItem")
  (fields
   '("gint" "offset")
   '("gint" "length")
   '("gint" "num_chars")
   '("PangoEngineShape*" "analysis.shape_engine")
   '("PangoEngineLang*" "analysis.lang_engine")
   '("PangoFont*" "analysis.font")
   '("guint8" "analysis.level")
   '("PangoLanguage*" "analysis.language")
   '("GSList*" "analysis.extra_attrs")
  )
  (gtype-id "PANGO_TYPE_ITEM")
)

(define-boxed Language
  (in-module "Pango")
  (c-name "PangoLanguage")
  (gtype-id "PANGO_TYPE_LANGUAGE")
)

(define-boxed LayoutIter
  (in-module "Pango")
  (c-name "PangoLayoutIter")
  (gtype-id "PANGO_TYPE_LAYOUT_ITER")
  (release-func "pango_layout_iter_free")
)


(define-boxed LayoutLine
  (in-module "Pango")
  (c-name "PangoLayoutLine")
  (gtype-id "PANGO_TYPE_LAYOUT_LINE")
  (fields
   ; '("PangoLayout*" "layout") ;; omitted for fear of creating reference cycles
   '("gint" "start_index")
   '("gint" "length")
   '("GSList*" "runs")
   '("guint" "is_paragraph_start")
   '("guint" "resolved_dir")
   )
)

(define-boxed Matrix
  (in-module "Pango")
  (c-name "PangoMatrix")
  (gtype-id "PANGO_TYPE_MATRIX")
)

(define-boxed TabArray
  (in-module "Pango")
  (c-name "PangoTabArray")
  (gtype-id "PANGO_TYPE_TAB_ARRAY")
  (copy-func "pango_tab_array_copy")
  (release-func "pango_tab_array_free")
)


; object definitions ...

(define-object Context
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoContext")
  (gtype-id "PANGO_TYPE_CONTEXT")
)

(define-object Engine
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoEngine")
  (gtype-id "PANGO_TYPE_ENGINE")
)

(define-object EngineLang
  (in-module "Pango")
  (parent "PangoEngine")
  (c-name "PangoEngineLang")
  (gtype-id "PANGO_TYPE_ENGINE_LANG")
)

(define-object EngineShape
  (in-module "Pango")
  (parent "PangoEngine")
  (c-name "PangoEngineShape")
  (gtype-id "PANGO_TYPE_ENGINE_SHAPE")
)

(define-object Font
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoFont")
  (gtype-id "PANGO_TYPE_FONT")
)

(define-object FontFace
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoFontFace")
  (gtype-id "PANGO_TYPE_FONT_FACE")
)

(define-object FontFamily
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoFontFamily")
  (gtype-id "PANGO_TYPE_FONT_FAMILY")
)

(define-object FontMap
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoFontMap")
  (gtype-id "PANGO_TYPE_FONT_MAP")
)

(define-object Fontset
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoFontset")
  (gtype-id "PANGO_TYPE_FONTSET")
)

(define-object FontsetSimple
  (in-module "Pango")
  (parent "PangoFontset")
  (c-name "PangoFontsetSimple")
  (gtype-id "PANGO_TYPE_FONTSET_SIMPLE")
)

(define-object Layout
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoLayout")
  (gtype-id "PANGO_TYPE_LAYOUT")
)

(define-object Renderer
  (in-module "Pango")
  (parent "GObject")
  (c-name "PangoRenderer")
  (gtype-id "PANGO_TYPE_RENDERER")
)


;; -*- scheme -*-
; object definitions ...
(define-object Terminal
  (in-module "Vte")
  (parent "GtkWidget")
  (c-name "VteTerminal")
  (gtype-id "VTE_TYPE_TERMINAL")
)

;; From vte.h

(define-function vte_terminal_get_type
  (c-name "vte_terminal_get_type")
  (return-type "GType")
)

(define-function vte_terminal_new
  (c-name "vte_terminal_new")
  (is-constructor-of "VteTerminal")
  (return-type "GtkWidget*")
)

(define-method fork_command
  (of-object "VteTerminal")
  (c-name "vte_terminal_fork_command")
  (return-type "pid_t")
  (parameters
    '("const-char*" "command")
    '("char**" "argv")
    '("char**" "envv")
    '("const-char*" "directory")
    '("gboolean" "lastlog")
    '("gboolean" "utmp")
    '("gboolean" "wtmp")
  )
)

(define-method forkpty
  (of-object "VteTerminal")
  (c-name "vte_terminal_forkpty")
  (return-type "pid_t")
  (parameters
    '("char**" "envv")
    '("const-char*" "directory")
    '("gboolean" "lastlog")
    '("gboolean" "utmp")
    '("gboolean" "wtmp")
  )
)

(define-method feed
  (of-object "VteTerminal")
  (c-name "vte_terminal_feed")
  (return-type "none")
  (parameters
    '("const-char*" "data")
    '("glong" "length" (default "-1"))
  )
)

(define-method feed_child
  (of-object "VteTerminal")
  (c-name "vte_terminal_feed_child")
  (return-type "none")
  (parameters
    '("const-char*" "text")
    '("glong" "length" (default "-1"))
  )
)

(define-method feed_child_binary
  (of-object "VteTerminal")
  (c-name "vte_terminal_feed_child_binary")
  (return-type "none")
  (parameters
    '("const-char*" "data")
    '("glong" "length" (default "-1"))
  )
)

(define-method copy_clipboard
  (of-object "VteTerminal")
  (c-name "vte_terminal_copy_clipboard")
  (return-type "none")
)

(define-method paste_clipboard
  (of-object "VteTerminal")
  (c-name "vte_terminal_paste_clipboard")
  (return-type "none")
)

(define-method copy_primary
  (of-object "VteTerminal")
  (c-name "vte_terminal_copy_primary")
  (return-type "none")
)

(define-method paste_primary
  (of-object "VteTerminal")
  (c-name "vte_terminal_paste_primary")
  (return-type "none")
)

(define-method select_all
  (of-object "VteTerminal")
  (c-name "vte_terminal_select_all")
  (return-type "none")
)

(define-method select_none
  (of-object "VteTerminal")
  (c-name "vte_terminal_select_none")
  (return-type "none")
)

(define-method set_size
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_size")
  (return-type "none")
  (parameters
    '("glong" "columns")
    '("glong" "rows")
  )
)

(define-method set_audible_bell
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_audible_bell")
  (return-type "none")
  (parameters
    '("gboolean" "is_audible")
  )
)

(define-method get_audible_bell
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_audible_bell")
  (return-type "gboolean")
)

(define-method set_visible_bell
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_visible_bell")
  (return-type "none")
  (parameters
    '("gboolean" "is_visible")
  )
)

(define-method get_visible_bell
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_visible_bell")
  (return-type "gboolean")
)

(define-method set_scroll_background
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_scroll_background")
  (return-type "none")
  (parameters
    '("gboolean" "scroll")
  )
)

(define-method set_scroll_on_output
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_scroll_on_output")
  (return-type "none")
  (parameters
    '("gboolean" "scroll")
  )
)

(define-method set_scroll_on_keystroke
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_scroll_on_keystroke")
  (return-type "none")
  (parameters
    '("gboolean" "scroll")
  )
)

(define-method set_color_dim
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_dim")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "dim")
  )
)

(define-method set_color_bold
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_bold")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "bold")
  )
)

(define-method set_color_foreground
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_foreground")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "foreground")
  )
)

(define-method set_color_background
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_background")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "background")
  )
)

(define-method set_color_cursor
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_cursor")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "cursor_background")
  )
)

(define-method set_color_highlight
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_color_highlight")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "highlight_background")
  )
)

(define-method set_colors
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_colors")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "foreground")
    '("const-GdkColor*" "background")
    '("const-GdkColor*" "palette")
    '("glong" "palette_size")
  )
)

(define-method set_default_colors
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_default_colors")
  (return-type "none")
)

(define-method set_background_image
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_background_image")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "image")
  )
)

(define-method set_background_image_file
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_background_image_file")
  (return-type "none")
  (parameters
    '("const-char*" "path")
  )
)

(define-method set_background_tint_color
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_background_tint_color")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "color")
  )
)

(define-method set_background_saturation
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_background_saturation")
  (return-type "none")
  (parameters
    '("double" "saturation")
  )
)

(define-method set_background_transparent
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_background_transparent")
  (return-type "none")
  (parameters
    '("gboolean" "transparent")
  )
)

(define-method set_opacity
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_opacity")
  (return-type "none")
  (parameters
    '("guint16" "opacity")
  )
)

(define-method set_cursor_blinks
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_cursor_blinks")
  (return-type "none")
  (parameters
    '("gboolean" "blink")
  )
)

(define-method set_cursor_blink_mode
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_cursor_blink_mode")
  (return-type "none")
  (parameters
    '("VteTerminalCursorBlinkMode" "mode")
  )
)

(define-method get_cursor_blink_mode
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_cursor_blink_mode")
  (return-type "VteTerminalCursorBlinkMode")
)

(define-method set_cursor_shape
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_cursor_shape")
  (return-type "none")
  (parameters
    '("VteTerminalCursorShape" "shape")
  )
)

(define-method get_cursor_shape
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_cursor_shape")
  (return-type "VteTerminalCursorShape")
)

(define-method set_scrollback_lines
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_scrollback_lines")
  (return-type "none")
  (parameters
    '("glong" "lines")
  )
)

(define-method im_append_menuitems
  (of-object "VteTerminal")
  (c-name "vte_terminal_im_append_menuitems")
  (return-type "none")
  (parameters
    '("GtkMenuShell*" "menushell")
  )
)

(define-method set_font
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_font")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "font_desc")
  )
)

(define-method set_font_full
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_font_full")
  (return-type "none")
  (parameters
    '("const-PangoFontDescription*" "font_desc")
    '("VteTerminalAntiAlias" "antialias")
  )
)

(define-method set_font_from_string
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_font_from_string")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method set_font_from_string_full
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_font_from_string_full")
  (return-type "none")
  (parameters
    '("const-char*" "name")
    '("VteTerminalAntiAlias" "antialias")
  )
)

(define-method get_font
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_font")
  (return-type "const-PangoFontDescription*")
)

(define-method get_using_xft
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_using_xft")
  (return-type "gboolean")
)

(define-method set_allow_bold
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_allow_bold")
  (return-type "none")
  (parameters
    '("gboolean" "allow_bold")
  )
)

(define-method get_allow_bold
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_allow_bold")
  (return-type "gboolean")
)

(define-method get_has_selection
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_has_selection")
  (return-type "gboolean")
)

(define-method set_word_chars
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_word_chars")
  (return-type "none")
  (parameters
    '("const-char*" "spec")
  )
)

(define-method is_word_char
  (of-object "VteTerminal")
  (c-name "vte_terminal_is_word_char")
  (return-type "gboolean")
  (parameters
    '("gunichar" "c")
  )
)

(define-method set_backspace_binding
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_backspace_binding")
  (return-type "none")
  (parameters
    '("VteTerminalEraseBinding" "binding")
  )
)

(define-method set_delete_binding
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_delete_binding")
  (return-type "none")
  (parameters
    '("VteTerminalEraseBinding" "binding")
  )
)

(define-method set_mouse_autohide
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_mouse_autohide")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_mouse_autohide
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_mouse_autohide")
  (return-type "gboolean")
)

(define-method reset
  (of-object "VteTerminal")
  (c-name "vte_terminal_reset")
  (return-type "none")
  (parameters
    '("gboolean" "full")
    '("gboolean" "clear_history")
  )
)

(define-method get_text
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_text")
  (return-type "char*")
  (parameters
    '("gboolean(*" "is_selected")
  )
)

(define-method get_text_include_trailing_spaces
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_text_include_trailing_spaces")
  (return-type "char*")
  (parameters
    '("gboolean(*" "is_selected")
  )
)

(define-method get_text_range
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_text_range")
  (return-type "char*")
  (parameters
    '("glong" "start_row")
    '("glong" "start_col")
    '("glong" "end_row")
    '("glong" "end_col")
    '("gboolean(*" "is_selected")
  )
)

(define-method get_cursor_position
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_cursor_position")
  (return-type "none")
  (parameters
    '("glong*" "column")
    '("glong*" "row")
  )
)

(define-method match_clear_all
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_clear_all")
  (return-type "none")
)

(define-method match_add
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_add")
  (return-type "int")
  (parameters
    '("const-char*" "match")
  )
)

(define-method match_add_gregex
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_add_gregex")
  (return-type "int")
  (parameters
    '("GRegex*" "regex")
    '("GRegexMatchFlags" "flags" (default 0))
  )
)

(define-method match_set_cursor
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_set_cursor")
  (return-type "none")
  (parameters
    '("int" "tag")
    '("GdkCursor*" "cursor")
  )
)

(define-method match_set_cursor_type
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_set_cursor_type")
  (return-type "none")
  (parameters
    '("int" "tag")
    '("GdkCursorType" "cursor_type")
  )
)

(define-method match_set_cursor_name
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_set_cursor_name")
  (return-type "none")
  (parameters
    '("int" "tag")
    '("const-char*" "cursor_name")
  )
)

(define-method match_remove
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_remove")
  (return-type "none")
  (parameters
    '("int" "tag")
  )
)

(define-method match_check
  (of-object "VteTerminal")
  (c-name "vte_terminal_match_check")
  (return-type "char*")
  (parameters
    '("glong" "column")
    '("glong" "row")
    '("int*" "tag")
  )
)

(define-method set_emulation
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_emulation")
  (return-type "none")
  (parameters
    '("const-char*" "emulation")
  )
)

(define-method get_emulation
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_emulation")
  (return-type "const-char*")
)

(define-method get_default_emulation
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_default_emulation")
  (return-type "const-char*")
)

(define-method set_encoding
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_encoding")
  (return-type "none")
  (parameters
    '("const-char*" "codeset")
  )
)

(define-method get_encoding
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_encoding")
  (return-type "const-char*")
)

(define-method get_status_line
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_status_line")
  (return-type "const-char*")
)

(define-method get_padding
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_padding")
  (return-type "none")
  (parameters
    '("int*" "xpad")
    '("int*" "ypad")
  )
)

(define-method set_pty
  (of-object "VteTerminal")
  (c-name "vte_terminal_set_pty")
  (return-type "none")
  (parameters
    '("int" "pty_master")
  )
)

(define-method get_pty
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_pty")
  (return-type "int")
)

(define-method get_adjustment
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_adjustment")
  (return-type "GtkAdjustment*")
)

(define-method get_char_width
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_char_width")
  (return-type "glong")
)

(define-method get_char_height
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_char_height")
  (return-type "glong")
)

(define-method get_char_descent
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_char_descent")
  (return-type "glong")
)

(define-method get_char_ascent
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_char_ascent")
  (return-type "glong")
)

(define-method get_row_count
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_row_count")
  (return-type "glong")
)

(define-method get_column_count
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_column_count")
  (return-type "glong")
)

(define-method get_window_title
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_window_title")
  (return-type "const-char*")
)

(define-method get_icon_title
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_icon_title")
  (return-type "const-char*")
)

(define-method get_child_exit_status
  (of-object "VteTerminal")
  (c-name "vte_terminal_get_child_exit_status")
  (return-type "int")
)



;; From vtetypebuiltins.h

(define-function vte_terminal_erase_binding_get_type
  (c-name "vte_terminal_erase_binding_get_type")
  (return-type "GType")
)

(define-function vte_terminal_anti_alias_get_type
  (c-name "vte_terminal_anti_alias_get_type")
  (return-type "GType")
)

(define-function vte_terminal_cursor_blink_mode_get_type
  (c-name "vte_terminal_cursor_blink_mode_get_type")
  (return-type "GType")
)

(define-function vte_terminal_cursor_shape_get_type
  (c-name "vte_terminal_cursor_shape_get_type")
  (return-type "GType")
)



;; From vteversion.h


;; -*- scheme -*-
; object definitions ...
(define-object Application
  (in-module "Wnck")
  (parent "GObject")
  (c-name "WnckApplication")
  (gtype-id "WNCK_TYPE_APPLICATION")
)

(define-object ClassGroup
  (in-module "Wnck")
  (parent "GObject")
  (c-name "WnckClassGroup")
  (gtype-id "WNCK_TYPE_CLASS_GROUP")
)

(define-object Pager
  (in-module "Wnck")
  (parent "GtkContainer")
  (c-name "WnckPager")
  (gtype-id "WNCK_TYPE_PAGER")
)

(define-object Screen
  (in-module "Wnck")
  (parent "GObject")
  (c-name "WnckScreen")
  (gtype-id "WNCK_TYPE_SCREEN")
)

(define-object Tasklist
  (in-module "Wnck")
  (parent "GtkContainer")
  (c-name "WnckTasklist")
  (gtype-id "WNCK_TYPE_TASKLIST")
)

(define-object Window
  (in-module "Wnck")
  (parent "GObject")
  (c-name "WnckWindow")
  (gtype-id "WNCK_TYPE_WINDOW")
)

(define-object Workspace
  (in-module "Wnck")
  (parent "GObject")
  (c-name "WnckWorkspace")
  (gtype-id "WNCK_TYPE_WORKSPACE")
)

(define-object Selector
  (in-module "Wnck")
  (parent "GtkMenuBar")
  (c-name "WnckSelector")
  (gtype-id "WNCK_TYPE_SELECTOR")
)


;; From /usr/include/libwnck-1.0/libwnck/application.h

(define-function wnck_application_get_type
  (c-name "wnck_application_get_type")
  (return-type "GType")
)

(define-function application_get
  (c-name "wnck_application_get")
  (return-type "WnckApplication*")
  (parameters
    '("gulong" "xwindow")
  )
)

(define-method get_xid
  (of-object "WnckApplication")
  (c-name "wnck_application_get_xid")
  (return-type "gulong")
)

(define-method get_windows
  (of-object "WnckApplication")
  (c-name "wnck_application_get_windows")
  (return-type "GList*")
)

(define-method get_n_windows
  (of-object "WnckApplication")
  (c-name "wnck_application_get_n_windows")
  (return-type "int")
)

(define-method get_name
  (of-object "WnckApplication")
  (c-name "wnck_application_get_name")
  (return-type "const-char*")
)

(define-method get_icon_name
  (of-object "WnckApplication")
  (c-name "wnck_application_get_icon_name")
  (return-type "const-char*")
)

(define-method get_pid
  (of-object "WnckApplication")
  (c-name "wnck_application_get_pid")
  (return-type "int")
)

(define-method get_icon
  (of-object "WnckApplication")
  (c-name "wnck_application_get_icon")
  (return-type "GdkPixbuf*")
)

(define-method get_mini_icon
  (of-object "WnckApplication")
  (c-name "wnck_application_get_mini_icon")
  (return-type "GdkPixbuf*")
)

(define-method get_icon_is_fallback
  (of-object "WnckApplication")
  (c-name "wnck_application_get_icon_is_fallback")
  (return-type "gboolean")
)

(define-method get_startup_id
  (of-object "WnckApplication")
  (c-name "wnck_application_get_startup_id")
  (return-type "const-char*")
)



;; From /usr/include/libwnck-1.0/libwnck/class-group.h

(define-function class_group_get_type
  (c-name "wnck_class_group_get_type")
  (return-type "GType")
)

(define-function class_group_get
  (c-name "wnck_class_group_get")
  (return-type "WnckClassGroup*")
  (parameters
    '("const-char*" "res_class")
  )
)

(define-method get_windows
  (of-object "WnckClassGroup")
  (c-name "wnck_class_group_get_windows")
  (return-type "GList*")
)

(define-method get_res_class
  (of-object "WnckClassGroup")
  (c-name "wnck_class_group_get_res_class")
  (return-type "const-char*")
)

(define-method get_name
  (of-object "WnckClassGroup")
  (c-name "wnck_class_group_get_name")
  (return-type "const-char*")
)

(define-method get_icon
  (of-object "WnckClassGroup")
  (c-name "wnck_class_group_get_icon")
  (return-type "GdkPixbuf*")
)

(define-method get_mini_icon
  (of-object "WnckClassGroup")
  (c-name "wnck_class_group_get_mini_icon")
  (return-type "GdkPixbuf*")
)



;; From /usr/include/libwnck-1.0/libwnck/libwnck.h



;; From /usr/include/libwnck-1.0/libwnck/pager.h

(define-function wnck_pager_get_type
  (c-name "wnck_pager_get_type")
  (return-type "GType")
)

(define-function wnck_pager_new
  (c-name "wnck_pager_new")
  (is-constructor-of "WnckPager")
  (return-type "GtkWidget*")
  (parameters
    '("WnckScreen*" "screen")
  )
)

(define-method set_screen
  (of-object "WnckPager")
  (c-name "wnck_pager_set_screen")
  (return-type "none")
  (parameters
    '("WnckScreen*" "screen")
  )
)

(define-method set_orientation
  (of-object "WnckPager")
  (c-name "wnck_pager_set_orientation")
  (return-type "none")
  (parameters
    '("GtkOrientation" "orientation")
  )
)

(define-method set_n_rows
  (of-object "WnckPager")
  (c-name "wnck_pager_set_n_rows")
  (return-type "none")
  (parameters
    '("int" "n_rows")
  )
)

(define-method set_display_mode
  (of-object "WnckPager")
  (c-name "wnck_pager_set_display_mode")
  (return-type "none")
  (parameters
    '("WnckPagerDisplayMode" "mode")
  )
)

(define-method set_show_all
  (of-object "WnckPager")
  (c-name "wnck_pager_set_show_all")
  (return-type "none")
  (parameters
    '("gboolean" "show_all_workspaces")
  )
)

(define-method set_shadow_type
  (of-object "WnckPager")
  (c-name "wnck_pager_set_shadow_type")
  (return-type "none")
  (parameters
    '("GtkShadowType" "shadow_type")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/screen.h

(define-function wnck_screen_get_type
  (c-name "wnck_screen_get_type")
  (return-type "GType")
)

(define-function screen_get_default
  (c-name "wnck_screen_get_default")
  (return-type "WnckScreen*")
)

(define-function screen_get
  (c-name "wnck_screen_get")
  (return-type "WnckScreen*")
  (parameters
    '("int" "index")
  )
)

(define-function screen_get_for_root
  (c-name "wnck_screen_get_for_root")
  (return-type "WnckScreen*")
  (parameters
    '("gulong" "root_window_id")
  )
)

(define-method get_number
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_number")
  (return-type "int")
)

(define-method get_workspace
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_workspace")
  (return-type "WnckWorkspace*")
  (parameters
    '("int" "workspace")
  )
)

(define-method get_workspace_index
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_workspace_index")
  (return-type "int")
  (parameters
    '("WnckWorkspace*" "space")
  )
)

(define-method get_workspace_neighbor
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_workspace_neighbor")
  (return-type "WnckWorkspace*")
  (parameters
    '("WnckWorkspace*" "space")
    '("WnckMotionDirection" "direction")
  )
)

(define-method get_active_workspace
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_active_workspace")
  (return-type "WnckWorkspace*")
)

(define-method get_workspaces
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_workspaces")
  (return-type "GList*")
)

(define-method get_active_window
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_active_window")
  (return-type "WnckWindow*")
)

(define-method get_previously_active_window
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_previously_active_window")
  (return-type "WnckWindow*")
)

(define-method get_windows
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_windows")
  (return-type "GList*")
)

(define-method get_windows_stacked
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_windows_stacked")
  (return-type "GList*")
)

(define-method force_update
  (of-object "WnckScreen")
  (c-name "wnck_screen_force_update")
  (return-type "none")
)

(define-method get_workspace_count
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_workspace_count")
  (return-type "int")
)

(define-method change_workspace_count
  (of-object "WnckScreen")
  (c-name "wnck_screen_change_workspace_count")
  (return-type "none")
  (parameters
    '("int" "count")
  )
)

(define-method get_window_manager_name
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_window_manager_name")
  (return-type "const-char*")
)

(define-method net_wm_supports
  (of-object "WnckScreen")
  (c-name "wnck_screen_net_wm_supports")
  (return-type "gboolean")
  (parameters
    '("const-char*" "atom")
  )
)

(define-method get_background_pixmap
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_background_pixmap")
  (return-type "gulong")
)

(define-method get_width
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_height")
  (return-type "int")
)

(define-method get_showing_desktop
  (of-object "WnckScreen")
  (c-name "wnck_screen_get_showing_desktop")
  (return-type "gboolean")
)

(define-method toggle_showing_desktop
  (of-object "WnckScreen")
  (c-name "wnck_screen_toggle_showing_desktop")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)

(define-method move_viewport
  (of-object "WnckScreen")
  (c-name "wnck_screen_move_viewport")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
  )
)

(define-method try_set_workspace_layout
  (of-object "WnckScreen")
  (c-name "wnck_screen_try_set_workspace_layout")
  (return-type "int")
  (parameters
    '("int" "current_token")
    '("int" "rows")
    '("int" "columns")
  )
)

(define-method release_workspace_layout
  (of-object "WnckScreen")
  (c-name "wnck_screen_release_workspace_layout")
  (return-type "none")
  (parameters
    '("int" "current_token")
  )
)

(define-method calc_workspace_layout
  (of-object "WnckScreen")
  (c-name "wnck_screen_calc_workspace_layout")
  (return-type "none")
  (parameters
    '("int" "num_workspaces")
    '("int" "space_index")
    '("WnckWorkspaceLayout*" "layout")
  )
)

(define-function wnck_screen_free_workspace_layout
  (c-name "wnck_screen_free_workspace_layout")
  (return-type "none")
  (parameters
    '("WnckWorkspaceLayout*" "layout")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/tasklist.h

(define-function wnck_tasklist_get_type
  (c-name "wnck_tasklist_get_type")
  (return-type "GType")
)

(define-function wnck_tasklist_new
  (c-name "wnck_tasklist_new")
  (is-constructor-of "WnckTasklist")
  (return-type "GtkWidget*")
  (parameters
    '("WnckScreen*" "screen")
  )
)

(define-method set_screen
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_screen")
  (return-type "none")
  (parameters
    '("WnckScreen*" "screen")
  )
)

(define-method get_size_hint_list
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_get_size_hint_list")
  (return-type "const-int*")
  (parameters
    '("int*" "n_elements")
  )
)

(define-method set_grouping
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_grouping")
  (return-type "none")
  (parameters
    '("WnckTasklistGroupingType" "grouping")
  )
)

(define-method set_switch_workspace_on_unminimize
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_switch_workspace_on_unminimize")
  (return-type "none")
  (parameters
    '("gboolean" "switch_workspace_on_unminimize")
  )
)

(define-method set_grouping_limit
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_grouping_limit")
  (return-type "none")
  (parameters
    '("gint" "limit")
  )
)

(define-method set_include_all_workspaces
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_include_all_workspaces")
  (return-type "none")
  (parameters
    '("gboolean" "include_all_workspaces")
  )
)

(define-method set_button_relief
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_button_relief")
  (return-type "none")
  (parameters
    '("GtkReliefStyle" "relief")
  )
)

(define-method set_minimum_width
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_minimum_width")
  (return-type "none")
  (parameters
    '("gint" "size")
  )
)

(define-method get_minimum_width
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_get_minimum_width")
  (return-type "gint")
)

(define-method set_minimum_height
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_minimum_height")
  (return-type "none")
  (parameters
    '("gint" "size")
  )
)

(define-method get_minimum_height
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_get_minimum_height")
  (return-type "gint")
)

(define-method set_icon_loader
  (of-object "WnckTasklist")
  (c-name "wnck_tasklist_set_icon_loader")
  (return-type "none")
  (parameters
    '("WnckLoadIconFunction" "load_icon_func")
    '("void*" "data")
    '("GDestroyNotify" "free_data_func")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/util.h

(define-function set_client_type
  (c-name "wnck_set_client_type")
  (return-type "none")
  (parameters
    '("WnckClientType" "ewmh_sourceindication_client_type")
  ))

(define-function gtk_window_set_dock_type
  (c-name "wnck_gtk_window_set_dock_type")
  (return-type "none")
  (parameters
    '("GtkWindow*" "window")
  )
)

(define-function xid_read_resource_usage
  (c-name "wnck_xid_read_resource_usage")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "gdk_display")
    '("unsigned-long" "xid")
    '("WnckResourceUsage*" "usage")
  )
)

(define-function pid_read_resource_usage
  (c-name "wnck_pid_read_resource_usage")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "gdk_display")
    '("unsigned-long" "pid")
    '("WnckResourceUsage*" "usage")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/window-action-menu.h

(define-function create_window_action_menu
  (c-name "wnck_create_window_action_menu")
  (return-type "GtkWidget*")
  (parameters
    '("WnckWindow*" "window")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/window.h

(define-function wnck_window_get_type
  (c-name "wnck_window_get_type")
  (return-type "GType")
)

(define-function window_get
  (c-name "wnck_window_get")
  (return-type "WnckWindow*")
  (parameters
    '("gulong" "xwindow")
  )
)

(define-method get_screen
  (of-object "WnckWindow")
  (c-name "wnck_window_get_screen")
  (return-type "WnckScreen*")
)

(define-method has_name
  (of-object "WnckWindow")
  (c-name "wnck_window_has_name")
  (return-type "gboolean")
)

(define-method get_name
  (of-object "WnckWindow")
  (c-name "wnck_window_get_name")
  (return-type "const-char*")
)

(define-method has_icon_name
  (of-object "WnckWindow")
  (c-name "wnck_window_has_icon_name")
  (return-type "gboolean")
)

(define-method get_icon_name
  (of-object "WnckWindow")
  (c-name "wnck_window_get_icon_name")
  (return-type "const-char*")
)

(define-method get_application
  (of-object "WnckWindow")
  (c-name "wnck_window_get_application")
  (return-type "WnckApplication*")
)

(define-method get_transient
  (of-object "WnckWindow")
  (c-name "wnck_window_get_transient")
  (return-type "WnckWindow*")
)

(define-method get_group_leader
  (of-object "WnckWindow")
  (c-name "wnck_window_get_group_leader")
  (return-type "gulong")
)

(define-method get_xid
  (of-object "WnckWindow")
  (c-name "wnck_window_get_xid")
  (return-type "gulong")
)

(define-method get_class_group
  (of-object "WnckWindow")
  (c-name "wnck_window_get_class_group")
  (return-type "WnckClassGroup*")
)

(define-method get_session_id
  (of-object "WnckWindow")
  (c-name "wnck_window_get_session_id")
  (return-type "const-char*")
)

(define-method get_session_id_utf8
  (of-object "WnckWindow")
  (c-name "wnck_window_get_session_id_utf8")
  (return-type "const-char*")
)

(define-method get_pid
  (of-object "WnckWindow")
  (c-name "wnck_window_get_pid")
  (return-type "int")
)

(define-method get_sort_order
  (of-object "WnckWindow")
  (c-name "wnck_window_get_sort_order")
  (return-type "gint")
)

(define-method set_sort_order
  (of-object "WnckWindow")
  (c-name "wnck_window_set_sort_order")
  (return-type "none")
  (parameters
    '("gint" "order")
  )
)

(define-method get_window_type
  (of-object "WnckWindow")
  (c-name "wnck_window_get_window_type")
  (return-type "WnckWindowType")
)

(define-method set_window_type
  (of-object "WnckWindow")
  (c-name "wnck_window_set_window_type")
  (return-type "none")
  (parameters
    '("WnckWindowType" "wintype")
  )
)

(define-method is_minimized
  (of-object "WnckWindow")
  (c-name "wnck_window_is_minimized")
  (return-type "gboolean")
)

(define-method is_maximized_horizontally
  (of-object "WnckWindow")
  (c-name "wnck_window_is_maximized_horizontally")
  (return-type "gboolean")
)

(define-method is_maximized_vertically
  (of-object "WnckWindow")
  (c-name "wnck_window_is_maximized_vertically")
  (return-type "gboolean")
)

(define-method is_maximized
  (of-object "WnckWindow")
  (c-name "wnck_window_is_maximized")
  (return-type "gboolean")
)

(define-method is_shaded
  (of-object "WnckWindow")
  (c-name "wnck_window_is_shaded")
  (return-type "gboolean")
)

(define-method is_above
  (of-object "WnckWindow")
  (c-name "wnck_window_is_above")
  (return-type "gboolean")
)

(define-method is_below
  (of-object "WnckWindow")
  (c-name "wnck_window_is_below")
  (return-type "gboolean")
)

(define-method is_skip_pager
  (of-object "WnckWindow")
  (c-name "wnck_window_is_skip_pager")
  (return-type "gboolean")
)

(define-method is_skip_tasklist
  (of-object "WnckWindow")
  (c-name "wnck_window_is_skip_tasklist")
  (return-type "gboolean")
)

(define-method is_fullscreen
  (of-object "WnckWindow")
  (c-name "wnck_window_is_fullscreen")
  (return-type "gboolean")
)

(define-method is_sticky
  (of-object "WnckWindow")
  (c-name "wnck_window_is_sticky")
  (return-type "gboolean")
)

(define-method needs_attention
  (of-object "WnckWindow")
  (c-name "wnck_window_needs_attention")
  (return-type "gboolean")
)

(define-method or_transient_needs_attention
  (of-object "WnckWindow")
  (c-name "wnck_window_or_transient_needs_attention")
  (return-type "gboolean")
)

(define-method set_skip_pager
  (of-object "WnckWindow")
  (c-name "wnck_window_set_skip_pager")
  (return-type "none")
  (parameters
    '("gboolean" "skip")
  )
)

(define-method set_skip_tasklist
  (of-object "WnckWindow")
  (c-name "wnck_window_set_skip_tasklist")
  (return-type "none")
  (parameters
    '("gboolean" "skip")
  )
)

(define-method set_fullscreen
  (of-object "WnckWindow")
  (c-name "wnck_window_set_fullscreen")
  (return-type "none")
  (parameters
    '("gboolean" "fullscreen")
  )
)

(define-method close
  (of-object "WnckWindow")
  (c-name "wnck_window_close")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method minimize
  (of-object "WnckWindow")
  (c-name "wnck_window_minimize")
  (return-type "none")
)

(define-method unminimize
  (of-object "WnckWindow")
  (c-name "wnck_window_unminimize")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method maximize
  (of-object "WnckWindow")
  (c-name "wnck_window_maximize")
  (return-type "none")
)

(define-method unmaximize
  (of-object "WnckWindow")
  (c-name "wnck_window_unmaximize")
  (return-type "none")
)

(define-method maximize_horizontally
  (of-object "WnckWindow")
  (c-name "wnck_window_maximize_horizontally")
  (return-type "none")
)

(define-method unmaximize_horizontally
  (of-object "WnckWindow")
  (c-name "wnck_window_unmaximize_horizontally")
  (return-type "none")
)

(define-method maximize_vertically
  (of-object "WnckWindow")
  (c-name "wnck_window_maximize_vertically")
  (return-type "none")
)

(define-method unmaximize_vertically
  (of-object "WnckWindow")
  (c-name "wnck_window_unmaximize_vertically")
  (return-type "none")
)

(define-method shade
  (of-object "WnckWindow")
  (c-name "wnck_window_shade")
  (return-type "none")
)

(define-method unshade
  (of-object "WnckWindow")
  (c-name "wnck_window_unshade")
  (return-type "none")
)

(define-method make_above
  (of-object "WnckWindow")
  (c-name "wnck_window_make_above")
  (return-type "none")
)

(define-method unmake_above
  (of-object "WnckWindow")
  (c-name "wnck_window_unmake_above")
  (return-type "none")
)

(define-method make_below
  (of-object "WnckWindow")
  (c-name "wnck_window_make_below")
  (return-type "none")
)

(define-method unmake_below
  (of-object "WnckWindow")
  (c-name "wnck_window_unmake_below")
  (return-type "none")
)

(define-method stick
  (of-object "WnckWindow")
  (c-name "wnck_window_stick")
  (return-type "none")
)

(define-method unstick
  (of-object "WnckWindow")
  (c-name "wnck_window_unstick")
  (return-type "none")
)

(define-method keyboard_move
  (of-object "WnckWindow")
  (c-name "wnck_window_keyboard_move")
  (return-type "none")
)

(define-method keyboard_size
  (of-object "WnckWindow")
  (c-name "wnck_window_keyboard_size")
  (return-type "none")
)

(define-method get_workspace
  (of-object "WnckWindow")
  (c-name "wnck_window_get_workspace")
  (return-type "WnckWorkspace*")
)

(define-method move_to_workspace
  (of-object "WnckWindow")
  (c-name "wnck_window_move_to_workspace")
  (return-type "none")
  (parameters
    '("WnckWorkspace*" "space")
  )
)

(define-method is_pinned
  (of-object "WnckWindow")
  (c-name "wnck_window_is_pinned")
  (return-type "gboolean")
)

(define-method pin
  (of-object "WnckWindow")
  (c-name "wnck_window_pin")
  (return-type "none")
)

(define-method unpin
  (of-object "WnckWindow")
  (c-name "wnck_window_unpin")
  (return-type "none")
)

(define-method activate
  (of-object "WnckWindow")
  (c-name "wnck_window_activate")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method is_active
  (of-object "WnckWindow")
  (c-name "wnck_window_is_active")
  (return-type "gboolean")
)

(define-method is_most_recently_activated
  (of-object "WnckWindow")
  (c-name "wnck_window_is_most_recently_activated")
  (return-type "gboolean")
)

(define-method activate_transient
  (of-object "WnckWindow")
  (c-name "wnck_window_activate_transient")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method transient_is_most_recently_activated
  (of-object "WnckWindow")
  (c-name "wnck_window_transient_is_most_recently_activated")
  (return-type "gboolean")
)

(define-method get_icon
  (of-object "WnckWindow")
  (c-name "wnck_window_get_icon")
  (return-type "GdkPixbuf*")
)

(define-method get_mini_icon
  (of-object "WnckWindow")
  (c-name "wnck_window_get_mini_icon")
  (return-type "GdkPixbuf*")
)

(define-method get_icon_is_fallback
  (of-object "WnckWindow")
  (c-name "wnck_window_get_icon_is_fallback")
  (return-type "gboolean")
)

(define-method set_icon_geometry
  (of-object "WnckWindow")
  (c-name "wnck_window_set_icon_geometry")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method get_actions
  (of-object "WnckWindow")
  (c-name "wnck_window_get_actions")
  (return-type "WnckWindowActions")
)

(define-method get_state
  (of-object "WnckWindow")
  (c-name "wnck_window_get_state")
  (return-type "WnckWindowState")
)

(define-method get_client_window_geometry
  (of-object "WnckWindow")
  (c-name "wnck_window_get_client_window_geometry")
  (return-type "none")
  (parameters
    '("int*" "xp")
    '("int*" "yp")
    '("int*" "widthp")
    '("int*" "heightp")
  )
)

(define-method get_geometry
  (of-object "WnckWindow")
  (c-name "wnck_window_get_geometry")
  (return-type "none")
  (parameters
    '("int*" "xp")
    '("int*" "yp")
    '("int*" "widthp")
    '("int*" "heightp")
  )
)

(define-method set_geometry
  (of-object "WnckWindow")
  (c-name "wnck_window_set_geometry")
  (return-type "none")
  (parameters
    '("WnckWindowGravity" "gravity")
    '("WnckWindowMoveResizeMask" "geometry_mask")
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-method is_visible_on_workspace
  (of-object "WnckWindow")
  (c-name "wnck_window_is_visible_on_workspace")
  (return-type "gboolean")
  (parameters
    '("WnckWorkspace*" "workspace")
  )
)

(define-method is_on_workspace
  (of-object "WnckWindow")
  (c-name "wnck_window_is_on_workspace")
  (return-type "gboolean")
  (parameters
    '("WnckWorkspace*" "workspace")
  )
)

(define-method is_in_viewport
  (of-object "WnckWindow")
  (c-name "wnck_window_is_in_viewport")
  (return-type "gboolean")
  (parameters
    '("WnckWorkspace*" "workspace")
  )
)



;; From /usr/include/libwnck-1.0/libwnck/wnck-enum-types.h

(define-function wnck_pager_display_mode_get_type
  (c-name "wnck_pager_display_mode_get_type")
  (return-type "GType")
)

(define-function wnck_motion_direction_get_type
  (c-name "wnck_motion_direction_get_type")
  (return-type "GType")
)

(define-function wnck_tasklist_grouping_type_get_type
  (c-name "wnck_tasklist_grouping_type_get_type")
  (return-type "GType")
)

(define-function wnck_client_type_get_type
  (c-name "wnck_client_type_get_type")
  (return-type "GType")
)

(define-function wnck_window_state_get_type
  (c-name "wnck_window_state_get_type")
  (return-type "GType")
)

(define-function wnck_window_actions_get_type
  (c-name "wnck_window_actions_get_type")
  (return-type "GType")
)

(define-function wnck_window_type_get_type
  (c-name "wnck_window_type_get_type")
  (return-type "GType")
)


(define-function wnck_window_gravity_get_type
  (c-name "wnck_window_gravity_get_type")
  (return-type "GType")
)

(define-function wnck_window_move_resize_mask_get_type
  (c-name "wnck_window_move_resize_mask_get_type")
  (return-type "GType")
)


;; From /usr/include/libwnck-1.0/libwnck/workspace.h

(define-function wnck_workspace_get_type
  (c-name "wnck_workspace_get_type")
  (return-type "GType")
)

(define-method get_number
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_number")
  (return-type "int")
)

(define-method get_name
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_name")
  (return-type "const-char*")
)

(define-method change_name
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_change_name")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method get_screen
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_screen")
  (return-type "WnckScreen*")
)

(define-method activate
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_activate")
  (return-type "none")
  (parameters
    '("guint32" "timestamp")
  )
)

(define-method get_width
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_height")
  (return-type "int")
)

(define-method get_viewport_x
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_viewport_x")
  (return-type "int")
)

(define-method get_viewport_y
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_viewport_y")
  (return-type "int")
)

(define-method is_virtual
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_is_virtual")
  (return-type "gboolean")
)


(define-method get_layout_row
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_layout_row")
  (return-type "int")
)

(define-method get_layout_column
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_layout_column")
  (return-type "int")
)

(define-method get_neighbor
  (of-object "WnckWorkspace")
  (c-name "wnck_workspace_get_neighbor")
  (return-type "WnckWorkspace*")
  (parameters
    '("WnckMotionDirection" "direction")
  )
)



;; From selector.h

(define-function selector_new
  (c-name "wnck_selector_new")
  (is-constructor-of "WnckSelector")
  (return-type "GtkWidget*")
)

(define-function selector_get_type
  (c-name "wnck_selector_get_type")
  (return-type "GType")
)

(parameters
