#ifndef __SCANNERS_MATH_PARSER_H
#define __SCANNERS_MATH_PARSER_H
/*
5D programming language
Copyright (C) 2011  Danny Milosavljevic
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <set>
#include "Scanners/Scanner"
#include "AST/AST"
#include "AST/Symbol"
#include "Scanners/OperatorPrecedenceList"
#include "Scanners/ShuntingYardParser"

namespace Scanners {

#ifndef OLD_PARSER
typedef ShuntingYardParser MathParser;
#else
class MathParser : public Scanner {
protected:
	bool B_process_macros;
	OperatorPrecedenceList* operator_precedence_list;
private:
	AST::Cons* bound_symbols;
	AST::NodeT parse_value(void);
	AST::NodeT parse_application(void);
	AST::NodeT parse_argument(void);
	AST::NodeT parse_binary_operation(bool B_allow_args, int precedence_level);
	AST::NodeT parse_abstraction(void);
	AST::NodeT operation(AST::NodeT operator_, AST::NodeT operand_1, AST::NodeT operand_2);
	AST::NodeT parse_macro(AST::NodeT operand_1);
	AST::NodeT parse_define(AST::NodeT operand_1);
	AST::NodeT parse_defrec(AST::NodeT operand_1);
	AST::NodeT parse_quote(AST::NodeT operand_1);
	AST::NodeT parse_list(void);
	AST::NodeT parse_let_form(void);
protected:
	AST::NodeT parse_expression(void);
	AST::Cons* parse_S_list_body(void);
public:
	void parse_closing_brace(void);
	AST::NodeT parse(OperatorPrecedenceList* operator_precedence_list);
	AST::Cons* parse_S_list(bool B_consume_closing_brace);
	AST::NodeT parse_S_Expression(void);
	static AST::NodeT parse_simple(const char* text, OperatorPrecedenceList* operator_precedence_list); // TODO remove
	MathParser(void);
	void push(FILE* input_file, int line_number);
protected:
	void enter_abstraction(AST::Symbol* name);
	void leave_abstraction(AST::Symbol* name);
public:
	std::set<AST::Symbol*> get_bound_symbols(const char* prefix);
};

bool macro_operator_P(AST::NodeT operator_);
#endif

}; /* end namespace Scanners */


#endif /* ndef __SCANNERS_MATH_PARSER_H */
